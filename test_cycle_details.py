#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –¥–µ—Ç–∞–ª–µ–π —Ü–∏–∫–ª–∞
"""

import asyncio
import sys
from datetime import datetime, timedelta
from motor.motor_asyncio import AsyncIOMotorClient
import os
from dotenv import load_dotenv
import requests
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
MONGODB_URL = os.getenv("MONGODB_URL", "mongodb://localhost:27017/")
DB_NAME = os.getenv("DB_NAME", "rps_game")
API_URL = "http://localhost:3000"

async def test_cycle_details():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–µ—Ç–∞–ª–µ–π —Ü–∏–∫–ª–∞"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        client = AsyncIOMotorClient(MONGODB_URL)
        db = client[DB_NAME]
        
        print(f"Connected to MongoDB: {MONGODB_URL}")
        print(f"Database: {DB_NAME}")
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        print("\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        login_response = requests.post(f"{API_URL}/auth/login", json={
            "username": "admin",
            "password": "admin123"
        })
        
        if login_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_response.status_code}")
            print(login_response.text)
            return
        
        token = login_response.json()["access_token"]
        headers = {"Authorization": f"Bearer {token}"}
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤...")
        bots_response = requests.get(f"{API_URL}/admin/bots", headers=headers)
        
        if bots_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–≤: {bots_response.status_code}")
            return
        
        bots = bots_response.json()["bots"]
        regular_bots = [b for b in bots if b.get("is_regular_bot")]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(regular_bots)} –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤")
        
        # –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏
        test_bot = None
        for bot in regular_bots:
            if bot.get("completed_cycles", 0) > 0:
                test_bot = bot
                break
        
        if not test_bot:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–≤ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î –Ω–∞–ø—Ä—è–º—É—é
            cycles_count = await db.completed_cycles.count_documents({})
            print(f"üìä –í –ë–î –Ω–∞–π–¥–µ–Ω–æ {cycles_count} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤")
            
            if cycles_count > 0:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª
                cycle = await db.completed_cycles.find_one({})
                bot_id = cycle["bot_id"]
                bot = await db.bots.find_one({"id": bot_id})
                if bot:
                    test_bot = bot
                    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç–∞ {bot['name']} –∏–∑ –ë–î")
        
        if not test_bot:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –±–æ—Ç–∞")
            return
        
        print(f"\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞: {test_bot['name']}")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: {test_bot.get('completed_cycles', 0)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–∏–∫–ª–æ–≤
        print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–∏–∫–ª–æ–≤...")
        history_response = requests.get(
            f"{API_URL}/admin/bots/{test_bot['id']}/cycle-history",
            headers=headers
        )
        
        if history_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {history_response.status_code}")
            print(history_response.text)
            return
        
        cycles = history_response.json()["games"]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(cycles)} —Ü–∏–∫–ª–æ–≤")
        
        if not cycles:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª
        test_cycle = cycles[0]
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ü–∏–∫–ª #{test_cycle['cycle_number']}:")
        print(f"   ID: {test_cycle['id']}")
        print(f"   –°—Ç–∞–≤–æ–∫: {test_cycle['total_bets']}")
        print(f"   W/L/D: {test_cycle['wins']}/{test_cycle['losses']}/{test_cycle['draws']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ü–∏–∫–ª–∞
        print("\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ü–∏–∫–ª–∞...")
        details_response = requests.get(
            f"{API_URL}/admin/bots/{test_bot['id']}/completed-cycle-bets",
            params={"cycle_id": test_cycle['id']},
            headers=headers
        )
        
        if details_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {details_response.status_code}")
            print(details_response.text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª
            db_cycle = await db.completed_cycles.find_one({"id": test_cycle['id']})
            if db_cycle:
                print(f"‚úÖ –¶–∏–∫–ª –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                print(f"   Bot ID: {db_cycle.get('bot_id')}")
                print(f"   Start: {db_cycle.get('start_time')}")
                print(f"   End: {db_cycle.get('end_time')}")
            else:
                print(f"‚ùå –¶–∏–∫–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
            saved_games = await db.cycle_games.count_documents({
                "cycle_id": test_cycle['id'],
                "bot_id": test_bot['id']
            })
            print(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–≥—Ä –¥–ª—è —Ü–∏–∫–ª–∞: {saved_games}")
            
            if saved_games == 0:
                print("‚ö†Ô∏è –ò–≥—Ä—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ cycle_games, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏...")
                
                if db_cycle:
                    games_by_time = await db.games.count_documents({
                        "creator_id": test_bot['id'],
                        "status": "COMPLETED",
                        "created_at": {
                            "$gte": db_cycle["start_time"],
                            "$lte": db_cycle["end_time"]
                        }
                    })
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {games_by_time}")
            
            return
        
        data = details_response.json()
        bets = data.get("bets", [])
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(bets)} —Å—Ç–∞–≤–æ–∫")
        
        if bets:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç–∞–≤–∫–∏
            print("\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞–≤–æ–∫:")
            for i, bet in enumerate(bets[:3], 1):
                print(f"\n   –°—Ç–∞–≤–∫–∞ #{bet['game_number']}:")
                print(f"   ID: {bet['id']}")
                print(f"   –°—É–º–º–∞: ${bet['bet_amount']}")
                print(f"   –ì–µ–º—ã: {bet.get('bet_gems', {})}")
                print(f"   –•–æ–¥—ã: {bet['creator_move']} vs {bet['opponent_move']}")
                print(f"   –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {bet['opponent_name']}")
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {bet['result']}")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    finally:
        client.close()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–µ—Ç–∞–ª–µ–π —Ü–∏–∫–ª–∞...")
    asyncio.run(test_cycle_details())