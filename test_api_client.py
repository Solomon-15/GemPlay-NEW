#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
"""

import json
import time
import subprocess
import sys

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –≠–ù–î–ü–û–ò–ù–¢–û–í")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    try:
        result = subprocess.run(['python3', '-c', '''
import urllib.request
import json

def test_endpoint(url, name):
    try:
        with urllib.request.urlopen(url, timeout=5) as response:
            data = json.loads(response.read().decode())
            print(f"‚úÖ {name}: {response.status}")
            return data
    except Exception as e:
        print(f"‚ùå {name}: {e}")
        return None

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
print("üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã...")

# Health check
health = test_endpoint("http://localhost:8000/health", "Health Check")

# –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤  
bots = test_endpoint("http://localhost:8000/admin/bots/regular/list", "–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤")

# –ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤
cycles = test_endpoint("http://localhost:8000/admin/profit/bot-cycles-history", "–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤")

# –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
bot_cycles = test_endpoint("http://localhost:8000/admin/bots/test_bot_001/completed-cycles", "–¶–∏–∫–ª—ã –±–æ—Ç–∞")

# –°–≤–æ–¥–∫–∞ –¥–æ—Ö–æ–¥–æ–≤
revenue = test_endpoint("http://localhost:8000/admin/profit/bot-revenue-summary", "–°–≤–æ–¥–∫–∞ –¥–æ—Ö–æ–¥–æ–≤")

# –î–µ—Ç–∞–ª–∏ —Å—Ç–∞–≤–æ–∫
bet_details = test_endpoint("http://localhost:8000/admin/bots/test_bot_001/cycle-bets", "–î–µ—Ç–∞–ª–∏ —Å—Ç–∞–≤–æ–∫")

print("\\nüìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•:")
if bot_cycles and bot_cycles.get("cycles"):
    cycle = bot_cycles["cycles"][0]
    print(f"–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç: {bot_cycles.get(\\"bot_name\\", \\"N/A\\")}")
    print(f"  –í—Å–µ–≥–æ –∏–≥—Ä: {cycle.get(\\"total_games\\", \\"N/A\\")}")
    print(f"  W/L/D: {cycle.get(\\"wins\\", \\"N/A\\")}/{cycle.get(\\"losses\\", \\"N/A\\")}/{cycle.get(\\"draws\\", \\"N/A\\")}")
    print(f"  –û–±—â–∞—è —Å—É–º–º–∞: ${cycle.get(\\"total_bet\\", \\"N/A\\")}")
    print(f"  –í—ã–∏–≥—Ä—ã—à–∏: ${cycle.get(\\"total_winnings\\", \\"N/A\\")}")
    print(f"  –ü–æ—Ç–µ—Ä–∏: ${cycle.get(\\"total_losses\\", \\"N/A\\")}")
    print(f"  –ü—Ä–∏–±—ã–ª—å: ${cycle.get(\\"profit\\", \\"N/A\\")}")
    print(f"  ROI: {cycle.get(\\"roi_percent\\", \\"N/A\\\")}%")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
    expected = {"total_bet": 809, "total_winnings": 356, "total_losses": 291, "profit": 65, "roi_percent": 10.05}
    print("\\nüéØ –ü–†–û–í–ï–†–ö–ê –≠–¢–ê–õ–û–ù–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô:")
    all_correct = True
    for key, expected_val in expected.items():
        actual_val = cycle.get(key)
        if key == "roi_percent":
            correct = abs(actual_val - expected_val) < 0.1 if actual_val is not None else False
        else:
            correct = actual_val == expected_val
        status = "‚úÖ" if correct else "‚ùå"
        print(f"  {status} {key}: {actual_val} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_val})")
        if not correct:
            all_correct = False
    
    if all_correct:
        print("\\nüéâ –í–°–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ö–û–†–†–ï–ö–¢–ù–´!")
    else:
        print("\\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø!")

if revenue:
    print(f"\\nüí∞ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${revenue.get(\\"revenue\\", {}).get(\\"total\\", \\"N/A\\")}")
    print(f"  –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤: {revenue.get(\\"cycles\\", {}).get(\\"total\\", \\"N/A\\")}")
    print(f"  –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {revenue.get(\\"cycles\\", {}).get(\\"profitable\\", \\"N/A\\")}")
'''], capture_output=True, text=True, timeout=10)
        
        print(result.stdout)
        if result.stderr:
            print("–û—à–∏–±–∫–∏:", result.stderr)
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

def main():
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø MOCK API")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("=" * 60)
    
    test_api_endpoints()
    
    print(f"\n" + "=" * 60)
    print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –î–ê–õ–¨–ù–ï–ô–®–ï–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("1. Mock —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend: cd /workspace/frontend && npm start")
    print("3. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("4. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (admin/admin)")
    print("5. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏' ‚Üí '–û–±—ã—á–Ω—ã–µ –±–æ—Ç—ã'")
    print("6. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ '–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤' –¥–ª—è TestBot ROI")
    print("7. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ '–î–æ—Ö–æ–¥ –æ—Ç –±–æ—Ç–æ–≤' –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–∏–±—ã–ª–∏")
    print("=" * 60)

if __name__ == "__main__":
    main()