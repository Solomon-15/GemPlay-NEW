#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ pause_on_draw –∏–∑ frontend
"""

import re
import os

def remove_pause_on_draw_from_file(file_path):
    """–£–¥–∞–ª—è–µ—Ç pause_on_draw –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False
    
    print(f"üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {os.path.basename(file_path)}")
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    original_content = content
    changes_made = 0
    
    # 1. –£–¥–∞–ª—è–µ–º –ø–æ–ª—è pause_on_draw –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤
    patterns_to_remove = [
        r'pause_on_draw:\s*\d+,?\s*',
        r'pause_on_draw:\s*botForm\.pause_on_draw,?\s*',
        r'pause_on_draw:\s*parseInt\([^)]+\)\s*\|\|\s*\d+,?\s*',
        r'pause_on_draw:\s*[^,\n}]+,?\s*'
    ]
    
    for pattern in patterns_to_remove:
        matches = re.findall(pattern, content)
        if matches:
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(matches)} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π pause_on_draw")
            content = re.sub(pattern, '// –£–î–ê–õ–ï–ù–û: pause_on_draw\n', content)
            changes_made += len(matches)
    
    # 2. –£–¥–∞–ª—è–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å "–ü–∞—É–∑–∞ –ø—Ä–∏ –Ω–∏—á—å–µ"
    ui_pattern = r'\{/\*\s*–ü–∞—É–∑–∞ –ø—Ä–∏ –Ω–∏—á—å–µ\s*\*/\}.*?</div>\s*</div>'
    ui_matches = re.findall(ui_pattern, content, re.DOTALL)
    if ui_matches:
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(ui_matches)} UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        content = re.sub(ui_pattern, '{/* –£–î–ê–õ–ï–ù–û: –ü–∞—É–∑–∞ –ø—Ä–∏ –Ω–∏—á—å–µ - –ª–æ–≥–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞ */}', content, flags=re.DOTALL)
        changes_made += len(ui_matches)
    
    # 3. –£–¥–∞–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é pause_on_draw
    validation_pattern = r'if\s*\(\s*formData\.pause_on_draw.*?\)\s*\{[^}]*\}'
    validation_matches = re.findall(validation_pattern, content, re.DOTALL)
    if validation_matches:
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(validation_matches)} –≤–∞–ª–∏–¥–∞—Ü–∏–π")
        content = re.sub(validation_pattern, '// –£–î–ê–õ–ï–ù–û: –≤–∞–ª–∏–¥–∞—Ü–∏—è pause_on_draw', content, flags=re.DOTALL)
        changes_made += len(validation_matches)
    
    # 4. –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ onChange –¥–ª—è pause_on_draw
    onchange_pattern = r'onChange=\{[^}]*pause_on_draw[^}]*\}'
    onchange_matches = re.findall(onchange_pattern, content)
    if onchange_matches:
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(onchange_matches)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ onChange")
        content = re.sub(onchange_pattern, '// –£–î–ê–õ–ï–ù–û: onChange –¥–ª—è pause_on_draw', content)
        changes_made += len(onchange_matches)
    
    if changes_made > 0:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"   ‚úÖ –°–¥–µ–ª–∞–Ω–æ {changes_made} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return True
    else:
        print(f"   ‚ÑπÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        return False

def main():
    print("üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –õ–û–ì–ò–ö–ò PAUSE_ON_DRAW –ò–ó FRONTEND")
    print("=" * 50)
    
    files_to_process = [
        "/workspace/frontend/src/components/RegularBotsManagement.js",
        "/workspace/frontend/src/components/RegularBotsManagement.js.bak"
    ]
    
    total_changes = 0
    
    for file_path in files_to_process:
        if remove_pause_on_draw_from_file(file_path):
            total_changes += 1
    
    print(f"\nüìä –ò–¢–û–ì–û:")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_to_process)}")
    print(f"   –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_changes}")
    
    if total_changes > 0:
        print(f"\n‚úÖ –õ–û–ì–ò–ö–ê PAUSE_ON_DRAW –£–î–ê–õ–ï–ù–ê!")
        print("   - –£–¥–∞–ª–µ–Ω—ã –ø–æ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤")
        print("   - –£–¥–∞–ª–µ–Ω—ã UI —ç–ª–µ–º–µ–Ω—Ç—ã")
        print("   - –£–¥–∞–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è")
        print("   - –£–¥–∞–ª–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π")
    else:
        print(f"\n‚ÑπÔ∏è  –õ–æ–≥–∏–∫–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

if __name__ == "__main__":
    main()