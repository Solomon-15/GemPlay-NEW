#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á—ë—Ç–æ–≤ –±–æ—Ç–æ–≤
"""

import math

def half_up_round(x):
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ half-up: ‚â•0.5 –≤–≤–µ—Ä—Ö, <0.5 –≤–Ω–∏–∑"""
    return int(x + 0.5) if x >= 0 else int(x - 0.5)

def test_calculation_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Ä–∞—Å—á—ë—Ç–æ–≤"""
    print("üß™ –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –†–ê–°–ß–Å–¢–û–í –ë–û–¢–û–í")
    print("=" * 50)
    
    # –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    exact_cycle_total = 809
    wins_percentage = 44.0
    losses_percentage = 36.0
    draws_percentage = 20.0
    
    print(f"üìä –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"   –û–±—â–∞—è —Å—É–º–º–∞ —Ü–∏–∫–ª–∞: {exact_cycle_total}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç—ã: W={wins_percentage}%, L={losses_percentage}%, D={draws_percentage}%")
    
    # 1. –¢–µ—Å—Ç —Ä–∞—Å—á—ë—Ç–∞ —Å—ã—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    print(f"\nüî¢ –®–ê–ì 1: –†–∞—Å—á—ë—Ç —Å—ã—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
    raw_w = exact_cycle_total * (wins_percentage / 100.0)
    raw_l = exact_cycle_total * (losses_percentage / 100.0)
    raw_d = exact_cycle_total * (draws_percentage / 100.0)
    
    print(f"   W: {exact_cycle_total} √ó {wins_percentage/100} = {raw_w:.2f}")
    print(f"   L: {exact_cycle_total} √ó {losses_percentage/100} = {raw_l:.2f}")
    print(f"   D: {exact_cycle_total} √ó {draws_percentage/100} = {raw_d:.2f}")
    
    # 2. –¢–µ—Å—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è half-up
    print(f"\nüìê –®–ê–ì 2: –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ half-up")
    wins_sum = half_up_round(raw_w)
    losses_sum = half_up_round(raw_l)
    draws_sum = half_up_round(raw_d)
    
    print(f"   W: {raw_w:.2f} ‚Üí –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å {raw_w - math.floor(raw_w):.2f} ‚Üí {wins_sum}")
    print(f"   L: {raw_l:.2f} ‚Üí –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å {raw_l - math.floor(raw_l):.2f} ‚Üí {losses_sum}")
    print(f"   D: {raw_d:.2f} ‚Üí –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å {raw_d - math.floor(raw_d):.2f} ‚Üí {draws_sum}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
    print(f"\n‚úÖ –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã")
    total_sum = wins_sum + losses_sum + draws_sum
    print(f"   –°—É–º–º–∞: {wins_sum} + {losses_sum} + {draws_sum} = {total_sum}")
    print(f"   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {total_sum} == {exact_cycle_total} ‚Üí {'‚úÖ' if total_sum == exact_cycle_total else '‚ùå'}")
    
    # 4. –†–∞—Å—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    print(f"\nüí∞ –®–ê–ì 4: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    active_pool = wins_sum + losses_sum
    profit = wins_sum - losses_sum
    roi = (profit / active_pool * 100) if active_pool > 0 else 0
    
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª: {wins_sum} + {losses_sum} = {active_pool}")
    print(f"   –ü—Ä–∏–±—ã–ª—å: {wins_sum} - {losses_sum} = {profit}")
    print(f"   ROI: {profit} / {active_pool} √ó 100 = {roi:.2f}%")
    
    # 5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    print(f"\nüéØ –®–ê–ì 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º")
    expected = {
        "total": 809,
        "wins": 356,
        "losses": 291,
        "draws": 162,
        "active_pool": 647,
        "profit": 65,
        "roi": 10.05
    }
    
    actual = {
        "total": total_sum,
        "wins": wins_sum,
        "losses": losses_sum,
        "draws": draws_sum,
        "active_pool": active_pool,
        "profit": profit,
        "roi": round(roi, 2)
    }
    
    all_correct = True
    for key in expected:
        exp_val = expected[key]
        act_val = actual[key]
        
        if key == "roi":
            # –î–ª—è ROI –¥–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
            correct = abs(act_val - exp_val) < 0.1
        else:
            correct = act_val == exp_val
        
        status = "‚úÖ" if correct else "‚ùå"
        print(f"   {key}: {act_val} (–æ–∂–∏–¥–∞–ª–æ—Å—å {exp_val}) {status}")
        
        if not correct:
            all_correct = False
    
    print(f"\nüèÜ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    if all_correct:
        print("‚úÖ –í–°–ï –†–ê–°–ß–Å–¢–´ –ö–û–†–†–ï–ö–¢–ù–´! –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        return True
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò! –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏.")
        return False

def test_different_scenarios():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
    print(f"\nüîÑ –¢–ï–°–¢ –†–ê–ó–õ–ò–ß–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í")
    print("=" * 50)
    
    scenarios = [
        {"total": 809, "w": 44, "l": 36, "d": 20, "name": "–≠—Ç–∞–ª–æ–Ω–Ω—ã–π (1-100, 16 –∏–≥—Ä)"},
        {"total": 800, "w": 50, "l": 30, "d": 20, "name": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π 1"},
        {"total": 1000, "w": 40, "l": 40, "d": 20, "name": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π 2"},
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π {i}: {scenario['name']}")
        total = scenario["total"]
        w_pct = scenario["w"]
        l_pct = scenario["l"]
        d_pct = scenario["d"]
        
        # –†–∞—Å—á—ë—Ç
        raw_w = total * (w_pct / 100.0)
        raw_l = total * (l_pct / 100.0)
        raw_d = total * (d_pct / 100.0)
        
        wins = half_up_round(raw_w)
        losses = half_up_round(raw_l)
        draws = half_up_round(raw_d)
        
        calc_total = wins + losses + draws
        active_pool = wins + losses
        profit = wins - losses
        roi = (profit / active_pool * 100) if active_pool > 0 else 0
        
        print(f"   –í—Ö–æ–¥–Ω—ã–µ: {total} ({w_pct}%/{l_pct}%/{d_pct}%)")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: W={wins}, L={losses}, D={draws}, Œ£={calc_total}")
        print(f"   –§–∏–Ω–∞–Ω—Å—ã: –∞–∫—Ç–∏–≤–Ω—ã–π_–ø—É–ª={active_pool}, –ø—Ä–∏–±—ã–ª—å={profit}, ROI={roi:.2f}%")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {'‚úÖ' if calc_total == total else '‚ùå'}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –õ–û–ì–ò–ö–ò –†–ê–°–ß–Å–¢–û–í")
    print("=" * 60)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    success = test_calculation_logic()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_different_scenarios()
    
    print(f"\n" + "=" * 60)
    if success:
        print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏.")
    print("=" * 60)

if __name__ == "__main__":
    main()