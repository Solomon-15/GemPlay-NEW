#!/usr/bin/env python3
import asyncio
import aiohttp
import time

BACKEND_URL = "https://revenue-tracker-21.preview.emergentagent.com/api"
ADMIN_EMAIL = "admin@gemplay.com"
ADMIN_PASSWORD = "Admin123!"

# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞
MIN_BET = 1
MAX_BET = 100
CYCLE_GAMES = 16
WINS_COUNT = 6
LOSSES_COUNT = 6
DRAWS_COUNT = 4
WINS_PCT = 39.60
LOSSES_PCT = 32.40
DRAWS_PCT = 28.00
EXPECTED_TOTAL = 800
EXPECTED_ROI = 10.07  # ¬±0.2% –¥–æ–ø—É—Å–∫–∞


async def login(session: aiohttp.ClientSession) -> str:
	async with session.post(f"{BACKEND_URL}/auth/login", json={"email": ADMIN_EMAIL, "password": ADMIN_PASSWORD}) as resp:
		resp.raise_for_status()
		data = await resp.json()
		return data["access_token"]


async def create_bot(session: aiohttp.ClientSession, token: str, name: str) -> str:
	headers = {"Authorization": f"Bearer {token}"}
	payload = {
		"name": name,
		"min_bet_amount": MIN_BET,
		"max_bet_amount": MAX_BET,
		"wins_count": WINS_COUNT,
		"losses_count": LOSSES_COUNT,
		"draws_count": DRAWS_COUNT,
		"wins_percentage": WINS_PCT,
		"losses_percentage": LOSSES_PCT,
		"draws_percentage": DRAWS_PCT,
		"cycle_games": CYCLE_GAMES,
		"pause_between_cycles": 5
	}
	async with session.post(f"{BACKEND_URL}/admin/bots/create-regular", json=payload, headers=headers) as resp:
		resp.raise_for_status()
		data = await resp.json()
		return data.get("created_bot_id") or data.get("bot_id") or data.get("id")


async def recalc_bets(session: aiohttp.ClientSession, token: str, bot_id: str) -> None:
	headers = {"Authorization": f"Bearer {token}"}
	async with session.post(f"{BACKEND_URL}/admin/bots/{bot_id}/recalculate-bets", headers=headers) as resp:
		resp.raise_for_status()


async def get_cycle_bets(session: aiohttp.ClientSession, token: str, bot_id: str) -> dict:
	headers = {"Authorization": f"Bearer {token}"}
	async with session.get(f"{BACKEND_URL}/admin/bots/{bot_id}/cycle-bets", headers=headers) as resp:
		resp.raise_for_status()
		return await resp.json()


async def delete_bot(session: aiohttp.ClientSession, token: str, bot_id: str) -> None:
	headers = {"Authorization": f"Bearer {token}"}
	async with session.delete(f"{BACKEND_URL}/admin/bots/{bot_id}/delete", headers=headers, json={"reason": "test cleanup"}) as resp:
		# –¥–æ–ø—É—Å–∫–∞–µ–º 404 –µ—Å–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω
		if resp.status not in (200, 204, 404):
			raise RuntimeError(f"Delete failed: {resp.status}")


async def run_once(run_id: int) -> bool:
	async with aiohttp.ClientSession() as session:
		token = await login(session)
		name = f"DupCheckBot#{int(time.time())}_{run_id}"
		bot_id = await create_bot(session, token, name)
		assert bot_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å id —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"

		# –§–æ—Ä—Å–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç–∞–≤–æ–∫
		await recalc_bets(session, token, bot_id)
		# –î–∞–¥–∏–º —Å–∏—Å—Ç–µ–º–µ —Å–µ–∫—É–Ω–¥—É –Ω–∞ –∑–∞–ø–∏—Å—å
		await asyncio.sleep(0.5)

		data = await get_cycle_bets(session, token, bot_id)
		bets = data.get("bets", [])
		sums = data.get("sums", {})

		# –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∞–≤–æ–∫ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ id/index
		assert isinstance(bets, list) and len(bets) == CYCLE_GAMES, f"–û–∂–∏–¥–∞–ª–æ—Å—å {CYCLE_GAMES} —Å—Ç–∞–≤–æ–∫, –ø–æ–ª—É—á–µ–Ω–æ {len(bets)}"
		ids = [b.get("id") for b in bets if b.get("id")]
		assert len(set(ids)) == len(ids) == CYCLE_GAMES, "–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—Ç–∞–≤–æ–∫ (id)"
		idxs = [b.get("index") for b in bets if b.get("index") is not None]
		if idxs:  # –∏–Ω–¥–µ–∫—Å –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ API
			assert len(set(idxs)) == len(idxs), "–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–Ω–¥–µ–∫—Å–æ–≤"

		# –°—É–º–º—ã –ø–æ API
		wins_sum = int(sums.get("wins_sum", 0))
		losses_sum = int(sums.get("losses_sum", 0))
		draws_sum = int(sums.get("draws_sum", 0))
		total_sum = int(sums.get("total_sum", 0))
		active_pool = int(sums.get("active_pool", 0))
		profit = int(sums.get("profit", 0))
		roi_active = float(sums.get("roi_active", 0.0))

		# –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —É–¥–≤–æ–µ–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
		assert total_sum == wins_sum + losses_sum + draws_sum, "total_sum != W+L+D"
		assert total_sum == EXPECTED_TOTAL, f"–û–∂–∏–¥–∞–ª–∞—Å—å –±–∞–∑–∞ {EXPECTED_TOTAL}, –∞ –Ω–µ {total_sum}"
		assert active_pool == wins_sum + losses_sum, "active_pool != W+L"
		assert profit == wins_sum - losses_sum, "profit != W‚àíL"
		assert abs(roi_active - EXPECTED_ROI) <= 0.2, f"ROI {roi_active}% –≤–Ω–µ –¥–æ–ø—É—Å–∫–∞"

		print(f"‚úÖ –ü—Ä–æ–≥–æ–Ω {run_id}: W={wins_sum}, L={losses_sum}, D={draws_sum}, Œ£={total_sum}, –ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª={active_pool}, –ü—Ä–∏–±—ã–ª—å={profit}, ROI={roi_active:.2f}%")

		# –£–¥–∞–ª—è–µ–º –±–æ—Ç–∞
		await delete_bot(session, token, bot_id)
		return True


async def main():
	print("üöÄ HTTP‚Äë—Ç–µ—Å—Ç –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã/–¥—É–±–ª–∏–∫–∞—Ç—ã: –±–∞–∑–∞ 800, ROI 10%, 16 –∏–≥—Ä")
	ok = True
	for i in range(1, 4):
		try:
			res = await run_once(i)
			ok = ok and res
		except AssertionError as e:
			print(f"‚ùå –ü—Ä–æ–≥–æ–Ω {i} –Ω–µ –ø—Ä–æ—à—ë–ª: {e}")
			ok = False
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–æ–Ω–∞ {i}: {e}")
			ok = False
	
	if ok:
		print("\nüéâ –í—Å–µ 3 –ø—Ä–æ–≥–æ–Ω–∞ –ø—Ä–æ—à–ª–∏. –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
	else:
		print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±—ç–∫–µ–Ω–¥–∞ –∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")


if __name__ == "__main__":
	asyncio.run(main())