#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –°–¢–ê–í–û–ö (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)
Final Testing of Bet Range Generation Fix - Russian Review

–ö–û–ù–¢–ï–ö–°–¢: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫ –¥–ª—è Regular –±–æ—Ç–æ–≤.
–ü—Ä–æ–±–ª–µ–º–∞: –ë–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Å—Ç–∞–≤–∫–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ min_bet_amount - max_bet_amount.

–ó–ê–î–ê–ß–ê:
1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ "Final_Fix_Test_Bot":
   - min_bet_amount: 20.0  
   - max_bet_amount: 30.0
   - win_percentage: 55
   - cycle_games: 5

2. –ü–æ–¥–æ–∂–¥–∞—Ç—å 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫

3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –í–°–ï —Å—Ç–∞–≤–∫–∏ –±–æ—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 20.0-30.0:
   - –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ GET /api/bots/active-games
   - –ù–∞–π—Ç–∏ –≤—Å–µ –∏–≥—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ "Final_Fix_Test_Bot"
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥—É—é bet_amount - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É 20.0 –∏ 30.0
   - –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 5 —Å—Ç–∞–≤–æ–∫ (cycle_games=5)

4. –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã

–ö–†–ò–¢–ò–ß–ù–û–°–¢–¨: –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç–∞–≤–æ–∫.
"""

import requests
import json
import time
import sys
from typing import Dict, Any, Optional, List, Tuple
from datetime import datetime

# Configuration
BASE_URL = "https://russian-commission.preview.emergentagent.com/api"
ADMIN_USER = {
    "email": "admin@gemplay.com",
    "password": "Admin123!"
}

# Test configuration
import time as time_module
TEST_BOT_NAME = f"Final_Fix_Test_Bot_{int(time_module.time())}"
MIN_BET_AMOUNT = 20.0
MAX_BET_AMOUNT = 30.0
WIN_PERCENTAGE = 55
CYCLE_GAMES = 5
WAIT_TIME = 15  # seconds

# Colors for terminal output
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

def print_header(text: str):
    """Print colored header"""
    print(f"\n{Colors.BOLD}{Colors.CYAN}{'='*80}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{text.center(80)}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{'='*80}{Colors.END}\n")

def print_step(step_num: int, description: str):
    """Print test step"""
    print(f"\n{Colors.BOLD}{Colors.BLUE}üîπ –®–ê–ì {step_num}: {description}{Colors.END}")

def print_success(message: str):
    """Print success message"""
    print(f"{Colors.GREEN}‚úÖ {message}{Colors.END}")

def print_error(message: str):
    """Print error message"""
    print(f"{Colors.RED}‚ùå {message}{Colors.END}")

def print_warning(message: str):
    """Print warning message"""
    print(f"{Colors.YELLOW}‚ö†Ô∏è {message}{Colors.END}")

def print_info(message: str):
    """Print info message"""
    print(f"{Colors.CYAN}‚ÑπÔ∏è {message}{Colors.END}")

def make_request(method: str, endpoint: str, headers: Dict = None, data: Dict = None, params: Dict = None) -> Tuple[bool, Any, str]:
    """Make HTTP request with error handling"""
    url = f"{BASE_URL}{endpoint}"
    
    try:
        start_time = time.time()
        
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, params=params, timeout=30)
        elif method.upper() == "POST":
            response = requests.post(url, headers=headers, json=data, timeout=30)
        elif method.upper() == "PUT":
            response = requests.put(url, headers=headers, json=data, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            return False, None, f"Unsupported method: {method}"
        
        response_time = time.time() - start_time
        
        try:
            response_data = response.json()
        except:
            response_data = response.text
        
        success = response.status_code in [200, 201]
        details = f"Status: {response.status_code}, Time: {response_time:.3f}s"
        
        if not success:
            details += f", Error: {response_data}"
        
        return success, response_data, details
        
    except requests.exceptions.Timeout:
        return False, None, "Request timeout (30s)"
    except requests.exceptions.ConnectionError:
        return False, None, "Connection error"
    except Exception as e:
        return False, None, f"Request error: {str(e)}"

def authenticate_admin() -> Optional[str]:
    """Authenticate as admin and return access token"""
    print_info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä...")
    
    success, response_data, details = make_request(
        "POST", 
        "/auth/login",
        data=ADMIN_USER
    )
    
    if success and response_data and "access_token" in response_data:
        token = response_data["access_token"]
        print_success("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–∞")
        return token
    else:
        print_error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {details}")
        return None

def delete_existing_test_bot(token: str) -> bool:
    """Delete existing test bot if it exists"""
    print_info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞ '{TEST_BOT_NAME}'...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Get all bots
    success, response_data, details = make_request(
        "GET",
        "/admin/bots",
        headers=headers
    )
    
    if not success:
        print_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤: {details}")
        return False
    
    bots = response_data if isinstance(response_data, list) else response_data.get("bots", [])
    
    # Find test bot
    test_bot = None
    for bot in bots:
        if bot.get("name") == TEST_BOT_NAME:
            test_bot = bot
            break
    
    if test_bot:
        print_info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç '{TEST_BOT_NAME}', —É–¥–∞–ª—è–µ–º...")
        
        success, response_data, details = make_request(
            "DELETE",
            f"/admin/bots/{test_bot['id']}",
            headers=headers
        )
        
        if success:
            print_success(f"–ë–æ—Ç '{TEST_BOT_NAME}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            return True
        else:
            print_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞: {details}")
            return False
    else:
        print_info(f"–ë–æ—Ç '{TEST_BOT_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        return True

def create_test_bot(token: str) -> Optional[str]:
    """Create test bot with specific parameters"""
    print_step(1, f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ '{TEST_BOT_NAME}'")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    bot_data = {
        "name": TEST_BOT_NAME,
        "min_bet_amount": MIN_BET_AMOUNT,
        "max_bet_amount": MAX_BET_AMOUNT,
        "win_percentage": WIN_PERCENTAGE,
        "cycle_games": CYCLE_GAMES,
        "pause_between_cycles": 5,  # 5 seconds between cycles
        "pause_on_draw": 1,  # 1 second on draw
        "creation_mode": "queue-based",
        "profit_strategy": "balanced"
    }
    
    print_info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞:")
    print_info(f"  - name: {bot_data['name']}")
    print_info(f"  - min_bet_amount: {bot_data['min_bet_amount']}")
    print_info(f"  - max_bet_amount: {bot_data['max_bet_amount']}")
    print_info(f"  - win_percentage: {bot_data['win_percentage']}")
    print_info(f"  - cycle_games: {bot_data['cycle_games']}")
    
    success, response_data, details = make_request(
        "POST",
        "/admin/bots/create-regular",
        headers=headers,
        data=bot_data
    )
    
    if success and response_data:
        bot_id = response_data.get("id") or response_data.get("bot_id")
        
        # Handle different response formats
        if not bot_id and "created_bots" in response_data:
            created_bots = response_data.get("created_bots", [])
            if created_bots:
                bot_id = created_bots[0]
        
        if bot_id:
            print_success(f"–ë–æ—Ç '{TEST_BOT_NAME}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: {bot_id}")
            return bot_id
        else:
            print_error(f"–ë–æ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ: {response_data}")
            return None
    else:
        print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {details}")
        return None

def wait_for_bet_creation():
    """Wait for automatic bet creation"""
    print_step(2, f"–û–∂–∏–¥–∞–Ω–∏–µ {WAIT_TIME} —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫")
    
    for i in range(WAIT_TIME):
        remaining = WAIT_TIME - i
        print(f"\r{Colors.YELLOW}‚è≥ –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–∫—É–Ω–¥: {remaining:2d}{Colors.END}", end="", flush=True)
        time.sleep(1)
    
    print(f"\n{Colors.GREEN}‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ{Colors.END}")

def get_bot_active_games(token: str) -> List[Dict]:
    """Get all active games for regular bots"""
    print_step(3, "–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä —á–µ—Ä–µ–∑ GET /api/bots/active-games")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    success, response_data, details = make_request(
        "GET",
        "/bots/active-games",
        headers=headers
    )
    
    if success and response_data:
        games = response_data if isinstance(response_data, list) else response_data.get("games", [])
        print_success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(games)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä Regular –±–æ—Ç–æ–≤")
        return games
    else:
        print_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {details}")
        return []

def analyze_bot_bets(games: List[Dict], bot_id: str = None) -> Dict[str, Any]:
    """Analyze bets created by the test bot"""
    print_step(4, f"–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–≤–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–º '{TEST_BOT_NAME}'")
    
    # Find games created by our test bot
    test_bot_games = []
    
    print_info(f"–ü–æ–∏—Å–∫ –∏–≥—Ä —Å—Ä–µ–¥–∏ {len(games)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä...")
    print_info(f"–ò—â–µ–º –ø–æ bot_id: {bot_id}")
    
    for game in games:
        # Check if game was created by our test bot
        creator_name = game.get("creator_name") or game.get("bot_name") or ""
        creator_id = game.get("creator_id", "")
        bot_game_id = game.get("bot_id", "")
        
        # Debug: show first few games to understand structure
        if len(test_bot_games) == 0 and len(games) > 0:
            print_info(f"–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–≥—Ä—ã: {list(game.keys())}")
            print_info(f"creator_name: '{creator_name}', creator_id: '{creator_id}', bot_id: '{bot_game_id}'")
        
        # Try multiple ways to match the bot
        if (creator_name == TEST_BOT_NAME or 
            creator_id == bot_id or 
            bot_game_id == bot_id):
            test_bot_games.append(game)
    
    print_info(f"–ù–∞–π–¥–µ–Ω–æ {len(test_bot_games)} –∏–≥—Ä —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–º '{TEST_BOT_NAME}'")
    
    if not test_bot_games:
        print_warning("–ë–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã!")
        # Show some sample games for debugging
        if games:
            print_info("–ü—Ä–∏–º–µ—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä:")
            for i, game in enumerate(games[:3]):
                creator_name = game.get("creator_name") or game.get("bot_name") or "Unknown"
                bet_amount = game.get("bet_amount", 0)
                print_info(f"  –ò–≥—Ä–∞ {i+1}: creator='{creator_name}', bet=${bet_amount}")
        
        return {
            "total_games": 0,
            "games_in_range": 0,
            "games_out_of_range": 0,
            "bet_amounts": [],
            "out_of_range_bets": [],
            "success_rate": 0.0,
            "expected_games": CYCLE_GAMES,
            "analysis": "–ë–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–ª –∏–≥—Ä—ã"
        }
    
    # Analyze bet amounts
    bet_amounts = []
    games_in_range = 0
    games_out_of_range = 0
    out_of_range_bets = []
    
    print_info("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–≤–æ–∫:")
    
    for i, game in enumerate(test_bot_games, 1):
        bet_amount = game.get("bet_amount", 0)
        bet_amounts.append(bet_amount)
        
        in_range = MIN_BET_AMOUNT <= bet_amount <= MAX_BET_AMOUNT
        
        if in_range:
            games_in_range += 1
            status = f"{Colors.GREEN}‚úÖ –í –î–ò–ê–ü–ê–ó–û–ù–ï{Colors.END}"
        else:
            games_out_of_range += 1
            out_of_range_bets.append(bet_amount)
            status = f"{Colors.RED}‚ùå –í–ù–ï –î–ò–ê–ü–ê–ó–û–ù–ê{Colors.END}"
        
        print(f"  –ò–≥—Ä–∞ {i}: ${bet_amount:.1f} - {status}")
    
    success_rate = (games_in_range / len(test_bot_games)) * 100 if test_bot_games else 0
    
    return {
        "total_games": len(test_bot_games),
        "games_in_range": games_in_range,
        "games_out_of_range": games_out_of_range,
        "bet_amounts": bet_amounts,
        "out_of_range_bets": out_of_range_bets,
        "success_rate": success_rate,
        "expected_games": CYCLE_GAMES
    }

def get_gem_combinations_analysis(games: List[Dict]) -> Dict[str, Any]:
    """Analyze gem combinations for test bot games"""
    print_info("–ê–Ω–∞–ª–∏–∑ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≥–µ–º–æ–≤:")
    
    gem_combinations = []
    total_gem_value = 0
    
    for game in games:
        bet_gems = game.get("bet_gems", {})
        if bet_gems:
            gem_combinations.append(bet_gems)
            # Calculate gem value based on GEM_PRICES
            gem_prices = {
                "Ruby": 1.0,
                "Amber": 2.0,
                "Topaz": 5.0,
                "Emerald": 10.0,
                "Aquamarine": 25.0,
                "Sapphire": 50.0,
                "Magic": 100.0
            }
            
            game_gem_value = 0
            for gem_type, quantity in bet_gems.items():
                if gem_type in gem_prices:
                    game_gem_value += gem_prices[gem_type] * quantity
            
            total_gem_value += game_gem_value
            print_info(f"  –ì–µ–º—ã: {bet_gems} = ${game_gem_value:.1f}")
    
    return {
        "combinations": gem_combinations,
        "total_value": total_gem_value,
        "average_value": total_gem_value / len(gem_combinations) if gem_combinations else 0
    }

def print_detailed_statistics(analysis: Dict[str, Any], games: List[Dict]):
    """Print detailed statistics and analysis"""
    print_header("–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    
    total = analysis["total_games"]
    in_range = analysis["games_in_range"]
    out_of_range = analysis["games_out_of_range"]
    success_rate = analysis["success_rate"]
    expected = analysis["expected_games"]
    
    print(f"{Colors.BOLD}üìä –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:{Colors.END}")
    print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å –∏–≥—Ä: {expected}")
    print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ: {total}")
    print(f"   {Colors.GREEN}‚úÖ –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ ({MIN_BET_AMOUNT}-{MAX_BET_AMOUNT}): {in_range}{Colors.END}")
    print(f"   {Colors.RED}‚ùå –í–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {out_of_range}{Colors.END}")
    print(f"   {Colors.CYAN}üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%{Colors.END}")
    
    if analysis["bet_amounts"]:
        bet_amounts = analysis["bet_amounts"]
        print(f"\n{Colors.BOLD}üí∞ –°–£–ú–ú–´ –°–¢–ê–í–û–ö:{Colors.END}")
        print(f"   –í—Å–µ —Å—Ç–∞–≤–∫–∏: {bet_amounts}")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: ${min(bet_amounts):.1f}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: ${max(bet_amounts):.1f}")
        print(f"   –°—Ä–µ–¥–Ω—è—è: ${sum(bet_amounts)/len(bet_amounts):.1f}")
    
    if analysis["out_of_range_bets"]:
        print(f"\n{Colors.BOLD}{Colors.RED}üö® –°–¢–ê–í–ö–ò –í–ù–ï –î–ò–ê–ü–ê–ó–û–ù–ê:{Colors.END}")
        for bet in analysis["out_of_range_bets"]:
            print(f"   ${bet:.1f}")
    
    # Gem combinations analysis
    if total > 0:
        test_bot_games = [g for g in games if g.get("creator_name") == TEST_BOT_NAME or g.get("bot_name") == TEST_BOT_NAME]
        gem_analysis = get_gem_combinations_analysis(test_bot_games)
        
        print(f"\n{Colors.BOLD}üíé –ê–ù–ê–õ–ò–ó –ö–û–ú–ë–ò–ù–ê–¶–ò–ô –ì–ï–ú–û–í:{Colors.END}")
        print(f"   –í—Å–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {len(gem_analysis['combinations'])}")
        print(f"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–º–æ–≤: ${gem_analysis['total_value']:.1f}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${gem_analysis['average_value']:.1f}")

def print_final_conclusion(analysis: Dict[str, Any]):
    """Print final conclusion and recommendations"""
    print_header("–§–ò–ù–ê–õ–¨–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    
    total = analysis["total_games"]
    success_rate = analysis["success_rate"]
    expected = analysis["expected_games"]
    
    if total == 0:
        print(f"{Colors.RED}{Colors.BOLD}üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ë–û–¢ –ù–ï –°–û–ó–î–ê–õ –ù–ò –û–î–ù–û–ô –ò–ì–†–´!{Colors.END}")
        print(f"{Colors.RED}–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:{Colors.END}")
        print(f"{Colors.RED}  1. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç{Colors.END}")
        print(f"{Colors.RED}  2. –ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è{Colors.END}")
        print(f"{Colors.RED}  3. –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ maintain_all_bots_active_bets(){Colors.END}")
        print(f"{Colors.RED}  4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ü–∏–∫–ª–∞–º–∏ –±–æ—Ç–æ–≤{Colors.END}")
        
    elif total != expected:
        print(f"{Colors.YELLOW}{Colors.BOLD}‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –° –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –ò–ì–û–†:{Colors.END}")
        print(f"{Colors.YELLOW}–û–∂–∏–¥–∞–ª–æ—Å—å: {expected} –∏–≥—Ä, –°–æ–∑–¥–∞–Ω–æ: {total} –∏–≥—Ä{Colors.END}")
        print(f"{Colors.YELLOW}–õ–æ–≥–∏–∫–∞ cycle_games –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ{Colors.END}")
        
    if success_rate == 100.0 and total == expected:
        print(f"{Colors.GREEN}{Colors.BOLD}üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –°–¢–ê–í–û–ö –£–°–ü–ï–®–ù–û!{Colors.END}")
        print(f"{Colors.GREEN}‚úÖ –í—Å–µ {total} —Å—Ç–∞–≤–æ–∫ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ {MIN_BET_AMOUNT}-{MAX_BET_AMOUNT}{Colors.END}")
        print(f"{Colors.GREEN}‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç cycle_games = {expected}{Colors.END}")
        print(f"{Colors.GREEN}‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É{Colors.END}")
        
    elif success_rate >= 80.0:
        print(f"{Colors.YELLOW}{Colors.BOLD}‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ({success_rate:.1f}% —É—Å–ø–µ—Ö–∞){Colors.END}")
        print(f"{Colors.YELLOW}–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã{Colors.END}")
        print(f"{Colors.YELLOW}–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞{Colors.END}")
        
    else:
        print(f"{Colors.RED}{Colors.BOLD}üö® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢! ({success_rate:.1f}% —É—Å–ø–µ—Ö–∞){Colors.END}")
        print(f"{Colors.RED}–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞–≤–æ–∫ –≤—Å–µ –µ—â–µ –Ω–∞—Ä—É—à–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω min_bet_amount - max_bet_amount{Colors.END}")
        print(f"{Colors.RED}–¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞{Colors.END}")
        
        print(f"\n{Colors.RED}{Colors.BOLD}üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:{Colors.END}")
        print(f"{Colors.RED}1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é generate_bot_bet_amount() –≤ server.py{Colors.END}")
        print(f"{Colors.RED}2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ min_bet_amount –∏ max_bet_amount –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è{Colors.END}")
        print(f"{Colors.RED}3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–º–æ–≤{Colors.END}")
        print(f"{Colors.RED}4. –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é bet_amount –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–≥—Ä—ã{Colors.END}")

def main():
    """Main test execution"""
    print_header("–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –°–¢–ê–í–û–ö")
    print(f"{Colors.BLUE}üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫ –¥–ª—è Regular –±–æ—Ç–æ–≤{Colors.END}")
    print(f"{Colors.BLUE}üìã –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {MIN_BET_AMOUNT}-{MAX_BET_AMOUNT}{Colors.END}")
    
    # Authenticate
    token = authenticate_admin()
    if not token:
        print_error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        sys.exit(1)
    
    try:
        # Delete existing test bot if exists
        delete_existing_test_bot(token)
        
        # Create test bot
        bot_id = create_test_bot(token)
        if not bot_id:
            print_error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞")
            sys.exit(1)
        
        # Wait for bet creation
        wait_for_bet_creation()
        
        # Get active games
        games = get_bot_active_games(token)
        
        # Analyze bot bets
        analysis = analyze_bot_bets(games, bot_id)
        
        # Print detailed statistics
        print_detailed_statistics(analysis, games)
        
        # Print final conclusion
        print_final_conclusion(analysis)
        
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.END}")
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}{Colors.END}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()