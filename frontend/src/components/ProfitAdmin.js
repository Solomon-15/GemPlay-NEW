import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { formatCurrencyWithSymbol } from '../utils/economy';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const ProfitAdmin = ({ user }) => {
  const [stats, setStats] = useState(null);
  const [entries, setEntries] = useState([]);
  const [commissionSettings, setCommissionSettings] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [filterType, setFilterType] = useState('');
  const [dateFilter, setDateFilter] = useState({ from: '', to: '' });
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');

  useEffect(() => {
    fetchData();
  }, []);

  useEffect(() => {
    if (activeTab === 'history') {
      fetchEntries();
    }
  }, [activeTab, currentPage, filterType, dateFilter]);

  const fetchData = async () => {
    setLoading(true);
    try {
      const token = localStorage.getItem('token');
      const [statsResponse, settingsResponse] = await Promise.all([
        axios.get(`${API}/admin/profit/stats`, {
          headers: { Authorization: `Bearer ${token}` }
        }),
        axios.get(`${API}/admin/profit/commission-settings`, {
          headers: { Authorization: `Bearer ${token}` }
        })
      ]);

      setStats(statsResponse.data);
      setCommissionSettings(settingsResponse.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–±—ã–ª–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchEntries = async () => {
    try {
      const token = localStorage.getItem('token');
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: '20'
      });

      if (filterType) params.append('type', filterType);
      if (dateFilter.from) params.append('date_from', dateFilter.from);
      if (dateFilter.to) params.append('date_to', dateFilter.to);

      const response = await axios.get(`${API}/admin/profit/entries?${params}`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      setEntries(response.data.entries || []);
      setTotalPages(response.data.total_pages || 1);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏–±—ã–ª–∏:', error);
    }
  };

  const getEntryTypeName = (type) => {
    const types = {
      'bet_commission': 'üí∞ –ö–æ–º–∏—Å—Å–∏—è –æ—Ç —Å—Ç–∞–≤–æ–∫',
      'gift_commission': 'üéÅ –ö–æ–º–∏—Å—Å–∏—è –æ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤',
      'bot_profit': 'ü§ñ –î–æ—Ö–æ–¥ –æ—Ç –±–æ—Ç–æ–≤',
      'human_bot_profit': 'ü§ñ –î–æ—Ö–æ–¥ –æ—Ç Human –±–æ—Ç–æ–≤',
      'penalty': 'üö® –®—Ç—Ä–∞—Ñ—ã –∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è',
      'refund': 'üîÑ –í–æ–∑–≤—Ä–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤',
      'system_credit': '‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è',
      'game_commission': 'üí∞ –ö–æ–º–∏—Å—Å–∏—è —Å –∏–≥—Ä—ã',
      'shop_sale': 'üõí –ü—Ä–æ–¥–∞–∂–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ',
      'other': 'üìä –ü—Ä–æ—á–µ–µ'
    };
    return types[type] || type;
  };

  const getEntryTypeColor = (type) => {
    const colors = {
      'bet_commission': 'text-green-400',
      'gift_commission': 'text-pink-400',
      'bot_profit': 'text-blue-400',
      'human_bot_profit': 'text-cyan-400',
      'penalty': 'text-red-400',
      'refund': 'text-yellow-400',
      'system_credit': 'text-purple-400',
      'game_commission': 'text-green-400',
      'shop_sale': 'text-blue-400',
      'other': 'text-gray-400'
    };
    return colors[type] || 'text-gray-400';
  };

  const exportToCSV = () => {
    const headers = ['–î–∞—Ç–∞', '–í—Ä–µ–º—è', '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏', '–°—É–º–º–∞', '–ò—Å—Ç–æ—á–Ω–∏–∫', 'ID –∏–≥—Ä–æ–∫–∞/–±–æ—Ç–∞', '–û–ø–∏—Å–∞–Ω–∏–µ'];
    const csvContent = [
      headers.join(','),
      ...entries.map(entry => [
        new Date(entry.created_at).toLocaleDateString('ru-RU'),
        new Date(entry.created_at).toLocaleTimeString('ru-RU'),
        `"${getEntryTypeName(entry.type)}"`,
        entry.amount,
        `"${entry.source || '‚Äî'}"`,
        entry.source_user_id || entry.bot_id || '‚Äî',
        `"${entry.description || '‚Äî'}"`
      ].join(','))
    ].join('\n');

    const blob = new Blob(['\uFEFF' + csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `profit_history_${new Date().toISOString().split('T')[0]}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const formatDateTime = (dateString) => {
    const date = new Date(dateString);
    return {
      date: date.toLocaleDateString('ru-RU'),
      time: date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
    };
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-8">
        <div className="text-white text-xl font-roboto">–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h2 className="font-russo text-2xl text-white">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å—é</h2>
      </div>

      {/* Tabs */}
      <div className="flex space-x-4 border-b border-border-primary">
        <button
          onClick={() => setActiveTab('overview')}
          className={`px-4 py-2 font-rajdhani font-medium transition-colors ${
            activeTab === 'overview'
              ? 'text-accent-primary border-b-2 border-accent-primary'
              : 'text-text-secondary hover:text-white'
          }`}
        >
          –û–±–∑–æ—Ä
        </button>
        <button
          onClick={() => setActiveTab('entries')}
          className={`px-4 py-2 font-rajdhani font-medium transition-colors ${
            activeTab === 'entries'
              ? 'text-accent-primary border-b-2 border-accent-primary'
              : 'text-text-secondary hover:text-white'
          }`}
        >
          –ó–∞–ø–∏—Å–∏ –ø—Ä–∏–±—ã–ª–∏
        </button>
        <button
          onClick={() => setActiveTab('settings')}
          className={`px-4 py-2 font-rajdhani font-medium transition-colors ${
            activeTab === 'settings'
              ? 'text-accent-primary border-b-2 border-accent-primary'
              : 'text-text-secondary hover:text-white'
          }`}
        >
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        </button>
      </div>

      {/* Overview Tab */}
      {activeTab === 'overview' && stats && (
        <div className="space-y-8">
          {/* Main Metrics Grid */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            
            {/* –ö–æ–º–∏—Å—Å–∏—è –æ—Ç —Å—Ç–∞–≤–æ–∫ */}
            <div className="bg-surface-card border border-blue-500/30 rounded-lg p-6 hover:border-blue-500/60 transition-colors duration-200 shadow-lg">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <div className="w-10 h-10 bg-blue-500/20 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                      </svg>
                    </div>
                  </div>
                  <h3 className="font-roboto text-text-secondary text-sm mb-1">–ö–æ–º–∏—Å—Å–∏—è –æ—Ç —Å—Ç–∞–≤–æ–∫</h3>
                  <p className="font-russo text-2xl font-bold text-blue-400">{formatCurrencyWithSymbol(stats.bet_commission || 0)}</p>
                  <p className="text-xs text-text-secondary mt-1">3% –æ—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π –≤ PvP</p>
                </div>
              </div>
            </div>

            {/* –ö–æ–º–∏—Å—Å–∏—è –æ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ */}
            <div className="bg-surface-card border border-purple-500/30 rounded-lg p-6 hover:border-purple-500/60 transition-colors duration-200 shadow-lg">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <div className="w-10 h-10 bg-purple-500/20 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7" />
                      </svg>
                    </div>
                  </div>
                  <h3 className="font-roboto text-text-secondary text-sm mb-1">–ö–æ–º–∏—Å—Å–∏—è –æ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤</h3>
                  <p className="font-russo text-2xl font-bold text-purple-400">{formatCurrencyWithSymbol(stats.gift_commission || 0)}</p>
                  <p className="text-xs text-text-secondary mt-1">3% –∑–∞ –ø–µ—Ä–µ–¥–∞—á—É –≥–µ–º–æ–≤</p>
                </div>
              </div>
            </div>

            {/* –î–æ—Ö–æ–¥ –æ—Ç –±–æ—Ç–æ–≤ */}
            <div className="bg-surface-card border border-cyan-500/30 rounded-lg p-6 hover:border-cyan-500/60 transition-colors duration-200 shadow-lg">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <div className="w-10 h-10 bg-cyan-500/20 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-cyan-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                      </svg>
                    </div>
                  </div>
                  <h3 className="font-roboto text-text-secondary text-sm mb-1">–î–æ—Ö–æ–¥ –æ—Ç –±–æ—Ç–æ–≤</h3>
                  <p className="font-russo text-2xl font-bold text-cyan-400">{formatCurrencyWithSymbol(stats.bot_revenue || 0)}</p>
                  <p className="text-xs text-text-secondary mt-1">–ú–∞—Ç—á–∏ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–æ–≤</p>
                </div>
              </div>
            </div>

            {/* –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ */}
            <div className="bg-surface-card border border-yellow-500/30 rounded-lg p-6 hover:border-yellow-500/60 transition-colors duration-200 shadow-lg">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <div className="w-10 h-10 bg-yellow-500/20 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                      </svg>
                    </div>
                  </div>
                  <h3 className="font-roboto text-text-secondary text-sm mb-1">–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞</h3>
                  <p className="font-russo text-2xl font-bold text-yellow-400">{formatCurrencyWithSymbol(stats.frozen_funds || 0)}</p>
                  <p className="text-xs text-text-secondary mt-1">–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏</p>
                </div>
              </div>
            </div>

            {/* –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å */}
            <div className="bg-surface-card border border-green-500/30 rounded-lg p-6 hover:border-green-500/60 transition-colors duration-200 shadow-lg">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <div className="w-10 h-10 bg-green-500/20 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                      </svg>
                    </div>
                  </div>
                  <h3 className="font-roboto text-text-secondary text-sm mb-1">–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å</h3>
                  <p className="font-russo text-2xl font-bold text-green-400">{formatCurrencyWithSymbol(stats.total_profit || 0)}</p>
                  <p className="text-xs text-text-secondary mt-1">–°–æ–≤–æ–∫—É–ø–Ω—ã–π –¥–æ—Ö–æ–¥</p>
                </div>
              </div>
            </div>

            {/* –†–∞—Å—Ö–æ–¥—ã */}
            <div className="bg-surface-card border border-red-500/30 rounded-lg p-6 hover:border-red-500/60 transition-colors duration-200 shadow-lg">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <div className="w-10 h-10 bg-red-500/20 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 17h8m0 0V9m0 8l-8-8-4 4-6-6" />
                      </svg>
                    </div>
                  </div>
                  <h3 className="font-roboto text-text-secondary text-sm mb-1">–†–∞—Å—Ö–æ–¥—ã</h3>
                  <p className="font-russo text-2xl font-bold text-red-400">{formatCurrencyWithSymbol(stats.total_expenses || 0)}</p>
                  <p className="text-xs text-text-secondary mt-1">–ë–æ–Ω—É—Å—ã, –≤–æ–∑–≤—Ä–∞—Ç—ã</p>
                </div>
              </div>
            </div>

            {/* –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å */}
            <div className="bg-surface-card border border-accent-primary/50 rounded-lg p-6 hover:border-accent-primary transition-colors duration-200 shadow-lg ring-1 ring-accent-primary/20">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <div className="w-10 h-10 bg-accent-primary/20 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-accent-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                      </svg>
                    </div>
                  </div>
                  <h3 className="font-roboto text-text-secondary text-sm mb-1">–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å</h3>
                  <p className="font-russo text-2xl font-bold text-accent-primary">{formatCurrencyWithSymbol((stats.total_profit || 0) - (stats.total_expenses || 0))}</p>
                  <p className="text-xs text-text-secondary mt-1">–ü—Ä–∏–±—ã–ª—å - —Ä–∞—Å—Ö–æ–¥—ã</p>
                </div>
              </div>
            </div>

          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º */}
          <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg p-6">
            <h3 className="font-rajdhani text-xl font-bold text-white mb-6">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="text-center">
                <div className="text-text-secondary text-sm mb-2">–°–µ–≥–æ–¥–Ω—è</div>
                <div className="font-russo text-3xl font-bold text-blue-400 mb-1">{formatCurrencyWithSymbol(stats.today_profit || 0)}</div>
                <div className="text-xs text-text-secondary">–ü—Ä–∏–±—ã–ª—å –∑–∞ –¥–µ–Ω—å</div>
              </div>
              
              <div className="text-center">
                <div className="text-text-secondary text-sm mb-2">–≠—Ç–∞ –Ω–µ–¥–µ–ª—è</div>
                <div className="font-russo text-3xl font-bold text-purple-400 mb-1">{formatCurrencyWithSymbol(stats.week_profit || 0)}</div>
                <div className="text-xs text-text-secondary">–ü—Ä–∏–±—ã–ª—å –∑–∞ –Ω–µ–¥–µ–ª—é</div>
              </div>
              
              <div className="text-center">
                <div className="text-text-secondary text-sm mb-2">–≠—Ç–æ—Ç –º–µ—Å—è—Ü</div>
                <div className="font-russo text-3xl font-bold text-orange-400 mb-1">{formatCurrencyWithSymbol(stats.month_profit || 0)}</div>
                <div className="text-xs text-text-secondary">–ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü</div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Entries Tab */}
      {activeTab === 'entries' && (
        <div className="space-y-4">
          {/* Filter */}
          <div className="flex items-center space-x-4">
            <select
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
              className="bg-surface-card border border-border-primary rounded-lg px-4 py-2 text-white"
            >
              <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
              <option value="game_commission">–ö–æ–º–∏—Å—Å–∏—è —Å –∏–≥—Ä</option>
              <option value="shop_sale">–ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞</option>
              <option value="penalty">–®—Ç—Ä–∞—Ñ—ã</option>
              <option value="refund">–í–æ–∑–≤—Ä–∞—Ç—ã</option>
              <option value="other">–ü—Ä–æ—á–µ–µ</option>
            </select>
          </div>

          {/* Entries List */}
          <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg overflow-hidden">
            <table className="w-full">
              <thead className="bg-surface-sidebar">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-text-secondary uppercase tracking-wider">
                    –î–∞—Ç–∞
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-text-secondary uppercase tracking-wider">
                    –¢–∏–ø
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-text-secondary uppercase tracking-wider">
                    –°—É–º–º–∞
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-text-secondary uppercase tracking-wider">
                    –û–ø–∏—Å–∞–Ω–∏–µ
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-border-primary">
                {entries.map((entry, index) => (
                  <tr key={index} className="hover:bg-surface-sidebar">
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-white">
                      {new Date(entry.created_at).toLocaleDateString('ru-RU')}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`text-sm font-medium ${getEntryTypeColor(entry.type)}`}>
                        {getEntryTypeName(entry.type)}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-bold text-green-400">
                      {formatCurrencyWithSymbol(entry.amount)}
                    </td>
                    <td className="px-6 py-4 text-sm text-text-secondary">
                      {entry.description || '‚Äî'}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="bg-surface-sidebar px-6 py-3 flex items-center justify-between">
                <button
                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                  disabled={currentPage === 1}
                  className="px-4 py-2 bg-surface-card border border-border-primary rounded-lg text-white disabled:opacity-50"
                >
                  –ü—Ä–µ–¥—ã–¥—É—â–∞—è
                </button>
                <span className="text-text-secondary">
                  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}
                </span>
                <button
                  onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                  disabled={currentPage === totalPages}
                  className="px-4 py-2 bg-surface-card border border-border-primary rounded-lg text-white disabled:opacity-50"
                >
                  –°–ª–µ–¥—É—é—â–∞—è
                </button>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Settings Tab */}
      {activeTab === 'settings' && commissionSettings && (
        <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg p-6">
          <h3 className="font-rajdhani text-xl font-bold text-white mb-4">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏</h3>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-text-secondary mb-2">
                –ö–æ–º–∏—Å—Å–∏—è —Å –∏–≥—Ä (%)
              </label>
              <div className="text-2xl font-bold text-green-400">
                {(commissionSettings.game_commission * 100).toFixed(1)}%
              </div>
            </div>
            <div className="text-sm text-text-secondary">
              –ö–æ–º–∏—Å—Å–∏—è –≤–∑–∏–º–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥–æ–π —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã.
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProfitAdmin;