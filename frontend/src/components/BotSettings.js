import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNotifications } from './NotificationContext';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const BotSettings = ({ user }) => {
  const [settings, setSettings] = useState({
    globalMaxActiveBets: 50,
    globalMaxHumanBots: 30,
    paginationSize: 10,
    autoActivateFromQueue: true,
    priorityType: 'order' // 'order' or 'manual'
  });
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [queueStats, setQueueStats] = useState({
    totalActiveRegularBets: 0,
    totalQueuedBets: 0,
    totalRegularBots: 0,
    totalHumanBots: 0
  });
  const { showSuccessRU, showErrorRU } = useNotifications();

  useEffect(() => {
    fetchBotSettings();
    fetchQueueStats();
  }, []);

  const fetchBotSettings = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${API}/admin/bot-settings`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.data.success) {
        setSettings(response.data.settings);
      }
      setLoading(false);
    } catch (error) {
      console.error('Error fetching bot settings:', error);
      showErrorRU('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–æ–≤');
      setLoading(false);
    }
  };

  const fetchQueueStats = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${API}/admin/bot-queue-stats`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.data.success) {
        setQueueStats(response.data.stats);
      }
    } catch (error) {
      console.error('Error fetching queue stats:', error);
    }
  };

  const handleSaveSettings = async () => {
    setSaving(true);
    try {
      const token = localStorage.getItem('token');
      const response = await axios.put(`${API}/admin/bot-settings`, settings, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.data.success) {
        showSuccessRU('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        fetchQueueStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      }
    } catch (error) {
      console.error('Error saving bot settings:', error);
      showErrorRU('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–æ–≤');
    } finally {
      setSaving(false);
    }
  };

  const handleSettingChange = (key, value) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }));
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-primary flex items-center justify-center">
        <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg p-8 text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-accent-primary mx-auto mb-4"></div>
          <p className="font-rajdhani text-text-secondary">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–æ–≤...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <div>
        <h2 className="font-russo text-2xl text-white mb-6">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–æ–≤</h2>
        
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ */}
        <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg p-6 mb-6">
          <h3 className="font-rajdhani text-xl font-bold text-white mb-4">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏</h3>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-surface-sidebar rounded-lg p-4">
              <div className="text-text-secondary text-sm">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤</div>
              <div className="text-2xl font-bold text-blue-400">{queueStats.totalActiveRegularBets}</div>
              <div className="text-xs text-blue-300 mt-1">–∏–∑ {settings.globalMaxActiveBets} –º–∞–∫—Å–∏–º—É–º</div>
            </div>
            <div className="bg-surface-sidebar rounded-lg p-4">
              <div className="text-text-secondary text-sm">–°—Ç–∞–≤–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏</div>
              <div className="text-2xl font-bold text-orange-400">{queueStats.totalQueuedBets}</div>
              <div className="text-xs text-orange-300 mt-1">–æ–∂–∏–¥–∞—é—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</div>
            </div>
            <div className="bg-surface-sidebar rounded-lg p-4">
              <div className="text-text-secondary text-sm">–û–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤</div>
              <div className="text-2xl font-bold text-green-400">{queueStats.totalRegularBots}</div>
              <div className="text-xs text-green-300 mt-1">–∞–∫—Ç–∏–≤–Ω—ã—Ö</div>
            </div>
            <div className="bg-surface-sidebar rounded-lg p-4">
              <div className="text-text-secondary text-sm">Human –±–æ—Ç–æ–≤</div>
              <div className="text-2xl font-bold text-purple-400">{queueStats.totalHumanBots}</div>
              <div className="text-xs text-purple-300 mt-1">–∞–∫—Ç–∏–≤–Ω—ã—Ö</div>
            </div>
          </div>
        </div>

        {/* –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg p-6 mb-6">
          <h3 className="font-rajdhani text-xl font-bold text-white mb-4">üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
          
          <div className="space-y-6">
            {/* –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-text-secondary mb-2">
                  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤
                </label>
                <input
                  type="number"
                  min="1"
                  max="200"
                  value={settings.globalMaxActiveBets}
                  onChange={(e) => handleSettingChange('globalMaxActiveBets', parseInt(e.target.value))}
                  className="w-full px-3 py-2 bg-surface-sidebar border border-border-primary rounded-lg text-white focus:outline-none focus:border-accent-primary"
                />
                <p className="text-xs text-text-secondary mt-1">
                  –û–±—â–∏–π –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –≤—Å–µ—Ö –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ –±–ª–æ–∫–µ "Available Bots"
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-text-secondary mb-2">
                  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ Human –±–æ—Ç–æ–≤
                </label>
                <input
                  type="number"
                  min="1"
                  max="100"
                  value={settings.globalMaxHumanBots}
                  onChange={(e) => handleSettingChange('globalMaxHumanBots', parseInt(e.target.value))}
                  className="w-full px-3 py-2 bg-surface-sidebar border border-border-primary rounded-lg text-white focus:outline-none focus:border-accent-primary"
                />
                <p className="text-xs text-text-secondary mt-1">
                  –û–±—â–∏–π –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –≤—Å–µ—Ö Human –±–æ—Ç–æ–≤
                </p>
              </div>
            </div>

            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-text-secondary mb-2">
                  –†–∞–∑–º–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ "Available Bots"
                </label>
                <select
                  value={settings.paginationSize}
                  onChange={(e) => handleSettingChange('paginationSize', parseInt(e.target.value))}
                  className="w-full px-3 py-2 bg-surface-sidebar border border-border-primary rounded-lg text-white focus:outline-none focus:border-accent-primary"
                >
                  <option value={5}>5 —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É</option>
                  <option value={10}>10 —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É</option>
                  <option value={15}>15 —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É</option>
                  <option value={20}>20 —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É</option>
                  <option value={25}>25 —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É</option>
                </select>
                <p className="text-xs text-text-secondary mt-1">
                  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-text-secondary mb-2">
                  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                </label>
                <div className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={settings.autoActivateFromQueue}
                    onChange={(e) => handleSettingChange('autoActivateFromQueue', e.target.checked)}
                    className="w-4 h-4 text-accent-primary bg-surface-sidebar border border-border-primary rounded focus:ring-accent-primary"
                  />
                  <span className="text-white">–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é</span>
                </div>
                <p className="text-xs text-text-secondary mt-1">
                  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ */}
        <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg p-6 mb-6">
          <h3 className="font-rajdhani text-xl font-bold text-white mb-4">‚ö° –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤</h3>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-text-secondary mb-2">
                –¢–∏–ø –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
              </label>
              <select
                value={settings.priorityType}
                onChange={(e) => handleSettingChange('priorityType', e.target.value)}
                className="w-full px-3 py-2 bg-surface-sidebar border border-border-primary rounded-lg text-white focus:outline-none focus:border-accent-primary"
              >
                <option value="order">–ü–æ –ø–æ—Ä—è–¥–∫—É –≤ —Å–ø–∏—Å–∫–µ –±–æ—Ç–æ–≤</option>
                <option value="manual">–†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º</option>
              </select>
              <p className="text-xs text-text-secondary mt-1">
                –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
              </p>
            </div>

            {settings.priorityType === 'order' && (
              <div className="bg-blue-900 bg-opacity-20 border border-blue-500 border-opacity-30 rounded-lg p-4">
                <div className="flex items-center space-x-2 mb-2">
                  <svg className="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <h4 className="font-rajdhani text-sm font-bold text-blue-400">–†–µ–∂–∏–º "–ü–æ –ø–æ—Ä—è–¥–∫—É"</h4>
                </div>
                <p className="text-xs text-text-secondary">
                  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ—Ä—è–¥–∫–æ–º –±–æ—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ. –ü–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ –∏–º–µ–µ—Ç –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
                </p>
              </div>
            )}

            {settings.priorityType === 'manual' && (
              <div className="bg-orange-900 bg-opacity-20 border border-orange-500 border-opacity-30 rounded-lg p-4">
                <div className="flex items-center space-x-2 mb-2">
                  <svg className="w-5 h-5 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                  <h4 className="font-rajdhani text-sm font-bold text-orange-400">–†–µ–∂–∏–º "–†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"</h4>
                </div>
                <p className="text-xs text-text-secondary">
                  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ "–í–≤–µ—Ä—Ö/–í–Ω–∏–∑" –≤ —Å–ø–∏—Å–∫–µ –±–æ—Ç–æ–≤.
                </p>
              </div>
            )}
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex justify-end space-x-4">
          <button
            onClick={fetchBotSettings}
            className="px-6 py-3 font-rajdhani font-bold text-text-secondary border border-border-primary rounded-lg hover:text-white hover:border-accent-primary transition-colors duration-200"
          >
            –°–±—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
          </button>
          
          <button
            onClick={handleSaveSettings}
            disabled={saving}
            className={`px-6 py-3 font-rajdhani font-bold rounded-lg transition-all duration-200 ${
              saving 
                ? 'bg-gray-600 text-gray-400 cursor-not-allowed' 
                : 'bg-accent-primary hover:bg-blue-600 text-white'
            }`}
          >
            {saving ? (
              <div className="flex items-center space-x-2">
                <svg className="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                <span>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...</span>
              </div>
            ) : (
              '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
            )}
          </button>
        </div>
      </div>
    </div>
  );
};

export default BotSettings;