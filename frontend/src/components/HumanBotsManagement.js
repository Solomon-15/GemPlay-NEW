import React, { useState, useEffect } from 'react';
import { useBotsManagement } from '../hooks/useBotsManagement';
import { useConfirmation } from '../hooks/useConfirmation';
import { useInput } from '../hooks/useInput';
import InputModal from './InputModal';
import ConfirmationModal from './ConfirmationModal';

const HumanBotsManagement = () => {
  const { loading, error, executeOperation } = useBotsManagement();
  const { confirmationState, showConfirmation, handleConfirmation } = useConfirmation();
  const { inputModalState, showInputModal, handleInputModal } = useInput();
  const [humanBots, setHumanBots] = useState([]);
  const [stats, setStats] = useState({});
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [filters, setFilters] = useState({
    character: '',
    is_active: null
  });

  const characters = [
    { value: 'STABLE', label: '–°—Ç–∞–±–∏–ª—å–Ω—ã–π', description: '–†–æ–≤–Ω—ã–µ –Ω–µ–±–æ–ª—å—à–∏–µ —Å—Ç–∞–≤–∫–∏' },
    { value: 'AGGRESSIVE', label: '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π', description: '–ö—Ä—É–ø–Ω—ã–µ —Å—Ç–∞–≤–∫–∏, –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫' },
    { value: 'CAUTIOUS', label: '–û—Å—Ç–æ—Ä–æ–∂–Ω—ã–π', description: '–ú–µ–ª–∫–∏–µ —Å—Ç–∞–≤–∫–∏, –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å' },
    { value: 'BALANCED', label: '–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π', description: '–°—Ä–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è' },
    { value: 'IMPULSIVE', label: '–ò–º–ø—É–ª—å—Å–∏–≤–Ω—ã–π', description: '–°–ª—É—á–∞–π–Ω—ã–µ –≤—Å–ø–ª–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏' },
    { value: 'ANALYST', label: '–ê–Ω–∞–ª–∏—Ç–∏–∫', description: '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è' },
    { value: 'MIMIC', label: '–ú–∏–º–∏–∫', description: '–ö–æ–ø–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤' }
  ];

  const [createFormData, setCreateFormData] = useState({
    name: '',
    character: 'BALANCED',
    min_bet: 1,
    max_bet: 100,
    win_percentage: 40,
    loss_percentage: 40,
    draw_percentage: 20,
    min_delay: 30,
    max_delay: 120,
    use_commit_reveal: true,
    logging_level: 'INFO'
  });

  const [bulkCreateData, setBulkCreateData] = useState({
    count: 10,
    character: 'BALANCED',
    min_bet_range: [1, 50],
    max_bet_range: [50, 200],
    win_percentage: 40,
    loss_percentage: 40,
    draw_percentage: 20,
    delay_range: [30, 120],
    use_commit_reveal: true,
    logging_level: 'INFO'
  });

  const [showCreateForm, setShowCreateForm] = useState(false);
  const [showBulkCreateForm, setShowBulkCreateForm] = useState(false);
  const [editingBot, setEditingBot] = useState(null);

  useEffect(() => {
    fetchHumanBots();
    fetchStats();
  }, [currentPage, filters]);

  const fetchHumanBots = async () => {
    try {
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: '10'
      });
      
      if (filters.character) params.append('character', filters.character);
      if (filters.is_active !== null) params.append('is_active', filters.is_active.toString());

      const response = await executeOperation('/admin/human-bots?' + params.toString(), 'GET');
      if (response.success !== false) {
        setHumanBots(response.bots || []);
        setTotalPages(response.total_pages || 1);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Human-–±–æ—Ç–æ–≤:', error);
    }
  };

  const fetchStats = async () => {
    try {
      const response = await executeOperation('/admin/human-bots/stats', 'GET');
      if (response.success !== false) {
        setStats(response);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  };

  const handleCreateBot = async () => {
    if (createFormData.win_percentage + createFormData.loss_percentage + createFormData.draw_percentage !== 100) {
      alert('–°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è 100%');
      return;
    }

    try {
      const response = await executeOperation('/admin/human-bots', 'POST', createFormData);
      if (response.success !== false) {
        setShowCreateForm(false);
        setCreateFormData({
          name: '',
          character: 'BALANCED',
          min_bet: 1,
          max_bet: 100,
          win_percentage: 40,
          loss_percentage: 40,
          draw_percentage: 20,
          min_delay: 30,
          max_delay: 120,
          use_commit_reveal: true,
          logging_level: 'INFO'
        });
        fetchHumanBots();
        fetchStats();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Human-–±–æ—Ç–∞:', error);
    }
  };

  const handleBulkCreate = async () => {
    if (bulkCreateData.win_percentage + bulkCreateData.loss_percentage + bulkCreateData.draw_percentage !== 100) {
      alert('–°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è 100%');
      return;
    }

    try {
      const response = await executeOperation('/admin/human-bots/bulk-create', 'POST', bulkCreateData);
      if (response.success !== false) {
        setShowBulkCreateForm(false);
        fetchHumanBots();
        fetchStats();
        alert(`–°–æ–∑–¥–∞–Ω–æ ${response.created_count} –±–æ—Ç–æ–≤${response.failed_count > 0 ? `, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å: ${response.failed_count}` : ''}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è Human-–±–æ—Ç–æ–≤:', error);
    }
  };

  const handleToggleStatus = async (botId) => {
    try {
      const response = await executeOperation(`/admin/human-bots/${botId}/toggle-status`, 'POST');
      if (response.success !== false) {
        fetchHumanBots();
        fetchStats();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
  };

  const handleDeleteBot = async (botId, botName) => {
    showConfirmation(
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å Human-–±–æ—Ç–∞ "${botName}"?`,
      async () => {
        try {
          const response = await executeOperation(`/admin/human-bots/${botId}`, 'DELETE');
          if (response.success !== false) {
            fetchHumanBots();
            fetchStats();
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Human-–±–æ—Ç–∞:', error);
        }
      }
    );
  };

  const handleToggleAll = async (activate) => {
    showConfirmation(
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${activate ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'} –≤—Å–µ—Ö Human-–±–æ—Ç–æ–≤?`,
      async () => {
        try {
          const response = await executeOperation('/admin/human-bots/toggle-all', 'POST', { activate });
          if (response.success !== false) {
            fetchHumanBots();
            fetchStats();
            alert(`${activate ? '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ' : '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ'} ${response.affected_count} –±–æ—Ç–æ–≤`);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        }
      }
    );
  };

  const getCharacterLabel = (character) => {
    const found = characters.find(c => c.value === character);
    return found ? found.label : character;
  };

  const getStatusColor = (isActive) => {
    return isActive ? 'green' : 'red';
  };

  const formatCurrency = (amount) => {
    return `$${amount.toFixed(2)}`;
  };

  const formatPercentage = (value) => {
    return `${value.toFixed(1)}%`;
  };

  return (
    <div className="human-bots-management">
      <div className="bots-header">
        <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Human-–±–æ—Ç–∞–º–∏</h2>
        <div className="header-actions">
          <button
            className="btn-primary"
            onClick={() => setShowCreateForm(true)}
          >
            + –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞
          </button>
          <button
            className="btn-secondary"
            onClick={() => setShowBulkCreateForm(true)}
          >
            üì¶ –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
          </button>
          <button
            className="btn-success"
            onClick={() => handleToggleAll(true)}
          >
            ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö
          </button>
          <button
            className="btn-warning"
            onClick={() => handleToggleAll(false)}
          >
            ‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö
          </button>
        </div>
      </div>

      {/* Statistics */}
      <div className="stats-grid">
        <div className="stat-card">
          <h3>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</h3>
          <div className="stat-value">{stats.total_bots || 0}</div>
        </div>
        <div className="stat-card">
          <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ</h3>
          <div className="stat-value">{stats.active_bots || 0}</div>
        </div>
        <div className="stat-card">
          <h3>–ò–≥—Ä –∑–∞ 24—á</h3>
          <div className="stat-value">{stats.total_games_24h || 0}</div>
        </div>
        <div className="stat-card">
          <h3>–î–æ—Ö–æ–¥ –∑–∞ 24—á</h3>
          <div className="stat-value">{formatCurrency(stats.total_revenue_24h || 0)}</div>
        </div>
      </div>

      {/* Filters */}
      <div className="filters-section">
        <div className="filter-group">
          <label>–•–∞—Ä–∞–∫—Ç–µ—Ä:</label>
          <select 
            value={filters.character} 
            onChange={(e) => setFilters({...filters, character: e.target.value})}
          >
            <option value="">–í—Å–µ</option>
            {characters.map(char => (
              <option key={char.value} value={char.value}>
                {char.label}
              </option>
            ))}
          </select>
        </div>
        <div className="filter-group">
          <label>–°—Ç–∞—Ç—É—Å:</label>
          <select 
            value={filters.is_active || ''} 
            onChange={(e) => setFilters({...filters, is_active: e.target.value === '' ? null : e.target.value === 'true'})}
          >
            <option value="">–í—Å–µ</option>
            <option value="true">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
            <option value="false">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
          </select>
        </div>
      </div>

      {/* Human Bots Table */}
      {loading && <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>}
      {error && <div className="error">–û—à–∏–±–∫–∞: {error}</div>}

      <div className="table-container">
        <table className="bots-table">
          <thead>
            <tr>
              <th>–ò–º—è</th>
              <th>–•–∞—Ä–∞–∫—Ç–µ—Ä</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
              <th>–î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–≤–æ–∫</th>
              <th>–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥</th>
              <th>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {humanBots.length > 0 ? humanBots.map(bot => (
              <tr key={bot.id}>
                <td>{bot.name}</td>
                <td>
                  <span className={`character-badge character-${bot.character.toLowerCase()}`}>
                    {getCharacterLabel(bot.character)}
                  </span>
                </td>
                <td>
                  <span 
                    className={`status-indicator status-${getStatusColor(bot.is_active)}`}
                  >
                    {bot.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                  </span>
                </td>
                <td>{formatCurrency(bot.min_bet)} - {formatCurrency(bot.max_bet)}</td>
                <td>{formatPercentage(bot.win_rate)}</td>
                <td>
                  <div className="stats-cell">
                    <div>–ò–≥—Ä: {bot.total_games_played}</div>
                    <div>–í—ã–∏–≥—Ä–∞–ª: {bot.total_games_won}</div>
                    <div>–ó–∞—Ä–∞–±–æ—Ç–∞–ª: {formatCurrency(bot.total_amount_won)}</div>
                  </div>
                </td>
                <td>
                  <div className="action-buttons">
                    <button
                      className={`btn-sm ${bot.is_active ? 'btn-warning' : 'btn-success'}`}
                      onClick={() => handleToggleStatus(bot.id)}
                    >
                      {bot.is_active ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}
                    </button>
                    <button
                      className="btn-sm btn-danger"
                      onClick={() => handleDeleteBot(bot.id, bot.name)}
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </td>
              </tr>
            )) : (
              <tr>
                <td colSpan="7" className="no-data">–ù–µ—Ç Human-–±–æ—Ç–æ–≤</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="pagination">
          <button 
            disabled={currentPage === 1} 
            onClick={() => setCurrentPage(currentPage - 1)}
          >
            –ü—Ä–µ–¥—ã–¥—É—â–∞—è
          </button>
          <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}</span>
          <button 
            disabled={currentPage === totalPages} 
            onClick={() => setCurrentPage(currentPage + 1)}
          >
            –°–ª–µ–¥—É—é—â–∞—è
          </button>
        </div>
      )}

      {/* Create Bot Form */}
      {showCreateForm && (
        <div className="modal-overlay">
          <div className="modal-content large-modal">
            <h3>–°–æ–∑–¥–∞—Ç—å Human-–±–æ—Ç–∞</h3>
            <form onSubmit={(e) => { e.preventDefault(); handleCreateBot(); }}>
              <div className="form-row">
                <div className="form-group">
                  <label>–ò–º—è –±–æ—Ç–∞ *</label>
                  <input
                    type="text"
                    value={createFormData.name}
                    onChange={(e) => setCreateFormData({...createFormData, name: e.target.value})}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–•–∞—Ä–∞–∫—Ç–µ—Ä *</label>
                  <select
                    value={createFormData.character}
                    onChange={(e) => setCreateFormData({...createFormData, character: e.target.value})}
                  >
                    {characters.map(char => (
                      <option key={char.value} value={char.value} title={char.description}>
                        {char.label}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>–ú–∏–Ω. —Å—Ç–∞–≤–∫–∞ ($)</label>
                  <input
                    type="number"
                    step="0.01"
                    min="1"
                    value={createFormData.min_bet}
                    onChange={(e) => setCreateFormData({...createFormData, min_bet: parseFloat(e.target.value)})}
                  />
                </div>
                <div className="form-group">
                  <label>–ú–∞–∫—Å. —Å—Ç–∞–≤–∫–∞ ($)</label>
                  <input
                    type="number"
                    step="0.01"
                    min="1"
                    value={createFormData.max_bet}
                    onChange={(e) => setCreateFormData({...createFormData, max_bet: parseFloat(e.target.value)})}
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>% –ü–æ–±–µ–¥</label>
                  <input
                    type="number"
                    min="0"
                    max="100"
                    value={createFormData.win_percentage}
                    onChange={(e) => setCreateFormData({...createFormData, win_percentage: parseFloat(e.target.value)})}
                  />
                </div>
                <div className="form-group">
                  <label>% –ü–æ—Ä–∞–∂–µ–Ω–∏–π</label>
                  <input
                    type="number"
                    min="0"
                    max="100"
                    value={createFormData.loss_percentage}
                    onChange={(e) => setCreateFormData({...createFormData, loss_percentage: parseFloat(e.target.value)})}
                  />
                </div>
                <div className="form-group">
                  <label>% –ù–∏—á—å–∏—Ö</label>
                  <input
                    type="number"
                    min="0"
                    max="100"
                    value={createFormData.draw_percentage}
                    onChange={(e) => setCreateFormData({...createFormData, draw_percentage: parseFloat(e.target.value)})}
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>–ú–∏–Ω. –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)</label>
                  <input
                    type="number"
                    min="1"
                    max="300"
                    value={createFormData.min_delay}
                    onChange={(e) => setCreateFormData({...createFormData, min_delay: parseInt(e.target.value)})}
                  />
                </div>
                <div className="form-group">
                  <label>–ú–∞–∫—Å. –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)</label>
                  <input
                    type="number"
                    min="1"
                    max="300"
                    value={createFormData.max_delay}
                    onChange={(e) => setCreateFormData({...createFormData, max_delay: parseInt(e.target.value)})}
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>
                    <input
                      type="checkbox"
                      checked={createFormData.use_commit_reveal}
                      onChange={(e) => setCreateFormData({...createFormData, use_commit_reveal: e.target.checked})}
                    />
                    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Commit-Reveal
                  </label>
                </div>
                <div className="form-group">
                  <label>–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</label>
                  <select
                    value={createFormData.logging_level}
                    onChange={(e) => setCreateFormData({...createFormData, logging_level: e.target.value})}
                  >
                    <option value="INFO">INFO</option>
                    <option value="DEBUG">DEBUG</option>
                  </select>
                </div>
              </div>

              <div className="modal-actions">
                <button type="submit" className="btn-primary">–°–æ–∑–¥–∞—Ç—å</button>
                <button 
                  type="button" 
                  className="btn-secondary"
                  onClick={() => setShowCreateForm(false)}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Bulk Create Form */}
      {showBulkCreateForm && (
        <div className="modal-overlay">
          <div className="modal-content large-modal">
            <h3>–ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Human-–±–æ—Ç–æ–≤</h3>
            <form onSubmit={(e) => { e.preventDefault(); handleBulkCreate(); }}>
              <div className="form-row">
                <div className="form-group">
                  <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤</label>
                  <input
                    type="number"
                    min="1"
                    max="50"
                    value={bulkCreateData.count}
                    onChange={(e) => setBulkCreateData({...bulkCreateData, count: parseInt(e.target.value)})}
                  />
                </div>
                <div className="form-group">
                  <label>–•–∞—Ä–∞–∫—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö</label>
                  <select
                    value={bulkCreateData.character}
                    onChange={(e) => setBulkCreateData({...bulkCreateData, character: e.target.value})}
                  >
                    {characters.map(char => (
                      <option key={char.value} value={char.value} title={char.description}>
                        {char.label}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>–î–∏–∞–ø–∞–∑–æ–Ω –º–∏–Ω. —Å—Ç–∞–≤–æ–∫ ($)</label>
                  <input
                    type="number"
                    step="0.01"
                    placeholder="–û—Ç"
                    value={bulkCreateData.min_bet_range[0]}
                    onChange={(e) => setBulkCreateData({
                      ...bulkCreateData, 
                      min_bet_range: [parseFloat(e.target.value), bulkCreateData.min_bet_range[1]]
                    })}
                  />
                  <input
                    type="number"
                    step="0.01"
                    placeholder="–î–æ"
                    value={bulkCreateData.min_bet_range[1]}
                    onChange={(e) => setBulkCreateData({
                      ...bulkCreateData, 
                      min_bet_range: [bulkCreateData.min_bet_range[0], parseFloat(e.target.value)]
                    })}
                  />
                </div>
                <div className="form-group">
                  <label>–î–∏–∞–ø–∞–∑–æ–Ω –º–∞–∫—Å. —Å—Ç–∞–≤–æ–∫ ($)</label>
                  <input
                    type="number"
                    step="0.01"
                    placeholder="–û—Ç"
                    value={bulkCreateData.max_bet_range[0]}
                    onChange={(e) => setBulkCreateData({
                      ...bulkCreateData, 
                      max_bet_range: [parseFloat(e.target.value), bulkCreateData.max_bet_range[1]]
                    })}
                  />
                  <input
                    type="number"
                    step="0.01"
                    placeholder="–î–æ"
                    value={bulkCreateData.max_bet_range[1]}
                    onChange={(e) => setBulkCreateData({
                      ...bulkCreateData, 
                      max_bet_range: [bulkCreateData.max_bet_range[0], parseFloat(e.target.value)]
                    })}
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>% –ü–æ–±–µ–¥</label>
                  <input
                    type="number"
                    min="0"
                    max="100"
                    value={bulkCreateData.win_percentage}
                    onChange={(e) => setBulkCreateData({...bulkCreateData, win_percentage: parseFloat(e.target.value)})}
                  />
                </div>
                <div className="form-group">
                  <label>% –ü–æ—Ä–∞–∂–µ–Ω–∏–π</label>
                  <input
                    type="number"
                    min="0"
                    max="100"
                    value={bulkCreateData.loss_percentage}
                    onChange={(e) => setBulkCreateData({...bulkCreateData, loss_percentage: parseFloat(e.target.value)})}
                  />
                </div>
                <div className="form-group">
                  <label>% –ù–∏—á—å–∏—Ö</label>
                  <input
                    type="number"
                    min="0"
                    max="100"
                    value={bulkCreateData.draw_percentage}
                    onChange={(e) => setBulkCreateData({...bulkCreateData, draw_percentage: parseFloat(e.target.value)})}
                  />
                </div>
              </div>

              <div className="modal-actions">
                <button type="submit" className="btn-primary">–°–æ–∑–¥–∞—Ç—å {bulkCreateData.count} –±–æ—Ç–æ–≤</button>
                <button 
                  type="button" 
                  className="btn-secondary"
                  onClick={() => setShowBulkCreateForm(false)}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Modals */}
      <ConfirmationModal {...confirmationState} onClose={handleConfirmation} />
      <InputModal {...inputModalState} onClose={handleInputModal} />
    </div>
  );
};

export default HumanBotsManagement;tate, useEffect } from 'react';
import { useApi } from '../hooks/useApi';
import { useBotsManagement } from '../hooks/useBotsManagement';

const HumanBotsManagement = () => {
  const { botsApi } = useApi();
  const { bulkOperations } = useBotsManagement();
  const [stats, setStats] = useState({
    active_bots: 0,
    bets_24h: 0,
    wins_24h: 0,
    win_percentage: 0,
    total_bet_value: 0,
    errors: 0,
    most_active: []
  });
  const [allBotsEnabled, setAllBotsEnabled] = useState(true);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchStats();
  }, []);

  const fetchStats = async () => {
    try {
      const response = await botsApi.getStats();
      setStats(response || {});
      setLoading(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Human –±–æ—Ç–æ–≤:', error);
      setLoading(false);
    }
  };

  const toggleAllBots = async () => {
    try {
      const newState = !allBotsEnabled;
      
      await bulkOperations.toggleAllBots(newState);
      
      setAllBotsEnabled(newState);
      await fetchStats(); // Refresh stats
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–æ–≤:', error);
    }
  };

  return (
    <div className="space-y-6">
      {/* –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –±–æ—Ç–∞–º–∏ */}
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-rajdhani font-bold text-white">Human –ë–æ—Ç—ã</h2>
        <button
          onClick={toggleAllBots}
          className={`px-6 py-3 rounded-lg font-rajdhani font-bold text-white transition-colors ${
            allBotsEnabled 
              ? 'bg-red-600 hover:bg-red-700' 
              : 'bg-green-600 hover:bg-green-700'
          }`}
        >
          {allBotsEnabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤' : '–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤'}
        </button>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-7 gap-4">
        <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg p-4">
          <div className="flex items-center">
            <div className="p-2 bg-green-600 rounded-lg">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-text-secondary text-sm font-rajdhani">–ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤</p>
              <p className="text-white text-lg font-rajdhani font-bold">{stats.active_bots}</p>
            </div>
          </div>
        </div>

        <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg p-4">
          <div className="flex items-center">
            <div className="p-2 bg-blue-600 rounded-lg">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-text-secondary text-sm font-rajdhani">–°—Ç–∞–≤–æ–∫ –∑–∞ 24—á</p>
              <p className="text-white text-lg font-rajdhani font-bold">{stats.bets_24h}</p>
            </div>
          </div>
        </div>

        <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg p-4">
          <div className="flex items-center">
            <div className="p-2 bg-yellow-600 rounded-lg">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-text-secondary text-sm font-rajdhani">–ü–æ–±–µ–¥ –∑–∞ 24—á</p>
              <p className="text-white text-lg font-rajdhani font-bold">{stats.wins_24h}</p>
            </div>
          </div>
        </div>

        <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg p-4">
          <div className="flex items-center">
            <div className="p-2 bg-purple-600 rounded-lg">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-text-secondary text-sm font-rajdhani">% –ø–æ–±–µ–¥</p>
              <p className="text-white text-lg font-rajdhani font-bold">{stats.win_percentage}%</p>
            </div>
          </div>
        </div>

        <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg p-4">
          <div className="flex items-center">
            <div className="p-2 bg-orange-600 rounded-lg">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-text-secondary text-sm font-rajdhani">–°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫</p>
              <p className="text-white text-lg font-rajdhani font-bold">${stats.total_bet_value.toFixed(2)}</p>
            </div>
          </div>
        </div>

        <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg p-4">
          <div className="flex items-center">
            <div className={`p-2 rounded-lg ${stats.errors > 0 ? 'bg-red-600' : 'bg-gray-600'}`}>
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-text-secondary text-sm font-rajdhani">–û—à–∏–±–∫–∏/–°–±–æ–∏</p>
              <p className={`text-lg font-rajdhani font-bold ${stats.errors > 0 ? 'text-red-400' : 'text-white'}`}>
                {stats.errors}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg p-4">
          <div className="flex items-center">
            <div className="p-2 bg-indigo-600 rounded-lg">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-text-secondary text-sm font-rajdhani">–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö</p>
              <div className="text-white text-sm">
                {stats.most_active.length > 0 ? (
                  stats.most_active.slice(0, 3).map((bot, index) => (
                    <div key={bot.id} className="text-xs">
                      {bot.name || `Bot-${bot.id.substring(0, 6)}`}: {bot.games}
                    </div>
                  ))
                ) : (
                  <div className="text-xs text-text-secondary">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ –±–æ—Ç–æ–≤ */}
      <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg overflow-hidden">
        <div className="p-4 border-b border-border-primary">
          <h3 className="text-lg font-rajdhani font-bold text-white">–°–ø–∏—Å–æ–∫ Human –±–æ—Ç–æ–≤</h3>
          <p className="text-text-secondary text-sm">–ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—É—Å—Ç—ã–º, –¥–æ–±–∞–≤–ª—é –ø–æ–∑–∂–µ</p>
        </div>
        <div className="p-8 text-center">
          <div className="text-text-secondary">
            <svg className="w-12 h-12 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            <p className="font-rajdhani">–¢–∞–±–ª–∏—Ü–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ</p>
            <p className="text-sm">–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HumanBotsManagement;