import React, { useState, useEffect } from 'react';
import { soundSystem, playSound } from '../utils/soundSystem';

const SoundSettings = ({ isOpen, onClose }) => {
  const [volumeLevel, setVolumeLevel] = useState(soundSystem.getVolumeLevel());
  const [enabled, setEnabled] = useState(soundSystem.getEnabled());

  useEffect(() => {
    setVolumeLevel(soundSystem.getVolumeLevel());
    setEnabled(soundSystem.getEnabled());
  }, [isOpen]);

  const handleVolumeChange = (level) => {
    soundSystem.setVolumeLevel(level);
    setVolumeLevel(level);
    setEnabled(level !== 'off');
    
    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫
    if (level !== 'off') {
      setTimeout(() => playSound.settings(), 100);
    }
  };

  const testSound = (soundName) => {
    if (enabled) {
      playSound[soundName]();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-surface-card border border-accent-primary border-opacity-30 rounded-lg p-6 w-full max-w-md mx-4">
        <div className="flex items-center justify-between mb-6">
          <h3 className="font-russo text-xl text-white">üîä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞</h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-white transition-colors"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <div className="space-y-6">
          {/* –£—Ä–æ–≤–Ω–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ */}
          <div>
            <h4 className="text-white font-semibold mb-3">–ì—Ä–æ–º–∫–æ—Å—Ç—å –∑–≤—É–∫–∞</h4>
            <div className="space-y-2">
              {[
                { value: 'off', label: 'üîá –û—Ç–∫–ª—é—á–µ–Ω–æ', description: '–ë–µ–∑ –∑–≤—É–∫–∞' },
                { value: 'quiet', label: 'üîà –¢–∏—Ö–æ', description: '–î–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏' },
                { value: 'normal', label: 'üîâ –û–±—ã—á–Ω–æ', description: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å' },
                { value: 'loud', label: 'üîä –ì—Ä–æ–º–∫–æ', description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ' }
              ].map((level) => (
                <label key={level.value} className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    name="volumeLevel"
                    value={level.value}
                    checked={volumeLevel === level.value}
                    onChange={() => handleVolumeChange(level.value)}
                    className="w-4 h-4 text-accent-primary"
                  />
                  <div className="flex-1">
                    <div className="text-white font-medium">{level.label}</div>
                    <div className="text-text-secondary text-sm">{level.description}</div>
                  </div>
                </label>
              ))}
            </div>
          </div>

          {/* –¢–µ—Å—Ç –∑–≤—É–∫–æ–≤ */}
          {enabled && (
            <div>
              <h4 className="text-white font-semibold mb-3">–¢–µ—Å—Ç –∑–≤—É–∫–æ–≤</h4>
              <div className="grid grid-cols-2 gap-2">
                <button
                  onClick={() => testSound('createBet')}
                  className="px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors text-sm"
                >
                  üíé –°—Ç–∞–≤–∫–∞
                </button>
                <button
                  onClick={() => testSound('victory')}
                  className="px-3 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors text-sm"
                >
                  üéâ –ü–æ–±–µ–¥–∞
                </button>
                <button
                  onClick={() => testSound('buyGem')}
                  className="px-3 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition-colors text-sm"
                >
                  üí∞ –ü–æ–∫—É–ø–∫–∞
                </button>
                <button
                  onClick={() => testSound('notification')}
                  className="px-3 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition-colors text-sm"
                >
                  üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                </button>
              </div>
            </div>
          )}

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="bg-surface-sidebar rounded-lg p-4">
            <div className="text-text-secondary text-sm">
              <p className="mb-2">
                <strong>üí° –°–æ–≤–µ—Ç:</strong> –ó–≤—É–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –ª—É—á—à–µ –æ—â—É—â–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.
              </p>
              <p>
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ –≤—Å–µ–º –∏–≥—Ä–∞–º.
              </p>
            </div>
          </div>
        </div>

        <div className="flex justify-end mt-6">
          <button
            onClick={onClose}
            className="px-6 py-2 bg-accent-primary text-white rounded-lg hover:bg-accent-primary/80 transition-colors font-medium"
          >
            –ì–æ—Ç–æ–≤–æ
          </button>
        </div>
      </div>
    </div>
  );
};

export default SoundSettings;