#!/usr/bin/env python3
"""
Mock —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ MongoDB
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import json
from datetime import datetime
from typing import Dict, List, Any
import uvicorn

app = FastAPI(title="GemPlay Mock API", version="1.0.0")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mock data storage
mock_data = {
    "bots": [],
    "completed_cycles": [],
    "bot_profit_accumulators": [],
    "users": [
        {
            "id": "admin_1",
            "username": "admin",
            "email": "admin@test.com",
            "role": "ADMIN",
            "is_active": True
        }
    ]
}

# Mock bot data with correct calculations
def create_mock_completed_cycle(bot_id: str, cycle_number: int = 1):
    """–°–æ–∑–¥–∞—ë—Ç mock –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —Ü–∏–∫–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏"""
    return {
        "id": f"cycle_{bot_id}_{cycle_number}",
        "bot_id": bot_id,
        "cycle_number": cycle_number,
        "start_time": datetime.utcnow().isoformat(),
        "end_time": datetime.utcnow().isoformat(),
        "duration_seconds": 3600,  # 1 —á–∞—Å
        "total_bets": 16,
        "wins_count": 7,
        "losses_count": 6,
        "draws_count": 3,
        "total_bet_amount": 800,  # ‚úÖ –ë–∞–∑–∞ 800
        "total_winnings": 317,    # ‚úÖ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π
        "total_losses": 259,      # ‚úÖ –°—É–º–º–∞ –ø–æ—Ç–µ—Ä—å
        "total_draws": 224,       # ‚úÖ –°—É–º–º–∞ –Ω–∏—á—å–∏—Ö
        "net_profit": 58,         # ‚úÖ –ü—Ä–∏–±—ã–ª—å (317-259)
        "is_profitable": True,
        "active_pool": 576,       # ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª (317+259)
        "roi_active": 10.07,      # ‚úÖ ROI (58/576*100)
        "created_by_system_version": "v5.0_corrected",
        "created_at": datetime.utcnow().isoformat()
    }

def create_mock_bot(bot_id: str, name: str):
    """–°–æ–∑–¥–∞—ë—Ç mock –±–æ—Ç–∞"""
    return {
        "id": bot_id,
        "name": name,
        "bot_type": "REGULAR",
        "is_active": True,
        "cycle_games": 16,
        "min_bet_amount": 1.0,
        "max_bet_amount": 100.0,
        "wins_percentage": 44.0,
        "losses_percentage": 36.0,
        "draws_percentage": 20.0,
        "wins_count": 7,
        "losses_count": 6,
        "draws_count": 3,
        "completed_cycles": 1,
        "created_at": datetime.utcnow().isoformat()
    }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
mock_data["bots"].append(create_mock_bot("test_bot_001", "TestBot ROI"))
mock_data["completed_cycles"].append(create_mock_completed_cycle("test_bot_001"))

@app.get("/")
async def root():
    return {"message": "GemPlay Mock API", "status": "running"}

@app.get("/health")
async def health():
    return {"status": "healthy", "database": "mock"}

@app.get("/admin/bots/regular/list")
async def get_regular_bots():
    """–°–ø–∏—Å–æ–∫ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤"""
    return {
        "success": True,
        "bots": mock_data["bots"],
        "total_count": len(mock_data["bots"])
    }

@app.get("/admin/bots/{bot_id}/completed-cycles")
async def get_bot_completed_cycles(bot_id: str):
    """–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã –±–æ—Ç–∞"""
    cycles = [cycle for cycle in mock_data["completed_cycles"] if cycle["bot_id"] == bot_id]
    bot = next((bot for bot in mock_data["bots"] if bot["id"] == bot_id), None)
    
    if not bot:
        raise HTTPException(status_code=404, detail="Bot not found")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    formatted_cycles = []
    for cycle in cycles:
        formatted_cycles.append({
            "id": cycle["id"],
            "cycle_number": cycle["cycle_number"],
            "completed_at": cycle["end_time"],
            "duration": "1—á 0–º",
            "total_games": cycle["total_bets"],
            "games_played": cycle["total_bets"],
            "wins": cycle["wins_count"],
            "losses": cycle["losses_count"],
            "draws": cycle["draws_count"],
            "total_bet": cycle["total_bet_amount"],
            "total_winnings": cycle["total_winnings"],
            "total_losses": cycle["total_losses"],
            "profit": cycle["net_profit"],
            "roi_percent": cycle["roi_active"]
        })
    
    return {
        "bot_id": bot_id,
        "bot_name": bot["name"],
        "total_completed_cycles": len(formatted_cycles),
        "cycles": formatted_cycles
    }

@app.get("/admin/profit/bot-cycles-history")
async def get_bot_cycles_history():
    """–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤"""
    formatted_cycles = []
    
    for cycle in mock_data["completed_cycles"]:
        bot = next((bot for bot in mock_data["bots"] if bot["id"] == cycle["bot_id"]), None)
        bot_name = bot["name"] if bot else "Unknown Bot"
        
        formatted_cycles.append({
            "id": cycle["id"],
            "bot_id": cycle["bot_id"],
            "bot_name": bot_name,
            "cycle_number": cycle["cycle_number"],
            "start_time": cycle["start_time"],
            "end_time": cycle["end_time"],
            "duration_hours": 1.0,
            "total_games": cycle["total_bets"],
            "wins": cycle["wins_count"],
            "losses": cycle["losses_count"],
            "draws": cycle["draws_count"],
            "total_bet_amount": cycle["total_bet_amount"],
            "net_profit": cycle["net_profit"],
            "roi_percent": cycle["roi_active"],
            "is_profitable": cycle["is_profitable"]
        })
    
    return {
        "success": True,
        "cycles": formatted_cycles,
        "pagination": {
            "current_page": 1,
            "total_pages": 1,
            "total_count": len(formatted_cycles),
            "limit": 20
        },
        "summary": {
            "total_profit": sum(c["net_profit"] for c in formatted_cycles),
            "total_games": sum(c["total_games"] for c in formatted_cycles),
            "profitable_cycles": len([c for c in formatted_cycles if c["is_profitable"]]),
            "profitability_rate": 100.0,
            "avg_roi": 10.05
        }
    }

@app.get("/admin/profit/bot-revenue-summary")
async def get_bot_revenue_summary():
    """–°–≤–æ–¥–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç –±–æ—Ç–æ–≤"""
    cycles = mock_data["completed_cycles"]
    
    total_revenue = sum(cycle["net_profit"] for cycle in cycles)
    total_cycles = len(cycles)
    profitable_cycles = len([c for c in cycles if c["is_profitable"]])
    total_games = sum(cycle["total_bets"] for cycle in cycles)
    total_bet_amount = sum(cycle["total_bet_amount"] for cycle in cycles)
    
    return {
        "success": True,
        "period": "all",
        "revenue": {
            "total": total_revenue,
            "avg_per_cycle": total_revenue / total_cycles if total_cycles > 0 else 0
        },
        "cycles": {
            "total": total_cycles,
            "profitable": profitable_cycles,
            "profitability_rate": (profitable_cycles / total_cycles * 100) if total_cycles > 0 else 0,
            "avg_games": total_games / total_cycles if total_cycles > 0 else 0
        },
        "bots": {
            "active": len([b for b in mock_data["bots"] if b["is_active"]]),
            "total": len(mock_data["bots"])
        },
        "performance": {
            "total_games": total_games,
            "total_bet_volume": total_bet_amount,
            "avg_roi": 10.05
        }
    }

@app.post("/admin/bots/create")
async def create_bot(bot_data: Dict[str, Any]):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ (mock)"""
    bot_id = f"bot_{len(mock_data['bots']) + 1:03d}"
    new_bot = create_mock_bot(bot_id, bot_data.get("name", f"Bot {bot_id}"))
    mock_data["bots"].append(new_bot)
    
    # –°–æ–∑–¥–∞—ë–º mock –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    mock_cycle = create_mock_completed_cycle(bot_id)
    mock_data["completed_cycles"].append(mock_cycle)
    
    return {
        "success": True,
        "bot": new_bot,
        "message": f"–ë–æ—Ç {new_bot['name']} —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏"
    }

@app.get("/admin/bots/{bot_id}/cycle-bets")
async def get_bot_cycle_bets(bot_id: str):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–≤–∫–∞—Ö —Ü–∏–∫–ª–∞"""
    bot = next((bot for bot in mock_data["bots"] if bot["id"] == bot_id), None)
    if not bot:
        raise HTTPException(status_code=404, detail="Bot not found")
    
    return {
        "success": True,
        "bot_name": bot["name"],
        "cycle_length": 16,
        "exact_cycle_total": 800,  # ‚úÖ –ë–∞–∑–∞ 800
        "sums": {
            "wins_sum": 317,    # ‚úÖ –°—É–º–º—ã
            "losses_sum": 259,  # ‚úÖ
            "draws_sum": 224,   # ‚úÖ
            "total_sum": 800,   # ‚úÖ
            "active_pool": 576, # ‚úÖ
            "profit": 58,       # ‚úÖ
            "roi_active": 10.07 # ‚úÖ
        },
        "bets": [
            # Mock —Å—Ç–∞–≤–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            {"index": i+1, "amount": 50, "result": "win" if i < 7 else ("loss" if i < 13 else "draw")}
            for i in range(16)
        ]
    }

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Mock —Å–µ—Ä–≤–µ—Ä–∞ GemPlay")
    print("üìä –î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–∞—Å—á—ë—Ç—ã –ø–æ –±–∞–∑–µ 800:")
    print("   - –û–±—â–∞—è —Å—É–º–º–∞ —Ü–∏–∫–ª–∞: 800")
    print("   - –í—ã–∏–≥—Ä—ã—à–∏: 317, –ü–æ—Ç–µ—Ä–∏: 259, –ù–∏—á—å–∏: 224") 
    print("   - –ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª: 576, –ü—Ä–∏–±—ã–ª—å: 58, ROI: 10.07%")
    print("üîó –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8000")
    
    uvicorn.run(app, host="0.0.0.0", port=8000)