#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∫–æ–º–∏—Å—Å–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import aiohttp
import json
import random
import string
from datetime import datetime
import sys
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:5000"
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "securepassword"

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    MAGENTA = '\033[95m'
    RESET = '\033[0m'
    BOLD = '\033[1m'

def print_test_header(test_name):
    print(f"\n{Colors.BOLD}{Colors.BLUE}{'='*80}{Colors.RESET}")
    print(f"{Colors.BOLD}{Colors.BLUE}–¢–µ—Å—Ç: {test_name}{Colors.RESET}")
    print(f"{Colors.BOLD}{Colors.BLUE}{'='*80}{Colors.RESET}\n")

def print_success(message):
    print(f"{Colors.GREEN}‚úì {message}{Colors.RESET}")

def print_error(message):
    print(f"{Colors.RED}‚úó {message}{Colors.RESET}")

def print_info(message):
    print(f"{Colors.CYAN}‚Ñπ {message}{Colors.RESET}")

def print_warning(message):
    print(f"{Colors.YELLOW}‚ö† {message}{Colors.RESET}")

def print_debug(message):
    print(f"{Colors.MAGENTA}üîç {message}{Colors.RESET}")

def generate_username(prefix="test"):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=6))
    return f"{prefix}_{suffix}"

class CommissionTester:
    def __init__(self):
        self.session = None
        self.admin_token = None
        self.test_users = []
        self.test_human_bots = []
        self.initial_stats = {}
        self.commission_rate = 0.03  # 3% –∫–æ–º–∏—Å—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞"""
        self.session = aiohttp.ClientSession()
        
        # –í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.admin_token = await self.login_admin()
        if not self.admin_token:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await self.get_initial_stats()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏
        await self.get_commission_settings()
        
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        if self.session:
            await self.session.close()
            
    async def login_admin(self):
        """–í—Ö–æ–¥ –ø–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            async with self.session.post(f"{BASE_URL}/auth/login", json={
                "username": ADMIN_USERNAME,
                "password": ADMIN_PASSWORD
            }) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    print_success("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É")
                    return data["access_token"]
                else:
                    print_error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {resp.status}")
                    return None
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
            return None
            
    async def get_initial_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏
        async with self.session.get(f"{BASE_URL}/admin/profit/stats", headers=headers) as resp:
            if resp.status == 200:
                data = await resp.json()
                self.initial_stats['profit'] = data
                print_info(f"–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –æ—Ç —Å—Ç–∞–≤–æ–∫: ${data.get('bet_commission', 0):.2f}")
                print_info(f"–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –æ—Ç Human-–±–æ—Ç–æ–≤: ${data.get('human_bot_commission', 0):.2f}")
                
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Human-–±–æ—Ç–æ–≤
        async with self.session.get(f"{BASE_URL}/admin/human-bots/stats", headers=headers) as resp:
            if resp.status == 200:
                data = await resp.json()
                self.initial_stats['human_bots'] = data
                print_info(f"–ù–∞—á–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${data.get('period_revenue', 0):.2f}")
                
    async def get_commission_settings(self):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏"""
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        
        async with self.session.get(f"{BASE_URL}/admin/profit/commission-settings", headers=headers) as resp:
            if resp.status == 200:
                data = await resp.json()
                self.commission_rate = data.get('bet_commission_rate', 3) / 100
                print_info(f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏: {self.commission_rate*100:.1f}%")
                
    async def create_test_user(self, balance=1000):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = generate_username("user")
        password = "testpass123"
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        async with self.session.post(f"{BASE_URL}/auth/register", json={
            "username": username,
            "password": password,
            "confirm_password": password
        }) as resp:
            if resp.status != 200:
                print_error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {resp.status}")
                return None
                
        # –í—Ö–æ–¥
        async with self.session.post(f"{BASE_URL}/auth/login", json={
            "username": username,
            "password": password
        }) as resp:
            if resp.status == 200:
                data = await resp.json()
                user_data = {
                    "id": data["user"]["id"],
                    "username": username,
                    "token": data["access_token"],
                    "balance": balance
                }
                
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞
                if balance > 0:
                    headers = {"Authorization": f"Bearer {self.admin_token}"}
                    await self.session.put(
                        f"{BASE_URL}/admin/users/{user_data['id']}/balance",
                        headers=headers,
                        json={"balance": balance}
                    )
                
                self.test_users.append(user_data)
                print_success(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å –±–∞–ª–∞–Ω—Å–æ–º ${balance}")
                return user_data
            else:
                print_error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {resp.status}")
                return None
                
    async def create_test_human_bot(self, character="aggressive"):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Human-–±–æ—Ç–∞"""
        bot_name = generate_username(f"hbot_{character[:3]}")
        
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        
        async with self.session.post(f"{BASE_URL}/admin/human-bots", headers=headers, json={
            "name": bot_name,
            "character": character,
            "min_bet": 10,
            "max_bet": 100,
            "response_time_min": 1,
            "response_time_max": 3,
            "activity_start_hour": 0,
            "activity_end_hour": 23,
            "max_daily_games": 100,
            "win_rate_adjustment": 0,
            "is_active": True
        }) as resp:
            if resp.status == 200:
                data = await resp.json()
                bot_data = {
                    "id": data["id"],
                    "name": bot_name,
                    "character": character
                }
                self.test_human_bots.append(bot_data)
                print_success(f"–°–æ–∑–¥–∞–Ω Human-–±–æ—Ç {bot_name} —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º {character}")
                return bot_data
            else:
                print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Human-–±–æ—Ç–∞: {resp.status}")
                text = await resp.text()
                print_debug(f"–û—Ç–≤–µ—Ç: {text}")
                return None
                
    async def create_game(self, creator_token, bet_amount, selected_move=None):
        """–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É"""
        headers = {"Authorization": f"Bearer {creator_token}"}
        
        game_data = {
            "bet_amount": bet_amount,
            "is_public": True
        }
        
        if selected_move:
            game_data["selected_move"] = selected_move
            
        async with self.session.post(f"{BASE_URL}/games", headers=headers, json=game_data) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data
            else:
                print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã: {resp.status}")
                text = await resp.text()
                print_debug(f"–û—Ç–≤–µ—Ç: {text}")
                return None
                
    async def join_game(self, game_id, joiner_token, selected_move):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ"""
        headers = {"Authorization": f"Bearer {joiner_token}"}
        
        async with self.session.post(f"{BASE_URL}/games/{game_id}/join", headers=headers, json={
            "selected_move": selected_move
        }) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data
            else:
                print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ: {resp.status}")
                text = await resp.text()
                print_debug(f"–û—Ç–≤–µ—Ç: {text}")
                return None
                
    async def wait_for_human_bot_join(self, game_id, max_wait=10):
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Human-–±–æ—Ç–∞ –∫ –∏–≥—Ä–µ"""
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        
        for i in range(max_wait):
            async with self.session.get(f"{BASE_URL}/games/{game_id}", headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if data.get("status") == "COMPLETED":
                        return data
                    elif data.get("opponent_id"):
                        # –ë–æ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è, –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        await asyncio.sleep(1)
                        continue
            await asyncio.sleep(1)
            
        return None
        
    async def get_game_details(self, game_id):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã"""
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        
        async with self.session.get(f"{BASE_URL}/games/{game_id}`, headers=headers) as resp:
            if resp.status == 200:
                return await resp.json()
            else:
                return None
                
    async def get_current_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        stats = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏
        async with self.session.get(f"{BASE_URL}/admin/profit/stats", headers=headers) as resp:
            if resp.status == 200:
                stats['profit'] = await resp.json()
                
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Human-–±–æ—Ç–æ–≤
        async with self.session.get(f"{BASE_URL}/admin/human-bots/stats", headers=headers) as resp:
            if resp.status == 200:
                stats['human_bots'] = await resp.json()
                
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∏—Å—Å–∏–π Human-–±–æ—Ç–æ–≤
        async with self.session.get(f"{BASE_URL}/admin/profit/human-bot-commission-breakdown?period=all", headers=headers) as resp:
            if resp.status == 200:
                stats['commission_breakdown'] = await resp.json()
                
        return stats
        
    async def test_human_bot_vs_human_bot(self):
        """–¢–µ—Å—Ç: Human-–±–æ—Ç vs Human-–±–æ—Ç"""
        print_test_header("Human-–±–æ—Ç vs Human-–±–æ—Ç")
        
        # –°–æ–∑–¥–∞—ë–º –¥–≤—É—Ö Human-–±–æ—Ç–æ–≤
        bot1 = await self.create_test_human_bot("aggressive")
        bot2 = await self.create_test_human_bot("defensive")
        
        if not bot1 or not bot2:
            print_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Human-–±–æ—Ç–æ–≤")
            return False
            
        # –°–æ–∑–¥–∞—ë–º –∏–≥—Ä—É –æ—Ç –∏–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
        print_info("–°–æ–∑–¥–∞—ë–º –∏–≥—Ä—É –æ—Ç Human-–±–æ—Ç–∞...")
        
        # –î–ª—è Human-–±–æ—Ç–æ–≤ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        bet_amount = 50
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã Human-–±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        async with self.session.post(f"{BASE_URL}/admin/human-bots/{bot1['id']}/create-game", 
                                   headers=headers, 
                                   json={"bet_amount": bet_amount}) as resp:
            if resp.status == 200:
                game_data = await resp.json()
                game_id = game_data["game_id"]
                print_success(f"Human-–±–æ—Ç {bot1['name']} —Å–æ–∑–¥–∞–ª –∏–≥—Ä—É {game_id} —Å–æ —Å—Ç–∞–≤–∫–æ–π ${bet_amount}")
                
                # –ñ–¥—ë–º, –ø–æ–∫–∞ –≤—Ç–æ—Ä–æ–π –±–æ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è
                print_info("–û–∂–∏–¥–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ Human-–±–æ—Ç–∞...")
                await asyncio.sleep(5)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                game = await self.wait_for_human_bot_join(game_id)
                if game and game.get("status") == "COMPLETED":
                    winner_id = game.get("winner_id")
                    commission = game.get("commission_amount", 0)
                    
                    print_success(f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    print_info(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {'–ë–æ—Ç 1' if winner_id == bot1['id'] else '–ë–æ—Ç 2'}")
                    print_info(f"–ö–æ–º–∏—Å—Å–∏—è: ${commission:.2f} ({commission/bet_amount*100:.1f}%)")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    await asyncio.sleep(1)
                    stats = await self.get_current_stats()
                    
                    bet_commission_diff = stats['profit']['bet_commission'] - self.initial_stats['profit']['bet_commission']
                    human_bot_commission_diff = stats['profit']['human_bot_commission'] - self.initial_stats['profit']['human_bot_commission']
                    period_revenue_diff = stats['human_bots']['period_revenue'] - self.initial_stats['human_bots']['period_revenue']
                    
                    print_info(f"\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ:")
                    print_info(f"–ö–æ–º–∏—Å—Å–∏—è –æ—Ç —Å—Ç–∞–≤–æ–∫: +${bet_commission_diff:.2f}")
                    print_info(f"–ö–æ–º–∏—Å—Å–∏—è –æ—Ç Human-–±–æ—Ç–æ–≤: +${human_bot_commission_diff:.2f}")
                    print_info(f"–î–æ—Ö–æ–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥: +${period_revenue_diff:.2f}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–æ–º–∏—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞ –∫–∞–∫ HUMAN_BOT_COMMISSION
                    if abs(human_bot_commission_diff - commission) < 0.01:
                        print_success("‚úì –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –∫–∞–∫ HUMAN_BOT_COMMISSION")
                    else:
                        print_error(f"‚úó –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–∞—Å—å –∫–æ–º–∏—Å—Å–∏—è ${commission:.2f}, –ø–æ–ª—É—á–µ–Ω–æ ${human_bot_commission_diff:.2f}")
                        
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    if abs(human_bot_commission_diff - period_revenue_diff) < 0.01:
                        print_success("‚úì –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ–∂–¥—É ProfitAdmin –∏ HumanBotsManagement")
                    else:
                        print_error(f"‚úó –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: ProfitAdmin=${human_bot_commission_diff:.2f}, HumanBots=${period_revenue_diff:.2f}")
                        
                    return True
                else:
                    print_error("–ò–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤ –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è")
                    return False
            else:
                print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã Human-–±–æ—Ç–æ–º: {resp.status}")
                text = await resp.text()
                print_debug(f"–û—Ç–≤–µ—Ç: {text}")
                return False
                
    async def test_human_bot_vs_player(self):
        """–¢–µ—Å—Ç: Human-–±–æ—Ç vs –∂–∏–≤–æ–π –∏–≥—Ä–æ–∫"""
        print_test_header("Human-–±–æ—Ç vs –ñ–∏–≤–æ–π –∏–≥—Ä–æ–∫")
        
        # –°–æ–∑–¥–∞—ë–º Human-–±–æ—Ç–∞ –∏ –∏–≥—Ä–æ–∫–∞
        bot = await self.create_test_human_bot("balanced")
        player = await self.create_test_user(balance=500)
        
        if not bot or not player:
            print_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return False
            
        bet_amount = 40
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞—ë—Ç –∏–≥—Ä—É, Human-–±–æ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è
        print_info("\n–°—Ü–µ–Ω–∞—Ä–∏–π 1: –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞—ë—Ç –∏–≥—Ä—É")
        
        game = await self.create_game(player['token'], bet_amount, "rock")
        if not game:
            return False
            
        game_id = game["id"]
        print_success(f"–ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–ª –∏–≥—Ä—É {game_id} —Å–æ —Å—Ç–∞–≤–∫–æ–π ${bet_amount}")
        
        # –ñ–¥—ë–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –±–æ—Ç–∞
        print_info("–û–∂–∏–¥–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Human-–±–æ—Ç–∞...")
        completed_game = await self.wait_for_human_bot_join(game_id)
        
        if completed_game:
            winner_id = completed_game.get("winner_id")
            commission = completed_game.get("commission_amount", 0)
            
            print_success("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print_info(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {'Human-–±–æ—Ç' if winner_id == bot['id'] else '–ò–≥—Ä–æ–∫'}")
            print_info(f"–ö–æ–º–∏—Å—Å–∏—è: ${commission:.2f}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_before = await self.get_current_stats()
            
            # –°—Ü–µ–Ω–∞—Ä–∏–π 2: Human-–±–æ—Ç —Å–æ–∑–¥–∞—ë—Ç –∏–≥—Ä—É
            print_info("\n–°—Ü–µ–Ω–∞—Ä–∏–π 2: Human-–±–æ—Ç —Å–æ–∑–¥–∞—ë—Ç –∏–≥—Ä—É")
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            async with self.session.post(f"{BASE_URL}/admin/human-bots/{bot['id']}/create-game",
                                       headers=headers,
                                       json={"bet_amount": bet_amount}) as resp:
                if resp.status == 200:
                    game_data = await resp.json()
                    game_id = game_data["game_id"]
                    print_success(f"Human-–±–æ—Ç —Å–æ–∑–¥–∞–ª –∏–≥—Ä—É {game_id}")
                    
                    # –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è
                    join_result = await self.join_game(game_id, player['token'], "scissors")
                    
                    if join_result:
                        winner_id = join_result.get("winner_id")
                        commission = join_result.get("commission_amount", 0)
                        
                        print_success("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        print_info(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {'Human-–±–æ—Ç' if winner_id == bot['id'] else '–ò–≥—Ä–æ–∫'}")
                        print_info(f"–ö–æ–º–∏—Å—Å–∏—è: ${commission:.2f}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                        await asyncio.sleep(1)
                        stats_after = await self.get_current_stats()
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–µ–∏—Ö –∏–≥—Ä
                        total_bet_commission_diff = stats_after['profit']['bet_commission'] - self.initial_stats['profit']['bet_commission']
                        total_human_bot_commission_diff = stats_after['profit']['human_bot_commission'] - self.initial_stats['profit']['human_bot_commission']
                        total_period_revenue_diff = stats_after['human_bots']['period_revenue'] - self.initial_stats['human_bots']['period_revenue']
                        
                        print_info(f"\n–û–±—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–≤—É—Ö –∏–≥—Ä:")
                        print_info(f"–ö–æ–º–∏—Å—Å–∏—è –æ—Ç —Å—Ç–∞–≤–æ–∫: +${total_bet_commission_diff:.2f}")
                        print_info(f"–ö–æ–º–∏—Å—Å–∏—è –æ—Ç Human-–±–æ—Ç–æ–≤: +${total_human_bot_commission_diff:.2f}")
                        print_info(f"–î–æ—Ö–æ–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥: +${total_period_revenue_diff:.2f}")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                        if abs(total_human_bot_commission_diff - total_period_revenue_diff) < 0.01:
                            print_success("‚úì –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                        else:
                            print_error(f"‚úó –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: ${total_human_bot_commission_diff:.2f} vs ${total_period_revenue_diff:.2f}")
                            
                        return True
                        
        return False
        
    async def test_player_vs_player(self):
        """–¢–µ—Å—Ç: –ñ–∏–≤–æ–π –∏–≥—Ä–æ–∫ vs –ñ–∏–≤–æ–π –∏–≥—Ä–æ–∫"""
        print_test_header("–ñ–∏–≤–æ–π –∏–≥—Ä–æ–∫ vs –ñ–∏–≤–æ–π –∏–≥—Ä–æ–∫")
        
        # –°–æ–∑–¥–∞—ë–º –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤
        player1 = await self.create_test_user(balance=300)
        player2 = await self.create_test_user(balance=300)
        
        if not player1 or not player2:
            print_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤")
            return False
            
        bet_amount = 30
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –∏–≥—Ä—ã
        stats_before = await self.get_current_stats()
        
        # –ò–≥—Ä–æ–∫ 1 —Å–æ–∑–¥–∞—ë—Ç –∏–≥—Ä—É
        game = await self.create_game(player1['token'], bet_amount, "rock")
        if not game:
            return False
            
        game_id = game["id"]
        print_success(f"–ò–≥—Ä–æ–∫ 1 —Å–æ–∑–¥–∞–ª –∏–≥—Ä—É {game_id} —Å–æ —Å—Ç–∞–≤–∫–æ–π ${bet_amount}")
        
        # –ò–≥—Ä–æ–∫ 2 –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è
        join_result = await self.join_game(game_id, player2['token'], "paper")
        
        if join_result:
            winner_id = join_result.get("winner_id")
            commission = join_result.get("commission_amount", 0)
            
            print_success("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print_info(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {'–ò–≥—Ä–æ–∫ 1' if winner_id == player1['id'] else '–ò–≥—Ä–æ–∫ 2'}")
            print_info(f"–ö–æ–º–∏—Å—Å–∏—è: ${commission:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await asyncio.sleep(1)
            stats_after = await self.get_current_stats()
            
            bet_commission_diff = stats_after['profit']['bet_commission'] - stats_before['profit']['bet_commission']
            human_bot_commission_diff = stats_after['profit']['human_bot_commission'] - stats_before['profit']['human_bot_commission']
            period_revenue_diff = stats_after['human_bots']['period_revenue'] - stats_before['human_bots']['period_revenue']
            
            print_info(f"\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ:")
            print_info(f"–ö–æ–º–∏—Å—Å–∏—è –æ—Ç —Å—Ç–∞–≤–æ–∫: +${bet_commission_diff:.2f}")
            print_info(f"–ö–æ–º–∏—Å—Å–∏—è –æ—Ç Human-–±–æ—Ç–æ–≤: +${human_bot_commission_diff:.2f}")
            print_info(f"–î–æ—Ö–æ–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥: +${period_revenue_diff:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            if abs(bet_commission_diff - commission) < 0.01:
                print_success("‚úì –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –∫–∞–∫ BET_COMMISSION")
            else:
                print_error(f"‚úó –û—à–∏–±–∫–∞ –≤ BET_COMMISSION: –æ–∂–∏–¥–∞–ª–æ—Å—å ${commission:.2f}, –ø–æ–ª—É—á–µ–Ω–æ ${bet_commission_diff:.2f}")
                
            if abs(human_bot_commission_diff) < 0.01:
                print_success("‚úì HUMAN_BOT_COMMISSION –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
            else:
                print_error(f"‚úó HUMAN_BOT_COMMISSION –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ ${human_bot_commission_diff:.2f}")
                
            if abs(period_revenue_diff) < 0.01:
                print_success("‚úì period_revenue –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
            else:
                print_error(f"‚úó period_revenue –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ ${period_revenue_diff:.2f}")
                
            return True
            
        return False
        
    async def test_commission_sync(self):
        """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π"""
        print_test_header("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π")
        
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        stats = await self.get_current_stats()
        
        human_bot_commission = stats['profit'].get('human_bot_commission', 0)
        period_revenue = stats['human_bots'].get('period_revenue', 0)
        commission_breakdown_total = stats['commission_breakdown'].get('total_amount', 0)
        
        print_info(f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        print_info(f"ProfitAdmin (human_bot_commission): ${human_bot_commission:.2f}")
        print_info(f"HumanBotsManagement (period_revenue): ${period_revenue:.2f}")
        print_info(f"–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (total_amount): ${commission_breakdown_total:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        all_equal = (
            abs(human_bot_commission - period_revenue) < 0.01 and
            abs(human_bot_commission - commission_breakdown_total) < 0.01
        )
        
        if all_equal:
            print_success("‚úì –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return True
        else:
            print_warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            async with self.session.post(f"{BASE_URL}/admin/human-bots/sync-commission-data", headers=headers) as resp:
                if resp.status == 200:
                    sync_data = await resp.json()
                    print_success("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                    print_info(f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${sync_data.get('old_value', 0):.2f}")
                    print_info(f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${sync_data.get('new_value', 0):.2f}")
                    print_info(f"–†–∞–∑–Ω–∏—Ü–∞: ${sync_data.get('difference', 0):.2f}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await asyncio.sleep(1)
                    stats_after = await self.get_current_stats()
                    
                    human_bot_commission_after = stats_after['profit'].get('human_bot_commission', 0)
                    period_revenue_after = stats_after['human_bots'].get('period_revenue', 0)
                    commission_breakdown_total_after = stats_after['commission_breakdown'].get('total_amount', 0)
                    
                    all_equal_after = (
                        abs(human_bot_commission_after - period_revenue_after) < 0.01 and
                        abs(human_bot_commission_after - commission_breakdown_total_after) < 0.01
                    )
                    
                    if all_equal_after:
                        print_success("‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                        print_info(f"–ï–¥–∏–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${human_bot_commission_after:.2f}")
                        return True
                    else:
                        print_error("‚úó –î–∞–Ω–Ω—ã–µ –≤—Å—ë –µ—â—ë –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                        return False
                else:
                    print_error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {resp.status}")
                    return False
                    
    async def test_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        print_test_header("–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
        
        # –¢–µ—Å—Ç 1: –ù–∏—á—å—è (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ–º–∏—Å—Å–∏–∏)
        print_info("\n–¢–µ—Å—Ç 1: –ò–≥—Ä–∞ —Å –Ω–∏—á—å—ë–π")
        
        player1 = await self.create_test_user(balance=100)
        player2 = await self.create_test_user(balance=100)
        
        if player1 and player2:
            stats_before = await self.get_current_stats()
            
            # –°–æ–∑–¥–∞—ë–º –∏–≥—Ä—É —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Ö–æ–¥–∞–º–∏
            game = await self.create_game(player1['token'], 20, "rock")
            if game:
                join_result = await self.join_game(game["id"], player2['token'], "rock")
                
                if join_result and join_result.get("result") == "draw":
                    print_success("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–∏—á—å—ë–π")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∏—Å—Å–∏—è –Ω–µ –≤–∑–∏–º–∞–ª–∞—Å—å
                    await asyncio.sleep(1)
                    stats_after = await self.get_current_stats()
                    
                    bet_commission_diff = stats_after['profit']['bet_commission'] - stats_before['profit']['bet_commission']
                    human_bot_commission_diff = stats_after['profit']['human_bot_commission'] - stats_before['profit']['human_bot_commission']
                    
                    if abs(bet_commission_diff) < 0.01 and abs(human_bot_commission_diff) < 0.01:
                        print_success("‚úì –ö–æ–º–∏—Å—Å–∏—è –Ω–µ –≤–∑–∏–º–∞–ª–∞—Å—å –ø—Ä–∏ –Ω–∏—á—å–µ–π (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
                    else:
                        print_error(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –ø—Ä–∏ –Ω–∏—á—å–µ–π: BET=${bet_commission_diff:.2f}, HUMAN_BOT=${human_bot_commission_diff:.2f}")
                        
        # –¢–µ—Å—Ç 2: –°–±—Ä–æ—Å –¥–æ—Ö–æ–¥–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
        print_info("\n–¢–µ—Å—Ç 2: –°–±—Ä–æ—Å –¥–æ—Ö–æ–¥–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥")
        
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥
        stats_before_reset = await self.get_current_stats()
        period_revenue_before = stats_before_reset['human_bots'].get('period_revenue', 0)
        human_bot_commission_before = stats_before_reset['profit'].get('human_bot_commission', 0)
        
        print_info(f"–î–æ—Ö–æ–¥ –¥–æ —Å–±—Ä–æ—Å–∞: ${period_revenue_before:.2f}")
        
        if period_revenue_before > 0:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å
            async with self.session.post(f"{BASE_URL}/admin/human-bots/reset-period-revenue", headers=headers) as resp:
                if resp.status == 200:
                    reset_data = await resp.json()
                    print_success(f"–î–æ—Ö–æ–¥ —Å–±—Ä–æ—à–µ–Ω. {reset_data.get('message', '')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await asyncio.sleep(1)
                    stats_after_reset = await self.get_current_stats()
                    
                    period_revenue_after = stats_after_reset['human_bots'].get('period_revenue', 0)
                    human_bot_commission_after = stats_after_reset['profit'].get('human_bot_commission', 0)
                    
                    if abs(period_revenue_after) < 0.01 and abs(human_bot_commission_after) < 0.01:
                        print_success("‚úì –î–æ—Ö–æ–¥ –∏ –∫–æ–º–∏—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã")
                    else:
                        print_error(f"‚úó –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: period_revenue=${period_revenue_after:.2f}, commission=${human_bot_commission_after:.2f}")
                else:
                    print_error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–æ—Ö–æ–¥–∞: {resp.status}")
        else:
            print_info("–î–æ—Ö–æ–¥ —É–∂–µ –Ω—É–ª–µ–≤–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–±—Ä–æ—Å–∞")
            
        return True
        
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        try:
            await self.setup()
            
            results = {
                "human_bot_vs_human_bot": False,
                "human_bot_vs_player": False,
                "player_vs_player": False,
                "commission_sync": False,
                "edge_cases": False
            }
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            results["human_bot_vs_human_bot"] = await self.test_human_bot_vs_human_bot()
            await asyncio.sleep(2)
            
            results["human_bot_vs_player"] = await self.test_human_bot_vs_player()
            await asyncio.sleep(2)
            
            results["player_vs_player"] = await self.test_player_vs_player()
            await asyncio.sleep(2)
            
            results["commission_sync"] = await self.test_commission_sync()
            await asyncio.sleep(2)
            
            results["edge_cases"] = await self.test_edge_cases()
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            print_test_header("–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            
            final_stats = await self.get_current_stats()
            
            human_bot_commission = final_stats['profit'].get('human_bot_commission', 0)
            period_revenue = final_stats['human_bots'].get('period_revenue', 0)
            commission_breakdown_total = final_stats['commission_breakdown'].get('total_amount', 0)
            
            print_info(f"–§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
            print_info(f"ProfitAdmin: ${human_bot_commission:.2f}")
            print_info(f"HumanBotsManagement: ${period_revenue:.2f}")
            print_info(f"–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: ${commission_breakdown_total:.2f}")
            
            all_synced = (
                abs(human_bot_commission - period_revenue) < 0.01 and
                abs(human_bot_commission - commission_breakdown_total) < 0.01
            )
            
            if all_synced:
                print_success("‚úì –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
            else:
                print_error("‚úó –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ")
                
            # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print_test_header("–°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            passed = sum(1 for v in results.values() if v)
            total = len(results)
            
            for test_name, result in results.items():
                status = "‚úì PASSED" if result else "‚úó FAILED"
                color = Colors.GREEN if result else Colors.RED
                print(f"{color}{status}{Colors.RESET} - {test_name.replace('_', ' ').title()}")
                
            print(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
            print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
            print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
            
            if passed == total and all_synced:
                print(f"\n{Colors.GREEN}{Colors.BOLD}–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!{Colors.RESET}")
                return True
            else:
                print(f"\n{Colors.RED}{Colors.BOLD}–ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´{Colors.RESET}")
                return False
                
        finally:
            await self.cleanup()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"{Colors.BOLD}{Colors.CYAN}–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∫–æ–º–∏—Å—Å–∏–π{Colors.RESET}")
    print(f"{Colors.CYAN}–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}{Colors.RESET}")
    print(f"{Colors.CYAN}–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {BASE_URL}{Colors.RESET}")
    
    tester = CommissionTester()
    
    try:
        success = await tester.run_all_tests()
        if success:
            sys.exit(0)
        else:
            sys.exit(1)
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.RESET}")
        sys.exit(130)
    except Exception as e:
        print(f"\n{Colors.RED}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.RESET}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())