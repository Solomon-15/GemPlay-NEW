#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π BOT_REVENUE –∏–∑ profit_entries
–ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º—É completed_cycles
"""

import asyncio
from motor.motor_asyncio import AsyncIOMotorClient
import os
from dotenv import load_dotenv
from datetime import datetime

async def cleanup_bot_revenue():
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ BOT_REVENUE –∏–∑ profit_entries –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    # Load environment
    load_dotenv('/workspace/backend/.env')
    mongo_url = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
    client = AsyncIOMotorClient(mongo_url)
    db = client[os.environ.get('DB_NAME', 'gemplay_db')]
    
    print('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É BOT_REVENUE –∏–∑ profit_entries...')
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π BOT_REVENUE –µ—Å—Ç—å
        bot_revenue_count = await db.profit_entries.count_documents({"entry_type": "BOT_REVENUE"})
        print(f'üìä –ù–∞–π–¥–µ–Ω–æ {bot_revenue_count} –∑–∞–ø–∏—Å–µ–π BOT_REVENUE –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
        
        if bot_revenue_count == 0:
            print('‚úÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π BOT_REVENUE –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        print('üíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é BOT_REVENUE –∑–∞–ø–∏—Å–µ–π...')
        bot_revenue_entries = await db.profit_entries.find({"entry_type": "BOT_REVENUE"}).to_list(1000)
        
        if bot_revenue_entries:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            backup_collection = f"profit_entries_bot_revenue_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            await db[backup_collection].insert_many(bot_revenue_entries)
            print(f'‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é: {backup_collection}')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        revenue_stats = await db.profit_entries.aggregate([
            {"$match": {"entry_type": "BOT_REVENUE"}},
            {"$group": {
                "_id": None,
                "total_amount": {"$sum": "$amount"},
                "count": {"$sum": 1},
                "avg_amount": {"$avg": "$amount"}
            }}
        ]).to_list(1)
        
        if revenue_stats:
            stats = revenue_stats[0]
            print(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª—è–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π:')
            print(f'   –û–±—â–∞—è —Å—É–º–º–∞: ${stats["total_amount"]:.2f}')
            print(f'   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats["count"]}')
            print(f'   –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: ${stats["avg_amount"]:.2f}')
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ BOT_REVENUE
        result = await db.profit_entries.delete_many({"entry_type": "BOT_REVENUE"})
        print(f'üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {result.deleted_count} –∑–∞–ø–∏—Å–µ–π BOT_REVENUE')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        remaining_bot_revenue = await db.profit_entries.count_documents({"entry_type": "BOT_REVENUE"})
        if remaining_bot_revenue == 0:
            print('‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ BOT_REVENUE —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã')
        else:
            print(f'‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å {remaining_bot_revenue} –∑–∞–ø–∏—Å–µ–π BOT_REVENUE')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É profit_entries
        total_profit_entries = await db.profit_entries.count_documents({})
        print(f'üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π –≤ profit_entries: {total_profit_entries}')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
        remaining_types = await db.profit_entries.aggregate([
            {"$group": {"_id": "$entry_type", "count": {"$sum": 1}}}
        ]).to_list(10)
        
        print('üìä –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–∏–ø—ã –∑–∞–ø–∏—Å–µ–π:')
        for type_stat in remaining_types:
            print(f'   {type_stat["_id"]}: {type_stat["count"]}')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}')
    finally:
        await client.close()

if __name__ == "__main__":
    asyncio.run(cleanup_bot_revenue())