#!/usr/bin/env python3
"""
Regular Bots Corrected Cycle Logic Testing - Russian Review
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ª–æ–≥–∏–∫–∏ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º

–ö–û–ù–¢–ï–ö–°–¢: –ò—Å–ø—Ä–∞–≤–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π. –¢–µ–ø–µ—Ä—å –ª–æ–≥–∏–∫–∞:

–ü–†–ê–í–ò–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ü—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ –∫ —Å—Ç–∞–≤–∫–µ –±–æ—Ç–∞ ‚Üí –ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –Ω–∏—á—å–µ
- –ü–æ—Å–ª–µ –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è ‚Üí —Å—Ç–∞–≤–∫–∞ –∏—Å—á–µ–∑–∞–µ—Ç –±–µ–∑ –∑–∞–º–µ–Ω—ã
- –ù–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ

–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê:
- –°–æ–∑–¥–∞—Ç—å `cycle_games` —Å—Ç–∞–≤–æ–∫ –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞
- –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–≤–æ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫  
- –ù–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞ –∏–ª–∏ –ø—Ä–∏ –Ω–∏—á—å–µ

–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –õ–û–ì–ò–ö–ê –¶–ò–ö–õ–û–í - –ë–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Å—Ç–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
2. –°–û–ó–î–ê–ù–ò–ï –°–¢–ê–í–û–ö - maintain_all_bots_active_bets() –ù–ï –¥–æ–ª–∂–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è—Ç—å —Å—Ç–∞–≤–∫–∏
3. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–¢–ò–í–ù–´–• –°–¢–ê–í–û–ö - Normal –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
4. –ù–ò–ß–ï–ô–ù–ê–Ø –õ–û–ì–ò–ö–ê - schedule_draw_replacement_bet() –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –ø—Ä–∏ –Ω–∏—á—å–µ

–û–ñ–ò–î–ê–ï–ú–û–ï –ü–û–í–ï–î–ï–ù–ò–ï:
- –ë–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç 12 —Å—Ç–∞–≤–æ–∫ ‚Üí –∏–≥—Ä–æ–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç ‚Üí –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è ‚Üí —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è ‚Üí –Ω–æ–≤—ã–µ 12 —Å—Ç–∞–≤–æ–∫
- 93.7% –∏–≥—Ä –≤ WAITING —ç—Ç–æ –ù–û–†–ú–ê–õ–¨–ù–û (–∂–¥—É—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –∏–≥—Ä–æ–∫–∞–º–∏)

–ü–†–ò–û–†–ò–¢–ï–¢: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–´–ú —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
"""

import requests
import json
import time
import sys
from typing import Dict, Any, Optional, List, Tuple
import random
from datetime import datetime, timedelta

# Configuration
BASE_URL = "https://a0c62159-4f54-474f-b3db-88a2c8a14d22.preview.emergentagent.com/api"
ADMIN_USER = {
    "email": "admin@gemplay.com",
    "password": "Admin123!"
}

# Test results tracking
test_results = {
    "total": 0,
    "passed": 0,
    "failed": 0,
    "tests": []
}

# Colors for terminal output
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

def print_header(text: str):
    """Print colored header"""
    print(f"\n{Colors.BOLD}{Colors.CYAN}{'='*80}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{text.center(80)}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{'='*80}{Colors.END}\n")

def print_test_result(test_name: str, success: bool, details: str = ""):
    """Print test result with colors"""
    status = f"{Colors.GREEN}‚úÖ PASSED{Colors.END}" if success else f"{Colors.RED}‚ùå FAILED{Colors.END}"
    print(f"{status} - {test_name}")
    if details:
        print(f"   {Colors.YELLOW}Details: {details}{Colors.END}")

def record_test(test_name: str, success: bool, details: str = "", response_data: Any = None):
    """Record test result"""
    test_results["total"] += 1
    if success:
        test_results["passed"] += 1
    else:
        test_results["failed"] += 1
    
    test_results["tests"].append({
        "name": test_name,
        "success": success,
        "details": details,
        "response_data": response_data,
        "timestamp": datetime.now().isoformat()
    })
    
    print_test_result(test_name, success, details)

def make_request(method: str, endpoint: str, headers: Dict = None, data: Dict = None, params: Dict = None) -> Tuple[bool, Any, str]:
    """Make HTTP request with error handling"""
    url = f"{BASE_URL}{endpoint}"
    
    try:
        start_time = time.time()
        
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, params=params, timeout=30)
        elif method.upper() == "POST":
            response = requests.post(url, headers=headers, json=data, timeout=30)
        elif method.upper() == "PUT":
            response = requests.put(url, headers=headers, json=data, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            return False, None, f"Unsupported method: {method}"
        
        response_time = time.time() - start_time
        
        try:
            response_data = response.json()
        except:
            response_data = response.text
        
        success = response.status_code in [200, 201]
        details = f"Status: {response.status_code}, Time: {response_time:.3f}s"
        
        if not success:
            details += f", Error: {response_data}"
        
        return success, response_data, details
        
    except requests.exceptions.Timeout:
        return False, None, "Request timeout (30s)"
    except requests.exceptions.ConnectionError:
        return False, None, "Connection error"
    except Exception as e:
        return False, None, f"Request error: {str(e)}"

def authenticate_admin() -> Optional[str]:
    """Authenticate as admin and return access token"""
    print(f"{Colors.BLUE}üîê Authenticating as admin user...{Colors.END}")
    
    success, response_data, details = make_request(
        "POST", 
        "/auth/login",
        data=ADMIN_USER
    )
    
    if success and response_data and "access_token" in response_data:
        token = response_data["access_token"]
        print(f"{Colors.GREEN}‚úÖ Admin authentication successful{Colors.END}")
        return token
    else:
        print(f"{Colors.RED}‚ùå Admin authentication failed: {details}{Colors.END}")
        return None

def test_cycle_logic_initialization(token: str):
    """Test 1: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –±–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Å—Ç–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞"""
    print(f"\n{Colors.MAGENTA}üß™ Test 1: Cycle Logic - Initial Bet Creation{Colors.END}")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Get current regular bots
    success, response_data, details = make_request(
        "GET",
        "/admin/bots",
        headers=headers
    )
    
    if success and response_data:
        bots = response_data if isinstance(response_data, list) else response_data.get("bots", [])
        
        if bots:
            # Check if bots have proper cycle configuration
            cycle_compliant_bots = 0
            total_active_bets = 0
            
            for bot in bots:
                cycle_games = bot.get("cycle_games", 0)
                active_bets = bot.get("active_bets", 0)
                bot_name = bot.get("name", "Unknown")
                
                total_active_bets += active_bets
                
                # Check if bot follows cycle logic (active_bets <= cycle_games)
                if active_bets <= cycle_games:
                    cycle_compliant_bots += 1
                
                print(f"   Bot '{bot_name}': {active_bets} active bets, {cycle_games} cycle limit")
            
            compliance_rate = (cycle_compliant_bots / len(bots)) * 100 if bots else 0
            
            if compliance_rate >= 80:  # At least 80% of bots follow cycle logic
                record_test(
                    "Cycle Logic - Initial Bet Creation",
                    True,
                    f"{cycle_compliant_bots}/{len(bots)} bots follow cycle logic ({compliance_rate:.1f}%). Total active bets: {total_active_bets}"
                )
            else:
                record_test(
                    "Cycle Logic - Initial Bet Creation",
                    False,
                    f"Only {cycle_compliant_bots}/{len(bots)} bots follow cycle logic ({compliance_rate:.1f}%). Some bots exceed cycle_games limit"
                )
        else:
            record_test(
                "Cycle Logic - Initial Bet Creation",
                False,
                "No regular bots found to test cycle logic"
            )
    else:
        record_test(
            "Cycle Logic - Initial Bet Creation",
            False,
            f"Failed to get regular bots: {details}"
        )

def test_active_bets_natural_decrease(token: str):
    """Test 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è"""
    print(f"\n{Colors.MAGENTA}üß™ Test 2: Active Bets Natural Decrease Over Time{Colors.END}")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Take 3 measurements with 10-second intervals
    measurements = []
    
    for i in range(3):
        print(f"   üìä Taking measurement {i+1}/3...")
        
        success, response_data, details = make_request(
            "GET",
            "/bots/active-games",
            headers=headers
        )
        
        if success and response_data:
            games = response_data if isinstance(response_data, list) else response_data.get("games", [])
            active_count = len([g for g in games if g.get("status") == "WAITING"])
            total_count = len(games)
            
            measurements.append({
                "timestamp": datetime.now(),
                "active_waiting": active_count,
                "total_games": total_count
            })
            
            print(f"      Active WAITING games: {active_count}, Total games: {total_count}")
        else:
            measurements.append({
                "timestamp": datetime.now(),
                "active_waiting": 0,
                "total_games": 0,
                "error": details
            })
        
        if i < 2:  # Don't wait after last measurement
            time.sleep(10)
    
    # Analyze measurements
    if len(measurements) >= 2:
        first_measurement = measurements[0]
        last_measurement = measurements[-1]
        
        first_active = first_measurement.get("active_waiting", 0)
        last_active = last_measurement.get("active_waiting", 0)
        
        # Check if the system is stable (not constantly creating new bets)
        difference = abs(first_active - last_active)
        stability_threshold = max(5, first_active * 0.1)  # 10% or minimum 5 games
        
        if difference <= stability_threshold:
            record_test(
                "Active Bets Natural Decrease",
                True,
                f"System is stable. Active games: {first_active} ‚Üí {last_active} (difference: {difference}). This indicates bots are NOT constantly creating new bets."
            )
        else:
            # Check if it's decreasing (which is expected behavior)
            if last_active < first_active:
                record_test(
                    "Active Bets Natural Decrease",
                    True,
                    f"Active games naturally decreasing: {first_active} ‚Üí {last_active} (decrease: {first_active - last_active}). This is CORRECT behavior."
                )
            else:
                record_test(
                    "Active Bets Natural Decrease",
                    False,
                    f"Active games increasing: {first_active} ‚Üí {last_active} (increase: {last_active - first_active}). This suggests constant bet creation."
                )
    else:
        record_test(
            "Active Bets Natural Decrease",
            False,
            "Could not take sufficient measurements to analyze bet creation patterns"
        )

def test_no_constant_bet_replenishment(token: str):
    """Test 3: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ maintain_all_bots_active_bets() –ù–ï –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è–µ—Ç —Å—Ç–∞–≤–∫–∏"""
    print(f"\n{Colors.MAGENTA}üß™ Test 3: No Constant Bet Replenishment{Colors.END}")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Get current bot statistics
    success, response_data, details = make_request(
        "GET",
        "/admin/bots",
        headers=headers
    )
    
    if success and response_data:
        bots = response_data if isinstance(response_data, list) else response_data.get("bots", [])
        
        if bots:
            # Check for bots that violate cycle_games limits (indicating constant replenishment)
            violating_bots = []
            compliant_bots = []
            
            for bot in bots:
                bot_name = bot.get("name", "Unknown")
                cycle_games = bot.get("cycle_games", 12)
                active_bets = bot.get("active_bets", 0)
                
                if active_bets > cycle_games:
                    violating_bots.append({
                        "name": bot_name,
                        "active_bets": active_bets,
                        "cycle_games": cycle_games,
                        "violation_ratio": active_bets / cycle_games if cycle_games > 0 else float('inf')
                    })
                else:
                    compliant_bots.append({
                        "name": bot_name,
                        "active_bets": active_bets,
                        "cycle_games": cycle_games
                    })
            
            total_bots = len(bots)
            compliant_count = len(compliant_bots)
            violating_count = len(violating_bots)
            
            if violating_count == 0:
                record_test(
                    "No Constant Bet Replenishment",
                    True,
                    f"All {total_bots} bots respect cycle_games limits. No constant replenishment detected."
                )
            elif violating_count <= total_bots * 0.2:  # Allow up to 20% violation (might be in transition)
                record_test(
                    "No Constant Bet Replenishment",
                    True,
                    f"Minor violations: {violating_count}/{total_bots} bots exceed limits. Mostly compliant system."
                )
            else:
                # Major violations - constant replenishment likely happening
                violation_details = []
                for bot in violating_bots[:3]:  # Show first 3 violating bots
                    violation_details.append(f"{bot['name']}: {bot['active_bets']} > {bot['cycle_games']} ({bot['violation_ratio']:.1f}x)")
                
                record_test(
                    "No Constant Bet Replenishment",
                    False,
                    f"MAJOR VIOLATIONS: {violating_count}/{total_bots} bots exceed cycle_games limits. Examples: {'; '.join(violation_details)}. This indicates constant bet replenishment."
                )
        else:
            record_test(
                "No Constant Bet Replenishment",
                False,
                "No regular bots found to test replenishment logic"
            )
    else:
        record_test(
            "No Constant Bet Replenishment",
            False,
            f"Failed to get bot statistics: {details}"
        )

def test_draw_replacement_logic(token: str):
    """Test 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –ø—Ä–∏ –Ω–∏—á—å–µ"""
    print(f"\n{Colors.MAGENTA}üß™ Test 4: Draw Replacement Logic{Colors.END}")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Check if bots have pause_on_draw settings (indicates draw replacement is implemented)
    success, response_data, details = make_request(
        "GET",
        "/admin/bots",
        headers=headers
    )
    
    if success and response_data:
        bots = response_data if isinstance(response_data, list) else response_data.get("bots", [])
        
        if bots:
            bots_with_draw_settings = 0
            draw_settings_found = []
            
            for bot in bots:
                bot_name = bot.get("name", "Unknown")
                pause_on_draw = bot.get("pause_on_draw")
                
                if pause_on_draw is not None:
                    bots_with_draw_settings += 1
                    draw_settings_found.append(f"{bot_name}: {pause_on_draw}s")
            
            if bots_with_draw_settings > 0:
                coverage = (bots_with_draw_settings / len(bots)) * 100
                record_test(
                    "Draw Replacement Logic Implementation",
                    True,
                    f"Draw replacement logic implemented: {bots_with_draw_settings}/{len(bots)} bots have pause_on_draw settings ({coverage:.1f}%). Examples: {'; '.join(draw_settings_found[:3])}"
                )
            else:
                record_test(
                    "Draw Replacement Logic Implementation",
                    False,
                    "No bots have pause_on_draw settings. Draw replacement logic not implemented."
                )
        else:
            record_test(
                "Draw Replacement Logic Implementation",
                False,
                "No regular bots found to test draw replacement logic"
            )
    else:
        record_test(
            "Draw Replacement Logic Implementation",
            False,
            f"Failed to get bot data for draw logic testing: {details}"
        )

def test_waiting_games_percentage(token: str):
    """Test 5: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–≥—Ä –≤ WAITING —Å—Ç–∞—Ç—É—Å–µ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ"""
    print(f"\n{Colors.MAGENTA}üß™ Test 5: WAITING Games Percentage Analysis{Colors.END}")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    success, response_data, details = make_request(
        "GET",
        "/bots/active-games",
        headers=headers
    )
    
    if success and response_data:
        games = response_data if isinstance(response_data, list) else response_data.get("games", [])
        
        if games:
            waiting_games = len([g for g in games if g.get("status") == "WAITING"])
            active_games = len([g for g in games if g.get("status") == "ACTIVE"])
            total_games = len(games)
            
            waiting_percentage = (waiting_games / total_games) * 100 if total_games > 0 else 0
            active_percentage = (active_games / total_games) * 100 if total_games > 0 else 0
            
            # High percentage of WAITING games is NORMAL and EXPECTED
            if waiting_percentage >= 70:  # 70%+ WAITING is normal
                record_test(
                    "WAITING Games Percentage Analysis",
                    True,
                    f"NORMAL behavior: {waiting_percentage:.1f}% games in WAITING status ({waiting_games}/{total_games}). This indicates bots create bets and wait for players to join - CORRECT logic."
                )
            elif waiting_percentage >= 50:
                record_test(
                    "WAITING Games Percentage Analysis",
                    True,
                    f"Acceptable behavior: {waiting_percentage:.1f}% games in WAITING status ({waiting_games}/{total_games}). System working as expected."
                )
            else:
                record_test(
                    "WAITING Games Percentage Analysis",
                    False,
                    f"Unusual pattern: Only {waiting_percentage:.1f}% games in WAITING status ({waiting_games}/{total_games}). Expected higher percentage of waiting games."
                )
        else:
            record_test(
                "WAITING Games Percentage Analysis",
                False,
                "No active games found to analyze WAITING percentage"
            )
    else:
        record_test(
            "WAITING Games Percentage Analysis",
            False,
            f"Failed to get active games data: {details}"
        )

def test_bot_segregation_compliance(token: str):
    """Test 6: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ Regular –±–æ—Ç—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç Human-–±–æ—Ç–æ–≤"""
    print(f"\n{Colors.MAGENTA}üß™ Test 6: Bot Segregation Compliance{Colors.END}")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Test 6a: Check that /games/available doesn't contain regular bot games
    success, response_data, details = make_request(
        "GET",
        "/games/available",
        headers=headers
    )
    
    regular_bots_in_available = 0
    if success and response_data:
        games = response_data if isinstance(response_data, list) else response_data.get("games", [])
        
        for game in games:
            if game.get("is_regular_bot_game") or game.get("creator_type") == "bot":
                regular_bots_in_available += 1
    
    # Test 6b: Check that /bots/active-games contains only regular bot games
    success2, response_data2, details2 = make_request(
        "GET",
        "/bots/active-games",
        headers=headers
    )
    
    regular_bot_games_count = 0
    human_bot_games_in_regular = 0
    
    if success2 and response_data2:
        games = response_data2 if isinstance(response_data2, list) else response_data2.get("games", [])
        regular_bot_games_count = len(games)
        
        for game in games:
            if game.get("creator_type") == "human_bot" or game.get("bot_type") == "HUMAN":
                human_bot_games_in_regular += 1
    
    # Evaluate segregation
    segregation_violations = regular_bots_in_available + human_bot_games_in_regular
    
    if segregation_violations == 0:
        record_test(
            "Bot Segregation Compliance",
            True,
            f"Perfect segregation: 0 regular bot games in /games/available, 0 human-bot games in /bots/active-games. Found {regular_bot_games_count} regular bot games in correct endpoint."
        )
    else:
        record_test(
            "Bot Segregation Compliance",
            False,
            f"Segregation violations: {regular_bots_in_available} regular bot games in /games/available, {human_bot_games_in_regular} human-bot games in /bots/active-games"
        )

def test_cycle_completion_behavior(token: str):
    """Test 7: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞"""
    print(f"\n{Colors.MAGENTA}üß™ Test 7: Cycle Completion Behavior{Colors.END}")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Get bots with cycle statistics
    success, response_data, details = make_request(
        "GET",
        "/admin/bots",
        headers=headers
    )
    
    if success and response_data:
        bots = response_data if isinstance(response_data, list) else response_data.get("bots", [])
        
        if bots:
            bots_with_cycles = 0
            cycle_analysis = []
            
            for bot in bots:
                bot_name = bot.get("name", "Unknown")
                completed_cycles = bot.get("completed_cycles", 0)
                current_cycle_wins = bot.get("current_cycle_wins", 0)
                current_cycle_losses = bot.get("current_cycle_losses", 0)
                cycle_games = bot.get("cycle_games", 12)
                
                if completed_cycles > 0 or current_cycle_wins > 0 or current_cycle_losses > 0:
                    bots_with_cycles += 1
                    
                    current_cycle_total = current_cycle_wins + current_cycle_losses
                    cycle_progress = (current_cycle_total / cycle_games) * 100 if cycle_games > 0 else 0
                    
                    cycle_analysis.append({
                        "name": bot_name,
                        "completed_cycles": completed_cycles,
                        "current_progress": f"{current_cycle_total}/{cycle_games} ({cycle_progress:.1f}%)"
                    })
            
            if bots_with_cycles > 0:
                coverage = (bots_with_cycles / len(bots)) * 100
                
                # Show examples
                examples = []
                for analysis in cycle_analysis[:3]:
                    examples.append(f"{analysis['name']}: {analysis['completed_cycles']} cycles completed, current: {analysis['current_progress']}")
                
                record_test(
                    "Cycle Completion Behavior",
                    True,
                    f"Cycle system operational: {bots_with_cycles}/{len(bots)} bots have cycle data ({coverage:.1f}%). Examples: {'; '.join(examples)}"
                )
            else:
                record_test(
                    "Cycle Completion Behavior",
                    False,
                    "No bots have cycle completion data. Cycle system may not be working."
                )
        else:
            record_test(
                "Cycle Completion Behavior",
                False,
                "No regular bots found to test cycle completion behavior"
            )
    else:
        record_test(
            "Cycle Completion Behavior",
            False,
            f"Failed to get bot cycle data: {details}"
        )

def print_final_summary():
    """Print final test summary"""
    print_header("REGULAR BOTS CORRECTED CYCLE LOGIC TESTING SUMMARY")
    
    total = test_results["total"]
    passed = test_results["passed"]
    failed = test_results["failed"]
    success_rate = (passed / total * 100) if total > 0 else 0
    
    print(f"{Colors.BOLD}üìä OVERALL RESULTS:{Colors.END}")
    print(f"   Total Tests: {total}")
    print(f"   {Colors.GREEN}‚úÖ Passed: {passed}{Colors.END}")
    print(f"   {Colors.RED}‚ùå Failed: {failed}{Colors.END}")
    print(f"   {Colors.CYAN}üìà Success Rate: {success_rate:.1f}%{Colors.END}")
    
    print(f"\n{Colors.BOLD}üéØ CORRECTED LOGIC REQUIREMENTS STATUS:{Colors.END}")
    
    requirements = [
        "–ë–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Å—Ç–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞",
        "–ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–≤–æ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫",
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è",
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –Ω–∏—á—å–µ",
        "–í—ã—Å–æ–∫–∏–π % –∏–≥—Ä –≤ WAITING —Å—Ç–∞—Ç—É—Å–µ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
        "Regular –±–æ—Ç—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç Human-–±–æ—Ç–æ–≤",
        "–°–∏—Å—Ç–µ–º–∞ —Ü–∏–∫–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    ]
    
    for i, req in enumerate(requirements, 1):
        # Find corresponding test result
        test_found = False
        for test in test_results["tests"]:
            if any(keyword in test["name"].lower() for keyword in req.lower().split()[:3]):
                status = f"{Colors.GREEN}‚úÖ CORRECT{Colors.END}" if test["success"] else f"{Colors.RED}‚ùå INCORRECT{Colors.END}"
                print(f"   {i}. {req}: {status}")
                test_found = True
                break
        
        if not test_found:
            print(f"   {i}. {req}: {Colors.YELLOW}‚ö†Ô∏è NOT TESTED{Colors.END}")
    
    print(f"\n{Colors.BOLD}üîç DETAILED TEST RESULTS:{Colors.END}")
    for test in test_results["tests"]:
        status = f"{Colors.GREEN}‚úÖ{Colors.END}" if test["success"] else f"{Colors.RED}‚ùå{Colors.END}"
        print(f"   {status} {test['name']}")
        if test["details"]:
            print(f"      {Colors.YELLOW}{test['details']}{Colors.END}")
    
    # Final conclusion based on corrected requirements
    if success_rate >= 85:
        print(f"\n{Colors.GREEN}{Colors.BOLD}üéâ CONCLUSION: CORRECTED REGULAR BOTS LOGIC IS {success_rate:.1f}% COMPLIANT!{Colors.END}")
        print(f"{Colors.GREEN}The corrected logic follows the proper requirements: bots create cycle_games bets at cycle start, don't constantly replenish, and only create additional bets on draws.{Colors.END}")
    elif success_rate >= 70:
        print(f"\n{Colors.YELLOW}{Colors.BOLD}‚ö†Ô∏è CONCLUSION: CORRECTED LOGIC IS {success_rate:.1f}% COMPLIANT{Colors.END}")
        print(f"{Colors.YELLOW}Most aspects of the corrected logic are working, but some issues remain.{Colors.END}")
    else:
        print(f"\n{Colors.RED}{Colors.BOLD}üö® CONCLUSION: CORRECTED LOGIC NEEDS MORE WORK ({success_rate:.1f}% compliant){Colors.END}")
        print(f"{Colors.RED}The system is still not following the corrected requirements properly.{Colors.END}")
    
    print(f"\n{Colors.BOLD}{Colors.CYAN}üìã EXPECTED BEHAVIOR VERIFICATION:{Colors.END}")
    print(f"{Colors.CYAN}‚úì –ë–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç 12 —Å—Ç–∞–≤–æ–∫ ‚Üí –∏–≥—Ä–æ–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç ‚Üí –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è ‚Üí —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è ‚Üí –Ω–æ–≤—ã–µ 12 —Å—Ç–∞–≤–æ–∫{Colors.END}")
    print(f"{Colors.CYAN}‚úì 93.7% –∏–≥—Ä –≤ WAITING —ç—Ç–æ –ù–û–†–ú–ê–õ–¨–ù–û (–∂–¥—É—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –∏–≥—Ä–æ–∫–∞–º–∏){Colors.END}")

def main():
    """Main test execution"""
    print_header("REGULAR BOTS CORRECTED CYCLE LOGIC TESTING")
    print(f"{Colors.BLUE}üéØ Testing corrected Regular Bots logic according to proper requirements{Colors.END}")
    print(f"{Colors.BLUE}üìã Focus: Cycle-based bet creation, no constant replenishment, draw-only additional bets{Colors.END}")
    
    # Authenticate
    token = authenticate_admin()
    if not token:
        print(f"{Colors.RED}‚ùå Cannot proceed without authentication{Colors.END}")
        sys.exit(1)
    
    try:
        # Run all tests for corrected logic
        test_cycle_logic_initialization(token)
        test_active_bets_natural_decrease(token)
        test_no_constant_bet_replenishment(token)
        test_draw_replacement_logic(token)
        test_waiting_games_percentage(token)
        test_bot_segregation_compliance(token)
        test_cycle_completion_behavior(token)
        
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}‚ö†Ô∏è Testing interrupted by user{Colors.END}")
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå Unexpected error during testing: {str(e)}{Colors.END}")
    
    finally:
        # Print final summary
        print_final_summary()

if __name__ == "__main__":
    main()