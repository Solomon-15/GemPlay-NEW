#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ò–ö–õ–ê –°–¢–ê–í–û–ö - Russian Review Testing
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π —Å—É–º–º—ã —Ü–∏–∫–ª–∞ —Å—Ç–∞–≤–æ–∫

–ü–†–û–ë–õ–ï–ú–ê: Regular –±–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Å—Ç–∞–≤–∫–∏ —Å –Ω–µ—Ç–æ—á–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏ —Ü–∏–∫–ª–∞ –≤–º–µ—Å—Ç–æ —Ç–æ—á–Ω–æ 306.0
–û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: (min_bet_amount + max_bet_amount) / 2 * cycle_games = (1 + 50) / 2 * 12 = 306.0

–¢–ï–°–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. POST /api/admin/bots/create-regular - —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ "Critical_Fix_Test_Bot"
2. –ü–æ–¥–æ–∂–¥–∞—Ç—å 25 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö 12 —Å—Ç–∞–≤–æ–∫ —Ü–∏–∫–ª–∞
3. GET /api/bots/active-games - –ø–æ–ª—É—á–∏—Ç—å –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã —ç—Ç–æ–≥–æ –±–æ—Ç–∞
4. –í—ã—á–∏—Å–ª–∏—Ç—å –¢–û–ß–ù–£–Æ —Å—É–º–º—É –≤—Å–µ—Ö bet_amount
5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å—É–º–º–∞ –°–¢–†–û–ì–û —Ä–∞–≤–Ω–∞ 306.0
6. –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 12)
7. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞:
   - "üéØ Bot ID: GENERATING COMPLETE CYCLE"
   - "üéØ Bot ID: CYCLE BETS SAVED"
   - "üéØ Bot ID: ARCHITECTURAL SUCCESS! Perfect exact sum match!"

–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–†–ï–ë–û–í–ê–ù–ò–ï: –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¢–û–ß–ù–û 306.0. 
–ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (110, 288, 229, 377, 289, 227, 333, 315), –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å.

–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –ø–æ —Ü–∏–∫–ª–∞–º.
"""

import requests
import json
import time
import sys
from typing import Dict, Any, Optional, List, Tuple
import random
import string
from datetime import datetime

# Configuration
BASE_URL = "https://f772daa6-fb15-4f46-808e-f02104f088ba.preview.emergentagent.com/api"
ADMIN_USER = {
    "email": "admin@gemplay.com",
    "password": "Admin123!"
}

# Test results tracking
test_results = {
    "total": 0,
    "passed": 0,
    "failed": 0,
    "tests": []
}

# Colors for terminal output
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

def print_header(text: str):
    """Print colored header"""
    print(f"\n{Colors.BOLD}{Colors.CYAN}{'='*80}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{text.center(80)}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{'='*80}{Colors.END}\n")

def print_test_result(test_name: str, success: bool, details: str = ""):
    """Print test result with colors"""
    status = f"{Colors.GREEN}‚úÖ PASSED{Colors.END}" if success else f"{Colors.RED}‚ùå FAILED{Colors.END}"
    print(f"{status} - {test_name}")
    if details:
        print(f"   {Colors.YELLOW}Details: {details}{Colors.END}")

def record_test(test_name: str, success: bool, details: str = "", response_data: Any = None):
    """Record test result"""
    test_results["total"] += 1
    if success:
        test_results["passed"] += 1
    else:
        test_results["failed"] += 1
    
    test_results["tests"].append({
        "name": test_name,
        "success": success,
        "details": details,
        "response_data": response_data,
        "timestamp": datetime.now().isoformat()
    })
    
    print_test_result(test_name, success, details)

def make_request(method: str, endpoint: str, headers: Dict = None, data: Dict = None, params: Dict = None) -> Tuple[bool, Any, str]:
    """Make HTTP request with error handling"""
    url = f"{BASE_URL}{endpoint}"
    
    try:
        start_time = time.time()
        
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, params=params, timeout=30)
        elif method.upper() == "POST":
            response = requests.post(url, headers=headers, json=data, timeout=30)
        elif method.upper() == "PUT":
            response = requests.put(url, headers=headers, json=data, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            return False, None, f"Unsupported method: {method}"
        
        response_time = time.time() - start_time
        
        try:
            response_data = response.json()
        except:
            response_data = response.text
        
        success = response.status_code in [200, 201]
        details = f"Status: {response.status_code}, Time: {response_time:.3f}s"
        
        if not success:
            details += f", Error: {response_data}"
        
        return success, response_data, details
        
    except requests.exceptions.Timeout:
        return False, None, "Request timeout (30s)"
    except requests.exceptions.ConnectionError:
        return False, None, "Connection error"
    except Exception as e:
        return False, None, f"Request error: {str(e)}"

def authenticate_admin() -> Optional[str]:
    """Authenticate as admin and return access token"""
    print(f"{Colors.BLUE}üîê Authenticating as admin user...{Colors.END}")
    
    success, response_data, details = make_request(
        "POST", 
        "/auth/login",
        data=ADMIN_USER
    )
    
    if success and response_data and "access_token" in response_data:
        token = response_data["access_token"]
        print(f"{Colors.GREEN}‚úÖ Admin authentication successful{Colors.END}")
        return token
    else:
        print(f"{Colors.RED}‚ùå Admin authentication failed: {details}{Colors.END}")
        return None

def test_exact_cycle_sum_matching():
    """Test 1: –°–æ–∑–¥–∞—Ç—å Regular –±–æ—Ç "Critical_Fix_Test_Bot" –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω—É—é —Å—É–º–º—É —Ü–∏–∫–ª–∞ 306.0"""
    print(f"\n{Colors.MAGENTA}üß™ Test 1: Testing CRITICAL FIX for exact cycle sum matching{Colors.END}")
    
    # First authenticate as admin
    admin_token = authenticate_admin()
    if not admin_token:
        record_test("Critical Fix Test Bot Creation", False, "Failed to authenticate as admin")
        return
    
    headers = {"Authorization": f"Bearer {admin_token}"}
    
    # Create Regular bot with EXACT settings from Russian review
    import time
    timestamp = int(time.time())
    bot_data = {
        "name": f"Final_Perfect_Test_Bot_{timestamp}",
        "min_bet_amount": 1.0,
        "max_bet_amount": 50.0,
        "cycle_games": 12,
        "win_percentage": 55,
        "pause_between_cycles": 5,
        "pause_on_draw": 1,
        "profit_strategy": "balanced",
        "creation_mode": "queue-based"
    }
    
    print(f"   üìù Creating Regular bot 'Final_Perfect_Test_Bot_{timestamp}' with settings: {bot_data}")
    
    # Create the bot
    success, response_data, details = make_request(
        "POST",
        "/admin/bots/create-regular",
        headers=headers,
        data=bot_data
    )
    
    if not success or not response_data:
        record_test(
            "Critical Fix Test Bot Creation",
            False,
            f"Failed to create Regular bot: {details}"
        )
        return
    
    bot_id = response_data.get("bot_id")
    if not bot_id:
        record_test(
            "Critical Fix Test Bot Creation",
            False,
            "Bot created but no bot_id returned"
        )
        return
    
    print(f"   ‚úÖ Regular bot 'Final_Perfect_Test_Bot_{timestamp}' created successfully with ID: {bot_id}")
    
    # Wait 30 seconds for COMPLETE cycle creation as specified in Russian review
    print(f"   ‚è≥ Waiting 30 seconds for COMPLETE cycle creation (all 12 bets)...")
    time.sleep(30)
    
    # Get ALL active games for this specific bot
    success, games_data, details = make_request(
        "GET",
        "/bots/active-games",
        headers=headers
    )
    
    if not success or not games_data:
        record_test(
            "Critical Fix Test Bot - Active Games Retrieval",
            False,
            f"Failed to get active games: {details}"
        )
        return
    
    # Filter games for our specific bot
    bot_games = []
    if isinstance(games_data, list):
        bot_games = [game for game in games_data if game.get("bot_id") == bot_id]
    elif isinstance(games_data, dict) and "games" in games_data:
        bot_games = [game for game in games_data["games"] if game.get("bot_id") == bot_id]
    
    if not bot_games:
        record_test(
            "Critical Fix Test Bot - Active Games Retrieval",
            False,
            f"No active games found for bot {bot_id}. Total games found: {len(games_data) if isinstance(games_data, list) else 'unknown'}"
        )
        return
    
    print(f"   ‚úÖ Found {len(bot_games)} active games for Final_Perfect_Test_Bot_{timestamp}")
    
    # Calculate EXACT sum of ALL bet_amount values
    bet_amounts = [float(game.get("bet_amount", 0)) for game in bot_games]
    total_sum = sum(bet_amounts)
    bet_count = len(bet_amounts)
    min_bet = min(bet_amounts) if bet_amounts else 0
    max_bet = max(bet_amounts) if bet_amounts else 0
    avg_bet = total_sum / bet_count if bet_count > 0 else 0
    
    print(f"   üìä CRITICAL FIX ANALYSIS:")
    print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫: {bet_count} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 12)")
    print(f"      –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${min_bet:.1f}")
    print(f"      –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${max_bet:.1f}")
    print(f"      –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: ${avg_bet:.1f}")
    print(f"      –¢–û–ß–ù–ê–Ø –°–£–ú–ú–ê: ${total_sum:.1f}")
    print(f"      –û–ñ–ò–î–ê–ï–ú–ê–Ø –°–£–ú–ú–ê: $306.0")
    
    # Check if sum is STRICTLY equal to 306.0
    expected_sum = 306.0
    is_exact_match = abs(total_sum - expected_sum) < 0.01  # Allow for floating point precision
    
    # Check bet count
    correct_bet_count = bet_count == 12
    
    if is_exact_match and correct_bet_count:
        record_test(
            "Critical Fix Test Bot - Exact Sum Verification",
            True,
            f"üéØ ARCHITECTURAL SUCCESS! Perfect exact sum match: {total_sum:.1f} = 306.0. Bets: {bet_count}/12, Range: ${min_bet:.1f}-${max_bet:.1f}"
        )
    else:
        difference = total_sum - expected_sum
        issues = []
        if not is_exact_match:
            issues.append(f"Sum mismatch: {total_sum:.1f} ‚â† 306.0 (diff: {difference:+.1f})")
        if not correct_bet_count:
            issues.append(f"Bet count wrong: {bet_count} ‚â† 12")
        
        record_test(
            "Critical Fix Test Bot - Exact Sum Verification",
            False,
            f"üö® CRITICAL FAILURE! {'; '.join(issues)}. Expected values: 110, 288, 229, 377, 289, 227, 333, 315 indicate fix failure."
        )
    
    # Show individual bet amounts for debugging
    print(f"   üîç Individual bet amounts: {sorted(bet_amounts)}")
    
    return is_exact_match and correct_bet_count, total_sum, bet_count, min_bet, max_bet, avg_bet

def test_backend_logs_analysis():
    """Test 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø"""
    print(f"\n{Colors.MAGENTA}üß™ Test 2: Analyzing backend logs for CRITICAL FIX messages{Colors.END}")
    
    try:
        # Try to read supervisor logs for backend
        import subprocess
        
        # Get recent backend logs
        result = subprocess.run(
            ["tail", "-n", "200", "/var/log/supervisor/backend.out.log"],
            capture_output=True,
            text=True,
            timeout=10
        )
        
        if result.returncode == 0:
            log_content = result.stdout
            
            # Look for CRITICAL FIX specific messages
            generating_cycle_msgs = log_content.count("üéØ Bot ID: GENERATING COMPLETE CYCLE")
            cycle_bets_saved_msgs = log_content.count("üéØ Bot ID: CYCLE BETS SAVED")
            architectural_success_msgs = log_content.count("üéØ Bot ID: ARCHITECTURAL SUCCESS! Perfect exact sum match!")
            
            # Look for general normalization messages
            perfect_matches = log_content.count("‚úÖ normalize: PERFECT MATCH!")
            imperfect_matches = log_content.count("‚ùå normalize: Imperfect match")
            
            print(f"   üìã CRITICAL FIX Log Analysis Results:")
            print(f"      üéØ 'GENERATING COMPLETE CYCLE' messages: {generating_cycle_msgs}")
            print(f"      üéØ 'CYCLE BETS SAVED' messages: {cycle_bets_saved_msgs}")
            print(f"      üéØ 'ARCHITECTURAL SUCCESS! Perfect exact sum match!' messages: {architectural_success_msgs}")
            print(f"      ‚úÖ General 'PERFECT MATCH' messages: {perfect_matches}")
            print(f"      ‚ùå 'Imperfect match' messages: {imperfect_matches}")
            
            # Success criteria: should have architectural success messages
            if architectural_success_msgs > 0:
                record_test(
                    "Critical Fix Backend Logs Analysis",
                    True,
                    f"Found {architectural_success_msgs} ARCHITECTURAL SUCCESS messages indicating critical fix is working"
                )
            elif generating_cycle_msgs > 0 and cycle_bets_saved_msgs > 0:
                record_test(
                    "Critical Fix Backend Logs Analysis",
                    True,
                    f"Found cycle generation messages: {generating_cycle_msgs} GENERATING, {cycle_bets_saved_msgs} SAVED"
                )
            elif perfect_matches > 0:
                record_test(
                    "Critical Fix Backend Logs Analysis",
                    True,
                    f"Found {perfect_matches} general PERFECT MATCH messages"
                )
            else:
                record_test(
                    "Critical Fix Backend Logs Analysis",
                    False,
                    "No critical fix success messages found in recent logs"
                )
            
            # Show some relevant log lines
            critical_lines = []
            for line in log_content.split('\n'):
                if any(keyword in line for keyword in [
                    "üéØ Bot ID: GENERATING COMPLETE CYCLE",
                    "üéØ Bot ID: CYCLE BETS SAVED", 
                    "üéØ Bot ID: ARCHITECTURAL SUCCESS",
                    "‚úÖ normalize: PERFECT MATCH"
                ]):
                    critical_lines.append(line.strip())
            
            if critical_lines:
                print(f"   üìù Recent critical fix log lines:")
                for line in critical_lines[-5:]:  # Show last 5 relevant lines
                    print(f"      {line}")
                    
        else:
            record_test(
                "Critical Fix Backend Logs Analysis",
                False,
                f"Failed to read backend logs: {result.stderr}"
            )
            
    except subprocess.TimeoutExpired:
        record_test("Critical Fix Backend Logs Analysis", False, "Timeout reading backend logs")
    except Exception as e:
        record_test("Critical Fix Backend Logs Analysis", False, f"Error reading logs: {str(e)}")

def print_cycle_sum_summary():
    """Print CRITICAL FIX cycle sum testing specific summary"""
    print_header("CRITICAL FIX - EXACT CYCLE SUM MATCHING TESTING SUMMARY")
    
    total = test_results["total"]
    passed = test_results["passed"]
    failed = test_results["failed"]
    success_rate = (passed / total * 100) if total > 0 else 0
    
    print(f"{Colors.BOLD}üìä OVERALL RESULTS:{Colors.END}")
    print(f"   Total Tests: {total}")
    print(f"   {Colors.GREEN}‚úÖ Passed: {passed}{Colors.END}")
    print(f"   {Colors.RED}‚ùå Failed: {failed}{Colors.END}")
    print(f"   {Colors.CYAN}üìà Success Rate: {success_rate:.1f}%{Colors.END}")
    
    print(f"\n{Colors.BOLD}üéØ CRITICAL FIX REQUIREMENTS STATUS:{Colors.END}")
    
    requirements = [
        "POST /api/admin/bots/create-regular - —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ 'Critical_Fix_Test_Bot'",
        "–ü–æ–¥–æ–∂–¥–∞—Ç—å 25 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö 12 —Å—Ç–∞–≤–æ–∫ —Ü–∏–∫–ª–∞",
        "GET /api/bots/active-games - –ø–æ–ª—É—á–∏—Ç—å –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã —ç—Ç–æ–≥–æ –±–æ—Ç–∞",
        "–í—ã—á–∏—Å–ª–∏—Ç—å –¢–û–ß–ù–£–Æ —Å—É–º–º—É –≤—Å–µ—Ö bet_amount",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å—É–º–º–∞ –°–¢–†–û–ì–û —Ä–∞–≤–Ω–∞ 306.0",
        "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 12)",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ 'üéØ Bot ID: GENERATING COMPLETE CYCLE'",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ 'üéØ Bot ID: CYCLE BETS SAVED'",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ 'üéØ Bot ID: ARCHITECTURAL SUCCESS! Perfect exact sum match!'"
    ]
    
    for i, req in enumerate(requirements, 1):
        # Find corresponding test result
        test_found = False
        for test in test_results["tests"]:
            if ("critical fix test bot" in test["name"].lower() or "exact sum verification" in test["name"].lower()) and i <= 6:
                status = f"{Colors.GREEN}‚úÖ WORKING{Colors.END}" if test["success"] else f"{Colors.RED}‚ùå FAILED{Colors.END}"
                print(f"   {i}. {req}: {status}")
                test_found = True
                break
            elif "critical fix backend logs" in test["name"].lower() and i >= 7:
                status = f"{Colors.GREEN}‚úÖ WORKING{Colors.END}" if test["success"] else f"{Colors.RED}‚ùå FAILED{Colors.END}"
                print(f"   {i}. {req}: {status}")
                test_found = True
                break
        
        if not test_found:
            print(f"   {i}. {req}: {Colors.YELLOW}‚ö†Ô∏è NOT TESTED{Colors.END}")
    
    print(f"\n{Colors.BOLD}üîç DETAILED TEST RESULTS:{Colors.END}")
    for test in test_results["tests"]:
        status = f"{Colors.GREEN}‚úÖ{Colors.END}" if test["success"] else f"{Colors.RED}‚ùå{Colors.END}"
        print(f"   {status} {test['name']}")
        if test["details"]:
            print(f"      {Colors.YELLOW}{test['details']}{Colors.END}")
    
    # Specific conclusion for CRITICAL FIX
    if success_rate == 100:
        print(f"\n{Colors.GREEN}{Colors.BOLD}üéâ CONCLUSION: CRITICAL FIX IS 100% WORKING!{Colors.END}")
        print(f"{Colors.GREEN}Regular –±–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Å—Ç–∞–≤–∫–∏ —Å —Ç–æ—á–Ω–æ–π —Å—É–º–º–æ–π 306.0. –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï —Ü–∏–∫–ª–∞ —Å—Ç–∞–≤–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.{Colors.END}")
        print(f"{Colors.GREEN}–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É - –£–°–ü–ï–®–ù–ê!{Colors.END}")
    elif success_rate >= 50:
        print(f"\n{Colors.YELLOW}{Colors.BOLD}‚ö†Ô∏è CONCLUSION: CRITICAL FIX HAS ISSUES ({success_rate:.1f}% functional){Colors.END}")
        print(f"{Colors.YELLOW}–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é —Å—É–º–º—ã —Ü–∏–∫–ª–∞.{Colors.END}")
        print(f"{Colors.YELLOW}–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.{Colors.END}")
    else:
        print(f"\n{Colors.RED}{Colors.BOLD}üö® CONCLUSION: CRITICAL FIX FAILED ({success_rate:.1f}% functional){Colors.END}")
        print(f"{Colors.RED}–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! Regular –±–æ—Ç—ã –ù–ï —Å–æ–∑–¥–∞—é—Ç —Ç–æ—á–Ω—É—é —Å—É–º–º—É 306.0.{Colors.END}")
        print(f"{Colors.RED}–ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (110, 288, 229, 377, 289, 227, 333, 315), –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å.{Colors.END}")
        print(f"{Colors.RED}–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –ø–æ —Ü–∏–∫–ª–∞–º - –ü–†–û–í–ê–õ–ï–ù–ê!{Colors.END}")
    
    # Specific recommendations
    print(f"\n{Colors.BOLD}üí° RECOMMENDATIONS FOR MAIN AGENT:{Colors.END}")
    
    # Check specific failure patterns
    cycle_test = next((test for test in test_results["tests"] if "exact sum verification" in test["name"].lower()), None)
    logs_test = next((test for test in test_results["tests"] if "critical fix backend logs" in test["name"].lower()), None)
    
    if cycle_test and not cycle_test["success"]:
        print(f"   üî¥ CRITICAL: Exact cycle sum matching is NOT working")
        print(f"   üîß URGENT: Fix normalize_amounts_to_exact_sum() function")
        print(f"   üîß URGENT: Check cycle-wide sum calculation logic")
        print(f"   üîß URGENT: Verify bet creation architecture (individual vs batch)")
        print(f"   üîß URGENT: This is the LAST ATTEMPT - architectural redesign needed")
    elif logs_test and not logs_test["success"]:
        print(f"   üî¥ Backend logs don't show ARCHITECTURAL SUCCESS messages")
        print(f"   üîß Check critical fix logging implementation")
        print(f"   üîß Verify cycle generation and saving logic")
    else:
        print(f"   üü¢ CRITICAL FIX appears to be working correctly")
        print(f"   ‚úÖ Regular –±–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Ç–æ—á–Ω—É—é —Å—É–º–º—É 306.0")
        print(f"   ‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞")
        print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")

def main():
    """Main test execution for CRITICAL FIX - exact cycle sum matching"""
    print_header("CRITICAL FIX - EXACT CYCLE SUM MATCHING TESTING")
    print(f"{Colors.BLUE}üéØ Testing –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï —Ü–∏–∫–ª–∞ —Å—Ç–∞–≤–æ–∫ –¥–ª—è Regular –±–æ—Ç–æ–≤{Colors.END}")
    print(f"{Colors.BLUE}üåê Backend URL: {BASE_URL}{Colors.END}")
    print(f"{Colors.BLUE}üìã Focus: Regular bot 'Critical_Fix_Test_Bot', cycle sum = 306.0, architectural logs{Colors.END}")
    print(f"{Colors.BLUE}üé≤ Expected: (1+50)/2*12 = 25.5*12 = 306.0{Colors.END}")
    print(f"{Colors.BLUE}üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–†–ï–ë–û–í–ê–ù–ò–ï: –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –°–¢–†–û–ì–û —Ä–∞–≤–Ω–∞ 306.0{Colors.END}")
    print(f"{Colors.BLUE}‚ùå –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (110, 288, 229, 377, 289, 227, 333, 315), –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å{Colors.END}")
    print(f"{Colors.BLUE}üî• –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –ø–æ —Ü–∏–∫–ª–∞–º{Colors.END}")
    
    try:
        # Run CRITICAL FIX tests
        test_exact_cycle_sum_matching()
        test_backend_logs_analysis()
        
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}‚ö†Ô∏è Testing interrupted by user{Colors.END}")
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå Unexpected error during testing: {str(e)}{Colors.END}")
    
    finally:
        # Print final summary
        print_cycle_sum_summary()

if __name__ == "__main__":
    main()