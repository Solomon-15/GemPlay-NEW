#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
"""

import json
import requests
import time

class APITester:
    def __init__(self, base_url="http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.auth_token = None
        
    def test_server_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            response = self.session.get(f"{self.base_url}/health", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def authenticate_admin(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º mock token
        self.auth_token = "mock_admin_token"
        self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
        return True
    
    def test_bot_cycle_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ü–∏–∫–ª–∞–º–∏ –±–æ—Ç–æ–≤"""
        print("üîå –¢–ï–°–¢ API –≠–ù–î–ü–û–ò–ù–¢–û–í")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        print("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        if not self.test_server_connection():
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä.")
            print("   –ö–æ–º–∞–Ω–¥–∞: cd /workspace/backend && python server.py")
            return False
        
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        if not self.authenticate_admin():
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return False
        
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        endpoints_to_test = [
            {
                "name": "–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤",
                "url": "/admin/bots/regular/list",
                "method": "GET"
            },
            {
                "name": "–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤",
                "url": "/admin/profit/bot-cycles-history",
                "method": "GET"
            },
            {
                "name": "–°–≤–æ–¥–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç –±–æ—Ç–æ–≤",
                "url": "/admin/profit/bot-revenue-summary",
                "method": "GET"
            }
        ]
        
        results = {}
        
        for endpoint in endpoints_to_test:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {endpoint['name']}")
            try:
                url = f"{self.base_url}{endpoint['url']}"
                response = self.session.get(url, timeout=10)
                
                print(f"   URL: {url}")
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    if endpoint['url'] == '/admin/profit/bot-cycles-history':
                        cycles = data.get('cycles', [])
                        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {len(cycles)}")
                        
                        if cycles:
                            sample_cycle = cycles[0]
                            print(f"   üìã –ü—Ä–∏–º–µ—Ä —Ü–∏–∫–ª–∞:")
                            print(f"      ID: {sample_cycle.get('id', 'N/A')}")
                            print(f"      –ò–≥—Ä: {sample_cycle.get('total_games', 'N/A')}")
                            print(f"      W/L/D: {sample_cycle.get('wins', 'N/A')}/{sample_cycle.get('losses', 'N/A')}/{sample_cycle.get('draws', 'N/A')}")
                            print(f"      –ü—Ä–∏–±—ã–ª—å: {sample_cycle.get('net_profit', 'N/A')}")
                            print(f"      ROI: {sample_cycle.get('roi_percent', 'N/A')}%")
                    
                    elif endpoint['url'] == '/admin/profit/bot-revenue-summary':
                        revenue = data.get('revenue', {})
                        cycles = data.get('cycles', {})
                        print(f"   üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {revenue.get('total', 'N/A')}")
                        print(f"   üîÑ –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤: {cycles.get('total', 'N/A')}")
                        print(f"   üìà –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {cycles.get('profitable', 'N/A')}")
                    
                    results[endpoint['name']] = {"status": "SUCCESS", "data": data}
                    
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: HTTP {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}...")
                    results[endpoint['name']] = {"status": "FAILED", "error": f"HTTP {response.status_code}"}
                    
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                results[endpoint['name']] = {"status": "ERROR", "error": str(e)}
        
        return results

def test_manual_data_verification():
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ API"""
    print("\nüîç –†–£–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    files_to_check = [
        "/workspace/backend/server.py",
        "/workspace/frontend/src/components/RegularBotsManagement.js",
        "/workspace/frontend/src/components/ProfitAdmin.js"
    ]
    
    for file_path in files_to_check:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            print(f"‚úÖ {file_path.split('/')[-1]}: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏/–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if "server.py" in file_path:
                key_functions = [
                    "complete_bot_cycle",
                    "generate_cycle_bets_natural_distribution",
                    "get_bot_completed_cycles",
                    "get_bot_revenue_summary"
                ]
                
                for func in key_functions:
                    if func in content:
                        print(f"   ‚úÖ –§—É–Ω–∫—Ü–∏—è {func} –Ω–∞–π–¥–µ–Ω–∞")
                    else:
                        print(f"   ‚ùå –§—É–Ω–∫—Ü–∏—è {func} –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
            
            elif "RegularBotsManagement.js" in file_path:
                key_elements = [
                    "–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤",
                    "roi_active",
                    "exact_cycle_total"
                ]
                
                for element in key_elements:
                    if element in content:
                        print(f"   ‚úÖ –≠–ª–µ–º–µ–Ω—Ç '{element}' –Ω–∞–π–¥–µ–Ω")
                    else:
                        print(f"   ‚ùå –≠–ª–µ–º–µ–Ω—Ç '{element}' –ù–ï –Ω–∞–π–¥–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå {file_path}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    
    # API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    api_tester = APITester()
    api_results = api_tester.test_bot_cycle_endpoints()
    
    # –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    test_manual_data_verification()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print(f"\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ API –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    if api_results:
        total_tests = len(api_results)
        successful = sum(1 for result in api_results.values() if result["status"] == "SUCCESS")
        
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API:")
        print(f"   –í—Å–µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {total_tests}")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {successful}")
        print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - successful}")
        
        for name, result in api_results.items():
            status_icon = {"SUCCESS": "‚úÖ", "FAILED": "‚ùå", "ERROR": "üî•"}[result["status"]]
            print(f"   {name}: {status_icon}")
    else:
        print("‚ö†Ô∏è  API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä: cd /workspace/backend && python server.py")
    print(f"   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend: cd /workspace/frontend && npm start")
    print(f"   3. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print(f"   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ '–î–æ—Ö–æ–¥ –æ—Ç –±–æ—Ç–æ–≤'")

if __name__ == "__main__":
    main()