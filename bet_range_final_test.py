#!/usr/bin/env python3
"""
CRITICAL BET RANGE GENERATION TEST - Russian Review
–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤

–û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: Test_Bet_Range_Bot —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–≤–∫–∏ –í–ù–ï –¥–∏–∞–ø–∞–∑–æ–Ω–∞ min_bet_amount –∏ max_bet_amount!

–§–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï:
- Bot: Test_Bet_Range_Bot (min_bet: 10.0, max_bet: 30.0)
- –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–≤–∫–∏: [100.0, 50.0, 28.0, 60.0, 50.0]
- –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ (10-30): —Ç–æ–ª—å–∫–æ 1 —Å—Ç–∞–≤–∫–∞ (28.0)
- –í–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: 4 —Å—Ç–∞–≤–∫–∏ (100.0, 50.0, 60.0, 50.0)

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫ –ù–ï –†–ê–ë–û–¢–ê–ï–¢!
"""

import requests
import json
import time
import sys
from typing import Dict, Any, Optional, List, Tuple
from datetime import datetime

# Configuration
BASE_URL = "https://russian-writing-4.preview.emergentagent.com/api"
ADMIN_USER = {
    "email": "admin@gemplay.com",
    "password": "Admin123!"
}

# Colors for terminal output
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

def print_header(text: str):
    """Print colored header"""
    print(f"\n{Colors.BOLD}{Colors.RED}{'='*80}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.RED}{text.center(80)}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.RED}{'='*80}{Colors.END}\n")

def authenticate_admin() -> Optional[str]:
    """Authenticate as admin and return access token"""
    auth_response = requests.post(f"{BASE_URL}/auth/login", json=ADMIN_USER)
    if auth_response.status_code == 200:
        return auth_response.json()["access_token"]
    return None

def analyze_bet_range_issue():
    """Comprehensive analysis of the bet range generation issue"""
    print_header("–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –°–¢–ê–í–û–ö –ë–û–¢–û–í")
    
    token = authenticate_admin()
    if not token:
        print(f"{Colors.RED}‚ùå Authentication failed{Colors.END}")
        return
    
    headers = {"Authorization": f"Bearer {token}"}
    
    print(f"{Colors.BOLD}{Colors.CYAN}üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –ì–ï–ù–ï–†–ê–¶–ò–ò –°–¢–ê–í–û–ö{Colors.END}")
    
    # Get all regular bots
    bots_response = requests.get(f"{BASE_URL}/admin/bots", headers=headers)
    bots_data = bots_response.json()
    bots = bots_data if isinstance(bots_data, list) else bots_data.get('bots', [])
    
    # Get active games
    games_response = requests.get(f"{BASE_URL}/bots/active-games", headers=headers)
    games_data = games_response.json()
    games = games_data if isinstance(games_data, list) else games_data.get('games', [])
    
    print(f"\n{Colors.BOLD}üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:{Colors.END}")
    print(f"   –í—Å–µ–≥–æ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤: {len(bots)}")
    print(f"   –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {len(games)}")
    
    # Analyze each bot
    critical_issues = []
    
    for bot in bots:
        bot_id = bot.get("id", "")
        bot_name = bot.get("name", "N/A")
        min_bet = bot.get("min_bet_amount", 0)
        max_bet = bot.get("max_bet_amount", 0)
        cycle_games = bot.get("cycle_games", 0)
        active_bets = bot.get("active_bets", 0)
        
        # Find games created by this bot
        bot_games = [game for game in games if game.get("creator_id") == bot_id]
        bet_amounts = [game.get("bet_amount", 0) for game in bot_games]
        
        print(f"\n{Colors.BOLD}{Colors.BLUE}ü§ñ –ë–û–¢: {bot_name}{Colors.END}")
        print(f"   ID: {bot_id[:8]}...")
        print(f"   –ù–∞—Å—Ç—Ä–æ–π–∫–∏: min_bet={min_bet}, max_bet={max_bet}, cycle_games={cycle_games}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {active_bets} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {cycle_games})")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä: {len(bot_games)}")
        
        if bet_amounts:
            print(f"   –°—É–º–º—ã —Å—Ç–∞–≤–æ–∫: {bet_amounts}")
            
            # Check range compliance
            in_range = [amount for amount in bet_amounts if min_bet <= amount <= max_bet]
            out_of_range = [amount for amount in bet_amounts if not (min_bet <= amount <= max_bet)]
            
            min_actual = min(bet_amounts)
            max_actual = max(bet_amounts)
            avg_actual = sum(bet_amounts) / len(bet_amounts)
            
            print(f"   –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–≤–æ–∫: {min_actual} - {max_actual} (—Å—Ä–µ–¥–Ω–µ–µ: {avg_actual:.2f})")
            print(f"   {Colors.GREEN}‚úÖ –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ ({min_bet}-{max_bet}): {len(in_range)} —Å—Ç–∞–≤–æ–∫: {in_range}{Colors.END}")
            
            if out_of_range:
                print(f"   {Colors.RED}‚ùå –í–ù–ï –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {len(out_of_range)} —Å—Ç–∞–≤–æ–∫: {out_of_range}{Colors.END}")
                
                # This is a critical issue
                critical_issues.append({
                    "bot_name": bot_name,
                    "bot_id": bot_id[:8] + "...",
                    "expected_range": f"{min_bet}-{max_bet}",
                    "actual_range": f"{min_actual}-{max_actual}",
                    "out_of_range_bets": out_of_range,
                    "compliance_rate": f"{len(in_range)}/{len(bet_amounts)} ({len(in_range)/len(bet_amounts)*100:.1f}%)"
                })
            else:
                print(f"   {Colors.GREEN}‚úÖ –í—Å–µ —Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ!{Colors.END}")
        else:
            print(f"   {Colors.YELLOW}‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞{Colors.END}")
    
    # Summary of critical issues
    print(f"\n{Colors.BOLD}{Colors.RED}üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´:{Colors.END}")
    
    if critical_issues:
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {len(critical_issues)}")
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤: {len(bots)}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –±–æ—Ç–æ–≤: {len(critical_issues)/len(bots)*100:.1f}%")
        
        print(f"\n{Colors.BOLD}üìã –î–ï–¢–ê–õ–ò –ü–†–û–ë–õ–ï–ú:{Colors.END}")
        for i, issue in enumerate(critical_issues, 1):
            print(f"   {i}. {Colors.RED}–ë–û–¢: {issue['bot_name']} ({issue['bot_id']}){Colors.END}")
            print(f"      –û–∂–∏–¥–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {issue['expected_range']}")
            print(f"      –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: {issue['actual_range']}")
            print(f"      –°—Ç–∞–≤–∫–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {issue['out_of_range_bets']}")
            print(f"      –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {issue['compliance_rate']}")
            print()
        
        print(f"{Colors.BOLD}{Colors.RED}üî• –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –°–¢–ê–í–û–ö –ù–ï –†–ê–ë–û–¢–ê–ï–¢!{Colors.END}")
        print(f"{Colors.RED}–û–±—ã—á–Ω—ã–µ –±–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Å—Ç–∞–≤–∫–∏ –í–ù–ï —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ min_bet_amount –∏ max_bet_amount.{Colors.END}")
        print(f"{Colors.RED}–≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.{Colors.END}")
        
        # Specific focus on Test_Bet_Range_Bot
        test_bot_issue = next((issue for issue in critical_issues if "Test_Bet_Range_Bot" in issue['bot_name']), None)
        if test_bot_issue:
            print(f"\n{Colors.BOLD}{Colors.MAGENTA}üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó Test_Bet_Range_Bot:{Colors.END}")
            print(f"   –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            print(f"   –ù–∞—Å—Ç—Ä–æ–π–∫–∏: min_bet=10.0, max_bet=30.0, cycle_games=5")
            print(f"   {Colors.RED}–†–ï–ó–£–õ–¨–¢–ê–¢: {test_bot_issue['compliance_rate']} —Å—Ç–∞–≤–æ–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ{Colors.END}")
            print(f"   {Colors.RED}–°–¢–ê–í–ö–ò –í–ù–ï –î–ò–ê–ü–ê–ó–û–ù–ê: {test_bot_issue['out_of_range_bets']}{Colors.END}")
            print(f"   {Colors.RED}–≠–¢–û –î–û–ö–ê–ó–´–í–ê–ï–¢ –ß–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢!{Colors.END}")
    else:
        print(f"{Colors.GREEN}‚úÖ –í—Å–µ –±–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ!{Colors.END}")
        print(f"{Colors.GREEN}–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.{Colors.END}")
    
    return len(critical_issues) == 0

def main():
    """Main execution"""
    success = analyze_bet_range_issue()
    
    if not success:
        print(f"\n{Colors.BOLD}{Colors.RED}‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫ –ù–ï –†–ê–ë–û–¢–ê–ï–¢{Colors.END}")
        sys.exit(1)
    else:
        print(f"\n{Colors.BOLD}{Colors.GREEN}‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ{Colors.END}")

if __name__ == "__main__":
    main()