#!/usr/bin/env python3
"""
Final comprehensive test for bot fields removal - Russian Review
–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π can_accept_bets –∏ can_play_with_bots –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤
"""

import asyncio
import aiohttp
import json
from datetime import datetime

BACKEND_URL = "https://detali-shop.preview.emergentagent.com/api"
SUPER_ADMIN_EMAIL = "admin@gemplay.com"
SUPER_ADMIN_PASSWORD = "Admin123!"

class FinalBotFieldsTester:
    def __init__(self):
        self.session = None
        self.admin_token = None
        self.test_results = []
        
    async def setup(self):
        """Initialize HTTP session and authenticate"""
        self.session = aiohttp.ClientSession()
        await self.authenticate_super_admin()
        
    async def cleanup(self):
        """Clean up HTTP session"""
        if self.session:
            await self.session.close()
            
    async def authenticate_super_admin(self):
        """Authenticate as SUPER_ADMIN"""
        print("üîê Authenticating as SUPER_ADMIN...")
        
        login_data = {
            "email": SUPER_ADMIN_EMAIL,
            "password": SUPER_ADMIN_PASSWORD
        }
        
        try:
            async with self.session.post(f"{BACKEND_URL}/auth/login", json=login_data) as response:
                if response.status == 200:
                    data = await response.json()
                    self.admin_token = data["access_token"]
                    print(f"‚úÖ SUPER_ADMIN authentication successful")
                    return True
                else:
                    error_text = await response.text()
                    print(f"‚ùå SUPER_ADMIN authentication failed: {response.status} - {error_text}")
                    return False
        except Exception as e:
            print(f"‚ùå SUPER_ADMIN authentication error: {e}")
            return False
            
    def get_auth_headers(self):
        """Get authorization headers"""
        return {"Authorization": f"Bearer {self.admin_token}"}
        
    async def test_comprehensive_bot_fields_removal(self):
        """Comprehensive test of bot fields removal"""
        print("\nüéØ COMPREHENSIVE BOT FIELDS REMOVAL TESTING")
        print("="*80)
        
        # 1. Test GET /api/admin/bots - check existing bots
        print("\n1Ô∏è‚É£ TESTING GET /api/admin/bots - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–æ—Ç–æ–≤...")
        try:
            async with self.session.get(f"{BACKEND_URL}/admin/bots", headers=self.get_auth_headers()) as response:
                if response.status == 200:
                    data = await response.json()
                    bots = data.get("bots", [])
                    
                    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(bots)} –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤")
                    
                    if bots:
                        # Check all bots for removed fields
                        bots_with_removed_fields = 0
                        for i, bot in enumerate(bots[:3]):  # Check first 3 bots
                            has_can_accept_bets = "can_accept_bets" in bot
                            has_can_play_with_bots = "can_play_with_bots" in bot
                            
                            if has_can_accept_bets or has_can_play_with_bots:
                                bots_with_removed_fields += 1
                                
                            print(f"   ü§ñ –ë–æ—Ç {i+1} ({bot.get('name', 'Unknown')}):")
                            print(f"      - can_accept_bets: {'‚ùå –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢' if has_can_accept_bets else '‚úÖ –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
                            print(f"      - can_play_with_bots: {'‚ùå –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢' if has_can_play_with_bots else '‚úÖ –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
                        
                        if bots_with_removed_fields == 0:
                            print(f"   ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –±–æ—Ç—ã –ù–ï —Å–æ–¥–µ—Ä–∂–∞—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è")
                            self.test_results.append(("GET /api/admin/bots - —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", True))
                        else:
                            print(f"   ‚ùå {bots_with_removed_fields} –±–æ—Ç–æ–≤ –≤—Å–µ –µ—â–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è")
                            self.test_results.append(("GET /api/admin/bots - —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", False))
                    else:
                        print("   ‚ö†Ô∏è –û–±—ã—á–Ω—ã–µ –±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        self.test_results.append(("GET /api/admin/bots - —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", "NA"))
                else:
                    error_text = await response.text()
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–≤: {response.status} - {error_text}")
                    self.test_results.append(("GET /api/admin/bots - —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", False))
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ—Ç–æ–≤: {e}")
            self.test_results.append(("GET /api/admin/bots - —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", False))
            
        # 2. Test POST /api/admin/bots/create-regular - create new bot
        print("\n2Ô∏è‚É£ TESTING POST /api/admin/bots/create-regular - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        try:
            bot_data = {
                "name": f"TestBot_FieldsRemoval_{int(datetime.now().timestamp())}",
                "min_bet_amount": 1.0,
                "max_bet_amount": 100.0,
                "win_rate": 55.0,
                "cycle_games": 12,
                "individual_limit": 12,
                "pause_between_games": 5,
                "creation_mode": "queue-based",
                "priority_order": 50,
                "profit_strategy": "balanced"
            }
            
            async with self.session.post(f"{BACKEND_URL}/admin/bots/create-regular", 
                                       json=bot_data, headers=self.get_auth_headers()) as response:
                if response.status == 200:
                    data = await response.json()
                    created_bot = data.get("bot", {})
                    
                    has_can_accept_bets = "can_accept_bets" in created_bot
                    has_can_play_with_bots = "can_play_with_bots" in created_bot
                    
                    print(f"   ‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {created_bot.get('name', 'Unknown')}")
                    print(f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π:")
                    print(f"      - can_accept_bets: {'‚ùå –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢' if has_can_accept_bets else '‚úÖ –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
                    print(f"      - can_play_with_bots: {'‚ùå –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢' if has_can_play_with_bots else '‚úÖ –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
                    
                    if not has_can_accept_bets and not has_can_play_with_bots:
                        print(f"   ‚úÖ –ù–æ–≤—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –ë–ï–ó —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π")
                        self.test_results.append(("POST /api/admin/bots/create-regular - –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π", True))
                    else:
                        print(f"   ‚ùå –ù–æ–≤—ã–π –±–æ—Ç –≤—Å–µ –µ—â–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è")
                        self.test_results.append(("POST /api/admin/bots/create-regular - –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π", False))
                        
                    # Store bot ID for further testing
                    self.created_bot_id = created_bot.get("id")
                    
                    # Test PUT update
                    if self.created_bot_id:
                        print(f"\n   üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PUT /api/admin/bots/{self.created_bot_id}...")
                        update_data = {
                            "name": f"UpdatedBot_FieldsRemoval_{int(datetime.now().timestamp())}",
                            "min_bet_amount": 2.0,
                            "max_bet_amount": 200.0,
                            "win_rate": 60.0
                        }
                        
                        async with self.session.put(f"{BACKEND_URL}/admin/bots/{self.created_bot_id}", 
                                                  json=update_data, headers=self.get_auth_headers()) as put_response:
                            if put_response.status == 200:
                                put_data = await put_response.json()
                                updated_bot = put_data.get("bot", {})
                                
                                has_can_accept_bets = "can_accept_bets" in updated_bot
                                has_can_play_with_bots = "can_play_with_bots" in updated_bot
                                
                                print(f"      ‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                                print(f"      üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
                                print(f"         - can_accept_bets: {'‚ùå –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢' if has_can_accept_bets else '‚úÖ –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
                                print(f"         - can_play_with_bots: {'‚ùå –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢' if has_can_play_with_bots else '‚úÖ –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
                                
                                if not has_can_accept_bets and not has_can_play_with_bots:
                                    print(f"      ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è")
                                    self.test_results.append(("PUT /api/admin/bots/{bot_id} - –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π", True))
                                else:
                                    print(f"      ‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç –≤—Å–µ –µ—â–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è")
                                    self.test_results.append(("PUT /api/admin/bots/{bot_id} - –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π", False))
                            else:
                                error_text = await put_response.text()
                                print(f"      ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞: {put_response.status} - {error_text}")
                                self.test_results.append(("PUT /api/admin/bots/{bot_id} - –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π", False))
                else:
                    error_text = await response.text()
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {response.status} - {error_text}")
                    self.test_results.append(("POST /api/admin/bots/create-regular - –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π", False))
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
            self.test_results.append(("POST /api/admin/bots/create-regular - –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π", False))
            
        # 3. Test Human-bots still have their fields
        print("\n3Ô∏è‚É£ TESTING GET /api/admin/human-bots - –ø—Ä–æ–≤–µ—Ä–∫–∞ Human-–±–æ—Ç–æ–≤...")
        try:
            async with self.session.get(f"{BACKEND_URL}/admin/human-bots", headers=self.get_auth_headers()) as response:
                if response.status == 200:
                    data = await response.json()
                    bots = data.get("bots", [])
                    
                    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(bots)} Human-–±–æ—Ç–æ–≤")
                    
                    if bots:
                        # Check first few human-bots for required fields
                        missing_fields_count = 0
                        for i, bot in enumerate(bots[:3]):  # Check first 3 bots
                            has_can_play_with_other_bots = "can_play_with_other_bots" in bot
                            has_can_play_with_players = "can_play_with_players" in bot
                            
                            if not has_can_play_with_other_bots or not has_can_play_with_players:
                                missing_fields_count += 1
                                
                            print(f"   üë• Human-–±–æ—Ç {i+1} ({bot.get('name', 'Unknown')}):")
                            print(f"      - can_play_with_other_bots: {'‚úÖ –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢' if has_can_play_with_other_bots else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
                            print(f"      - can_play_with_players: {'‚úÖ –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢' if has_can_play_with_players else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
                            if has_can_play_with_other_bots and has_can_play_with_players:
                                print(f"      - –ó–Ω–∞—á–µ–Ω–∏—è: other_bots={bot.get('can_play_with_other_bots')}, players={bot.get('can_play_with_players')}")
                        
                        if missing_fields_count == 0:
                            print(f"   ‚úÖ –í—Å–µ Human-–±–æ—Ç—ã –°–û–•–†–ê–ù–ò–õ–ò –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è")
                            self.test_results.append(("GET /api/admin/human-bots - –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç", True))
                        else:
                            print(f"   ‚ùå {missing_fields_count} Human-–±–æ—Ç–æ–≤ –ù–ï –∏–º–µ—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è")
                            self.test_results.append(("GET /api/admin/human-bots - –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç", False))
                    else:
                        print("   ‚ö†Ô∏è Human-–±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        self.test_results.append(("GET /api/admin/human-bots - –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç", "NA"))
                else:
                    error_text = await response.text()
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Human-–±–æ—Ç–æ–≤: {response.status} - {error_text}")
                    self.test_results.append(("GET /api/admin/human-bots - –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç", False))
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Human-–±–æ—Ç–æ–≤: {e}")
            self.test_results.append(("GET /api/admin/human-bots - –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç", False))
            
        # 4. Test system functionality
        print("\n4Ô∏è‚É£ TESTING SYSTEM FUNCTIONALITY - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        # Test regular bot games
        try:
            async with self.session.get(f"{BACKEND_URL}/bots/active-games", headers=self.get_auth_headers()) as response:
                if response.status == 200:
                    data = await response.json()
                    # Handle both list and dict response formats
                    if isinstance(data, list):
                        active_games = data
                    else:
                        active_games = data.get("games", [])
                    
                    print(f"   üéÆ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤: {len(active_games)}")
                    
                    if len(active_games) > 0:
                        print(f"   ‚úÖ –û–±—ã—á–Ω—ã–µ –±–æ—Ç—ã –ü–†–û–î–û–õ–ñ–ê–Æ–¢ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–≥—Ä—ã")
                        self.test_results.append(("–û–±—ã—á–Ω—ã–µ –±–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç –∏–≥—Ä—ã", True))
                    else:
                        print(f"   ‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                        self.test_results.append(("–û–±—ã—á–Ω—ã–µ –±–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç –∏–≥—Ä—ã", "NA"))
                else:
                    error_text = await response.text()
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {response.status} - {error_text}")
                    self.test_results.append(("–û–±—ã—á–Ω—ã–µ –±–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç –∏–≥—Ä—ã", False))
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {e}")
            self.test_results.append(("–û–±—ã—á–Ω—ã–µ –±–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç –∏–≥—Ä—ã", False))
            
        # Test bot automation
        try:
            async with self.session.get(f"{BACKEND_URL}/admin/bots", headers=self.get_auth_headers()) as response:
                if response.status == 200:
                    data = await response.json()
                    bots = data.get("bots", [])
                    
                    active_bots = [bot for bot in bots if bot.get("is_active", False)]
                    bots_with_active_bets = [bot for bot in active_bots if bot.get("active_bets", 0) > 0]
                    
                    print(f"   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:")
                    print(f"      - –í—Å–µ–≥–æ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤: {len(bots)}")
                    print(f"      - –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {len(active_bots)}")
                    print(f"      - –ë–æ—Ç–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏: {len(bots_with_active_bets)}")
                    
                    if len(bots_with_active_bets) > 0:
                        print(f"   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –†–ê–ë–û–¢–ê–ï–¢")
                        self.test_results.append(("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", True))
                    else:
                        print(f"   ‚ö†Ô∏è –ë–æ—Ç—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ (–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)")
                        self.test_results.append(("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", "NA"))
                else:
                    error_text = await response.text()
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {response.status} - {error_text}")
                    self.test_results.append(("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", False))
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            self.test_results.append(("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", False))
            
    async def cleanup_test_data(self):
        """Clean up test data"""
        print("\nüßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•...")
        
        if hasattr(self, 'created_bot_id') and self.created_bot_id:
            try:
                async with self.session.delete(f"{BACKEND_URL}/admin/bots/{self.created_bot_id}", 
                                             headers=self.get_auth_headers()) as response:
                    if response.status == 200:
                        print(f"   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç {self.created_bot_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç {self.created_bot_id}: {response.status}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞: {e}")
                
    def print_summary(self):
        """Print test summary"""
        print("\n" + "="*80)
        print("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ –£–î–ê–õ–ï–ù–ò–Ø –ü–û–õ–ï–ô –ë–û–¢–û–í")
        print("="*80)
        
        passed = sum(1 for _, result in self.test_results if result is True)
        failed = sum(1 for _, result in self.test_results if result is False)
        na = sum(1 for _, result in self.test_results if result == "NA")
        total = len(self.test_results)
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–û–í:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        print(f"   ‚ö†Ô∏è –ù/–î: {na}")
        
        if total > 0:
            success_rate = (passed / (total - na)) * 100 if (total - na) > 0 else 0
            print(f"   üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for test_name, result in self.test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result is True else "‚ùå –ü–†–û–í–ê–õ–ï–ù" if result is False else "‚ö†Ô∏è –ù/–î"
            print(f"   {status} - {test_name}")
            
        # Overall assessment
        print("\n" + "="*80)
        print("üèÜ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:")
        if failed == 0:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –±–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print("‚úÖ –ü–æ–ª—è can_accept_bets –∏ can_play_with_bots —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤")
            print("‚úÖ Human-–±–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Å–≤–æ–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è")
            print("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –Ω–µ –Ω–∞—Ä—É—à–µ–Ω–∞")
        elif failed <= 2:
            print("‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –í –û–°–ù–û–í–ù–û–ú –†–ê–ë–û–¢–ê–ï–¢ —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏.")
            print("üîß –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –±–æ—Ç–æ–≤ –≤ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.")
        else:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´.")
            print("üö® –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –±–æ—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è.")
        print("="*80)
        
    async def run_all_tests(self):
        """Run all tests"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –ü–û–õ–ï–ô –ë–û–¢–û–í")
        print("üá∑üá∫ Russian Review: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π can_accept_bets –∏ can_play_with_bots")
        print("="*80)
        
        await self.setup()
        
        try:
            await self.test_comprehensive_bot_fields_removal()
            await self.cleanup_test_data()
        finally:
            await self.cleanup()
            
        self.print_summary()

async def main():
    """Main function"""
    tester = FinalBotFieldsTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())