#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤ (–±–µ–∑ MongoDB)
"""

import asyncio
from datetime import datetime

class MockDB:
    """Mock –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
    def __init__(self):
        self.bots = {}
        self.games = {}
        self.accumulators = {}
    
    async def find_bots(self, query):
        """–ü–æ–∏—Å–∫ –±–æ—Ç–æ–≤"""
        result = []
        for bot_id, bot in self.bots.items():
            match = True
            for key, value in query.items():
                if bot.get(key) != value:
                    match = False
                    break
            if match:
                result.append(bot)
        return result
    
    async def count_games(self, bot_id, statuses):
        """–ü–æ–¥—Å—á—ë—Ç –∏–≥—Ä"""
        games = self.games.get(bot_id, [])
        return len([g for g in games if g.get("status") in statuses])
    
    async def create_games(self, bot_id, count):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä"""
        if bot_id not in self.games:
            self.games[bot_id] = []
        
        for i in range(count):
            game = {
                "id": f"game_{bot_id}_{i}",
                "creator_id": bot_id,
                "status": "WAITING",
                "bet_amount": 50,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞
                "metadata": {"intended_result": "win" if i < 7 else ("loss" if i < 13 else "draw")},
                "created_at": datetime.utcnow()
            }
            self.games[bot_id].append(game)
        
        return count

async def simulate_maintain_all_bots_active_bets(mock_db):
    """–°–∏–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ maintain_all_bots_active_bets"""
    print("ü§ñ –°–ò–ú–£–õ–Ø–¶–ò–Ø maintain_all_bots_active_bets()")
    print("-" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
    active_bots = await mock_db.find_bots({
        "is_active": True,
        "bot_type": "REGULAR"
    })
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {len(active_bots)}")
    
    if not active_bots:
        print("   üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤")
        return False
    
    cycles_created = 0
    
    for bot in active_bots:
        bot_id = bot["id"]
        bot_name = bot["name"]
        cycle_games_target = bot.get("cycle_games", 16)
        
        print(f"\n   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞: {bot_name}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–≥—Ä—ã
        total_games = await mock_db.count_games(bot_id, ["WAITING", "ACTIVE", "COMPLETED"])
        active_games = await mock_db.count_games(bot_id, ["WAITING", "ACTIVE"])
        completed_games = await mock_db.count_games(bot_id, ["COMPLETED"])
        
        print(f"      –ò–≥—Ä—ã: total={total_games}, active={active_games}, completed={completed_games}, target={cycle_games_target}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏—è
        cycle_fully_completed = (
            total_games >= cycle_games_target and 
            active_games == 0 and 
            completed_games > 0
        )
        needs_initial_cycle = total_games == 0
        
        print(f"      –£—Å–ª–æ–≤–∏—è: needs_initial_cycle={needs_initial_cycle}, cycle_fully_completed={cycle_fully_completed}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–ò–ù–Ø–¢–ò–Ø –†–ï–®–ï–ù–ò–ô
        if needs_initial_cycle:
            # –ù–µ—Ç –∏–≥—Ä –≤–æ–æ–±—â–µ - —Å–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç has_completed_cycles)
            print(f"      üéØ –†–µ—à–µ–Ω–∏–µ: –°–û–ó–î–ê–¢–¨ –ù–û–í–´–ô –¶–ò–ö–õ")
            
            # –°–∏–º—É–ª—è—Ü–∏—è create_full_bot_cycle
            created_count = await mock_db.create_games(bot_id, cycle_games_target)
            
            if created_count == cycle_games_target:
                print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω —Ü–∏–∫–ª: {created_count} —Å—Ç–∞–≤–æ–∫")
                cycles_created += 1
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–∞")
        
        elif cycle_fully_completed:
            print(f"      üèÅ –†–µ—à–µ–Ω–∏–µ: –ó–ê–í–ï–†–®–ò–¢–¨ –¶–ò–ö–õ")
        
        elif active_games > 0:
            print(f"      üéÆ –†–µ—à–µ–Ω–∏–µ: –ñ–î–ê–¢–¨ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä")
        
        else:
            print(f"      ‚ùì –†–µ—à–µ–Ω–∏–µ: –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï")
    
    return cycles_created > 0

async def test_bot_creation_and_cycle_startup():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞"""
    print("üß™ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ë–û–¢–ê –ò –ó–ê–ü–£–°–ö–ê –¶–ò–ö–õ–ê")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º mock –ë–î
    mock_db = MockDB()
    
    # 1. –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
    print("1Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ë–û–¢–ê:")
    
    test_bot = {
        "id": "test_bot_001",
        "name": "TestBot",
        "bot_type": "REGULAR",
        "is_active": True,
        "min_bet_amount": 1.0,
        "max_bet_amount": 100.0,
        "cycle_games": 16,
        "wins_percentage": 44.0,
        "losses_percentage": 36.0,
        "draws_percentage": 20.0,
        "wins_count": 7,
        "losses_count": 6,
        "draws_count": 3,
        "pause_between_cycles": 5,
        "has_completed_cycles": False,
        "created_at": datetime.utcnow()
    }
    
    mock_db.bots[test_bot["id"]] = test_bot
    
    print(f"   ‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω: {test_bot['name']}")
    print(f"   ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: {test_bot['is_active']}")
    print(f"   ‚úÖ –¢–∏–ø: {test_bot['bot_type']}")
    print(f"   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {test_bot['min_bet_amount']}-{test_bot['max_bet_amount']}, {test_bot['cycle_games']} –∏–≥—Ä")
    
    # 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
    print(f"\n2Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò:")
    
    cycle_created = await simulate_maintain_all_bots_active_bets(mock_db)
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
    
    if cycle_created:
        games = mock_db.games.get(test_bot["id"], [])
        print(f"   ‚úÖ –¶–∏–∫–ª —Å–æ–∑–¥–∞–Ω!")
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏–≥—Ä: {len(games)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        results_count = {}
        for game in games:
            result = game.get("metadata", {}).get("intended_result", "unknown")
            results_count[result] = results_count.get(result, 0) + 1
        
        print(f"   ‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {results_count}")
        
        expected = {"win": 7, "loss": 6, "draw": 3}
        correct = all(results_count.get(k, 0) == v for k, v in expected.items())
        
        if correct:
            print("   ‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ö–û–†–†–ï–ö–¢–ù–û!")
            return "SUCCESS"
        else:
            print("   ‚ùå –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ï!")
            return "INCORRECT_DISTRIBUTION"
    else:
        print(f"   ‚ùå –¶–∏–∫–ª –ù–ï —Å–æ–∑–¥–∞–Ω!")
        return "CYCLE_NOT_CREATED"

def analyze_potential_issues():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–• –ü–†–û–ë–õ–ï–ú")
    print("=" * 60)
    
    issues = [
        {
            "category": "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "problems": [
                "MongoDB –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω",
                "–û—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ localhost:27017",
                "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î"
            ]
        },
        {
            "category": "‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
            "problems": [
                "bot_automation_loop() –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞",
                "–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ startup —Å–æ–±—ã—Ç–∏—è—Ö",
                "–û—à–∏–±–∫–∏ –≤ maintain_all_bots_active_bets()"
            ]
        },
        {
            "category": "ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤",
            "problems": [
                "–ë–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —Å is_active = False",
                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π bot_type (–Ω–µ REGULAR)",
                "–û—à–∏–±–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–æ–≤"
            ]
        },
        {
            "category": "üéØ –õ–æ–≥–∏–∫–∞ —Ü–∏–∫–ª–æ–≤",
            "problems": [
                "–û—à–∏–±–∫–∏ –≤ create_full_bot_cycle()",
                "–ü—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å—Ç–∞–≤–æ–∫",
                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤"
            ]
        }
    ]
    
    for issue_cat in issues:
        print(f"\n{issue_cat['category']}:")
        for problem in issue_cat['problems']:
            print(f"   ‚ùå {problem}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ—á–µ–º—É –Ω–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è —Ü–∏–∫–ª—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–æ–≤?")
    print("=" * 70)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    try:
        result = asyncio.run(test_bot_creation_and_cycle_startup())
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –°–ò–ú–£–õ–Ø–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ê:")
        
        if result == "SUCCESS":
            print("‚úÖ –õ–û–ì–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø –¶–ò–ö–õ–û–í –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (MongoDB, startup)")
        elif result == "CYCLE_NOT_CREATED":
            print("‚ùå –¶–ò–ö–õ–´ –ù–ï –°–û–ó–î–ê–Æ–¢–°–Ø!")
            print("üîß –ü—Ä–æ–±–ª–µ–º–∞ –≤ –ª–æ–≥–∏–∫–µ maintain_all_bots_active_bets()")
        elif result == "INCORRECT_DISTRIBUTION":
            print("‚ö†Ô∏è –¶–ò–ö–õ–´ –°–û–ó–î–ê–Æ–¢–°–Ø, –ù–û –° –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ú –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï–ú!")
            print("üîß –ü—Ä–æ–±–ª–µ–º–∞ –≤ generate_cycle_bets_natural_distribution()")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
        analyze_potential_issues()
        
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ MongoDB")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
        print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MONGODB_SETUP_AND_DIAGNOSIS.md –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")

if __name__ == "__main__":
    main()