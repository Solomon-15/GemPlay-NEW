#!/usr/bin/env python3
import asyncio
import math
from typing import List, Dict

# –¢–µ—Å—Ç –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤/–¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫ —Ü–∏–∫–ª–∞
# –£—Å–ª–æ–≤–∏—è: –±–∞–∑–∞ 800, –¥–∏–∞–ø–∞–∑–æ–Ω 1‚Äì100, N=16, ROI=10% (W% 39.60 / L% 32.40 / D% 28.00)

try:
	from backend.server_temp import generate_cycle_bets_natural_distribution
except Exception as e:
	print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç–∞–≤–æ–∫: {e}")
	raise


async def run_once(run_id: int) -> bool:
	bot_id = f"test_bot_{run_id}"
	min_bet = 1
	max_bet = 100
	cycle_games = 16
	wins_count = 6
	losses_count = 6
	draws_count = 4
	wins_pct = 39.60
	losses_pct = 32.40
	draws_pct = 28.00

	bets = await generate_cycle_bets_natural_distribution(
		bot_id=bot_id,
		min_bet=min_bet,
		max_bet=max_bet,
		cycle_games=cycle_games,
		wins_count=wins_count,
		losses_count=losses_count,
		draws_count=draws_count,
		wins_percentage=wins_pct,
		losses_percentage=losses_pct,
		draws_percentage=draws_pct,
	)

	# –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	assert isinstance(bets, list), "–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
	assert len(bets) == cycle_games, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {cycle_games}, –∞ –Ω–µ {len(bets)}"

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ (–Ω–µ—Ç —É–¥–≤–æ–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫)
	indices = [b.get("index") for b in bets]
	assert len(set(indices)) == cycle_games, "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–∞–≤–æ–∫ (–¥–≤–æ–π–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ)"
	assert min(indices) == 0 and max(indices) == cycle_games - 1, "–ò–Ω–¥–µ–∫—Å—ã —Å—Ç–∞–≤–æ–∫ –¥–æ–ª–∂–Ω—ã –ø–æ–∫—Ä—ã–≤–∞—Ç—å 0..N-1"

	# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å—Ö–æ–¥—É
	wins = [b for b in bets if b.get("result") == "win"]
	losses = [b for b in bets if b.get("result") == "loss"]
	draws = [b for b in bets if b.get("result") == "draw"]

	# –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä
	assert len(wins) == wins_count, f"–û–∂–∏–¥–∞–ª–æ—Å—å {wins_count} –ø–æ–±–µ–¥, –ø–æ–ª—É—á–µ–Ω–æ {len(wins)}"
	assert len(losses) == losses_count, f"–û–∂–∏–¥–∞–ª–æ—Å—å {losses_count} –ø–æ—Ä–∞–∂–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {len(losses)}"
	assert len(draws) == draws_count, f"–û–∂–∏–¥–∞–ª–æ—Å—å {draws_count} –Ω–∏—á—å–∏—Ö, –ø–æ–ª—É—á–µ–Ω–æ {len(draws)}"

	# –°—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–≤ –≥–µ–º–∞—Ö)
	wins_sum = sum(int(b["amount"]) for b in wins)
	losses_sum = sum(int(b["amount"]) for b in losses)
	draws_sum = sum(int(b["amount"]) for b in draws)
	total_sum = wins_sum + losses_sum + draws_sum

	# –ë–∞–∑–∞ 800: –æ–∂–∏–¥–∞–µ–º —Ä–æ–≤–Ω–æ 800 (–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –±–∞–∑–∞ –¥–ª—è 1‚Äì100, 16 –∏–≥—Ä)
	assert total_sum == 800, f"–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 800, –∞ –Ω–µ {total_sum}"

	# –ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª –∏ –ø—Ä–∏–±—ã–ª—å
	active_pool = wins_sum + losses_sum
	profit = wins_sum - losses_sum
	roi_active = (profit / active_pool * 100) if active_pool > 0 else 0.0

	# –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ñ–æ—Ä–º—É–ª
	assert active_pool == total_sum - draws_sum, "–ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å W+L"
	# –î–æ–ø—É—Å–∫ –ø–æ ROI –∏–∑-–∑–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏: ¬±0.2%
	assert abs(roi_active - 10.07) <= 0.2, f"ROI_active –≤–Ω–µ –¥–æ–ø—É—Å–∫–∞: {roi_active:.2f}% (–æ–∂–∏–¥–∞–ª–æ—Å—å –æ–∫–æ–ª–æ 10.07%)"

	print(f"‚úÖ –ü—Ä–æ–≥–æ–Ω {run_id}: W={wins_sum}, L={losses_sum}, D={draws_sum}, Œ£={total_sum}, –ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª={active_pool}, –ü—Ä–∏–±—ã–ª—å={profit}, ROI={roi_active:.2f}%")
	return True


async def main():
	print("üöÄ –¢–µ—Å—Ç –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤/–¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–±–∞–∑–∞ 800, ROI 10%, N=16)")
	ok = True
	for i in range(1, 4):
		try:
			res = await run_once(i)
			ok = ok and res
		except AssertionError as e:
			print(f"‚ùå –ü—Ä–æ–≥–æ–Ω {i} –Ω–µ –ø—Ä–æ—à—ë–ª: {e}")
			ok = False
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≥–æ–Ω–µ {i}: {e}")
			ok = False
	
	if ok:
		print("\nüéâ –í—Å–µ 3 –ø—Ä–æ–≥–æ–Ω–∞ –ø—Ä–æ—à–ª–∏. –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤/–¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
	else:
		print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.")


if __name__ == "__main__":
	asyncio.run(main())