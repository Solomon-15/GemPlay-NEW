#!/usr/bin/env python3
"""
–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import os
import re

def check_backend_fixes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ backend –∫–æ–¥–µ"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –í BACKEND")
    print("=" * 50)
    
    server_file = "/workspace/backend/server.py"
    
    if not os.path.exists(server_file):
        print("‚ùå –§–∞–π–ª server.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(server_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    checks = [
        {
            "name": "–§—É–Ω–∫—Ü–∏—è complete_bot_cycle —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            "pattern": r"async def complete_bot_cycle",
            "required": True
        },
        {
            "name": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Å—É–º–º –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä",
            "pattern": r"wins_sum_agg.*COMPLETED.*winner_id.*bot_id",
            "required": True
        },
        {
            "name": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ roi_active –≤–º–µ—Å—Ç–æ roi_percent",
            "pattern": r'"roi_active"',
            "required": True
        },
        {
            "name": "–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 809",
            "pattern": r"exact_cycle_total = 809",
            "required": True
        },
        {
            "name": "–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ half-up",
            "pattern": r"int\(.*\+ 0\.5\)|half_up_round",
            "required": True
        },
        {
            "name": "–§—É–Ω–∫—Ü–∏—è generate_cycle_bets_natural_distribution",
            "pattern": r"async def generate_cycle_bets_natural_distribution",
            "required": True
        },
        {
            "name": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (44/36/20)",
            "pattern": r"wins_percentage.*44|44.*wins_percentage",
            "required": True
        }
    ]
    
    results = {}
    
    for check in checks:
        found = bool(re.search(check["pattern"], content, re.DOTALL | re.IGNORECASE))
        status = "‚úÖ" if found else "‚ùå"
        print(f"   {status} {check['name']}")
        
        if not found and check["required"]:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            similar_patterns = [
                check["pattern"].replace(".*", ""),
                check["pattern"].replace(r"\(", "(").replace(r"\)", ")")
            ]
            
            for pattern in similar_patterns:
                if pattern in content:
                    print(f"      üîç –ù–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π –∫–æ–¥: {pattern}")
                    break
        
        results[check["name"]] = found
    
    return results

def check_frontend_integration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å frontend"""
    print(f"\nüé® –ü–†–û–í–ï–†–ö–ê FRONTEND –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 50)
    
    files_to_check = [
        "/workspace/frontend/src/components/RegularBotsManagement.js",
        "/workspace/frontend/src/components/ProfitAdmin.js"
    ]
    
    results = {}
    
    for file_path in files_to_check:
        filename = os.path.basename(file_path)
        print(f"\nüìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º {filename}:")
        
        if not os.path.exists(file_path):
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            results[filename] = {"exists": False}
            continue
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è RegularBotsManagement.js
        if "RegularBotsManagement" in filename:
            checks = [
                {"name": "–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤", "pattern": r"–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤|completed-cycles"},
                {"name": "ROI –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "pattern": r"roi_active|ROI"},
                {"name": "–û–±—â–∞—è —Å—É–º–º–∞ —Ü–∏–∫–ª–∞", "pattern": r"exact_cycle_total|–û–±—â–∞—è —Å—É–º–º–∞ —Ü–∏–∫–ª–∞"},
                {"name": "API –≤—ã–∑–æ–≤—ã –±–æ—Ç–æ–≤", "pattern": r"/admin/bots.*cycles|/admin/profit"}
            ]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è ProfitAdmin.js
        elif "ProfitAdmin" in filename:
            checks = [
                {"name": "–î–æ—Ö–æ–¥ –æ—Ç –±–æ—Ç–æ–≤", "pattern": r"–î–æ—Ö–æ–¥ –æ—Ç –±–æ—Ç–æ–≤|bot.*revenue"},
                {"name": "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–±—ã–ª–∏", "pattern": r"–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–±—ã–ª–∏|profit.*history"},
                {"name": "API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", "pattern": r"/admin/profit.*bot"}
            ]
        else:
            checks = []
        
        file_results = {}
        for check in checks:
            found = bool(re.search(check["pattern"], content, re.IGNORECASE))
            status = "‚úÖ" if found else "‚ùå"
            print(f"   {status} {check['name']}")
            file_results[check["name"]] = found
        
        results[filename] = {"exists": True, "checks": file_results}
    
    return results

def verify_data_flow():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print(f"\nüîÑ –ü–†–û–í–ï–†–ö–ê –ü–û–¢–û–ö–ê –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    flow_steps = [
        {
            "step": "1. –°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏–∫–ª–∞",
            "function": "create_full_bot_cycle",
            "description": "–°–æ–∑–¥–∞—ë—Ç –∏–≥—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å—Ç–∞–≤–æ–∫"
        },
        {
            "step": "2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫",
            "function": "generate_cycle_bets_natural_distribution",
            "description": "–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º half-up"
        },
        {
            "step": "3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä",
            "function": "game completion logic",
            "description": "–ò–≥—Ä—ã –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ intended_result"
        },
        {
            "step": "4. –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
            "function": "bot_profit_accumulators",
            "description": "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–∞–º"
        },
        {
            "step": "5. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞",
            "function": "complete_bot_cycle",
            "description": "–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –∏ —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ completed_cycles"
        },
        {
            "step": "6. API –æ—Ç–¥–∞—á–∞",
            "function": "get_bot_completed_cycles",
            "description": "API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"
        },
        {
            "step": "7. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            "function": "Frontend components",
            "description": "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ '–î–æ—Ö–æ–¥ –æ—Ç –±–æ—Ç–æ–≤'"
        }
    ]
    
    for step_info in flow_steps:
        print(f"\nüìã {step_info['step']}")
        print(f"   –§—É–Ω–∫—Ü–∏—è: {step_info['function']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {step_info['description']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ–¥–µ
        if step_info['function'] not in ['game completion logic', 'Frontend components']:
            server_file = "/workspace/backend/server.py"
            if os.path.exists(server_file):
                with open(server_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                if step_info['function'] in content:
                    print(f"   ‚úÖ –§—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–¥–µ")
                else:
                    print(f"   ‚ùå –§—É–Ω–∫—Ü–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–¥–µ")
            else:
                print(f"   ‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (—Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        else:
            print(f"   ‚ÑπÔ∏è  –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é")

def generate_test_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    backend_results = check_backend_fixes()
    frontend_results = check_frontend_integration()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    verify_data_flow()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    backend_passed = sum(1 for result in backend_results.values() if result)
    backend_total = len(backend_results)
    
    frontend_files = sum(1 for result in frontend_results.values() if result.get("exists"))
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   Backend –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {backend_passed}/{backend_total} ({'‚úÖ' if backend_passed == backend_total else '‚ùå'})")
    print(f"   Frontend —Ñ–∞–π–ª—ã: {frontend_files}/2 ({'‚úÖ' if frontend_files == 2 else '‚ùå'})")
    
    # –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    backend_ready = backend_passed >= backend_total * 0.8
    frontend_ready = frontend_files >= 1
    
    overall_status = backend_ready and frontend_ready
    
    print(f"\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´:")
    print(f"   Backend: {'‚úÖ –ì–æ—Ç–æ–≤' if backend_ready else '‚ùå –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}")
    print(f"   Frontend: {'‚úÖ –ì–æ—Ç–æ–≤' if frontend_ready else '‚ùå –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}")
    print(f"   –û–±—â–∞—è: {'‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é' if overall_status else '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞'}")
    
    print(f"\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    if overall_status:
        print("   1. ‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä")
        print("   2. ‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend")
        print("   3. ‚úÖ –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("   4. ‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ '–î–æ—Ö–æ–¥ –æ—Ç –±–æ—Ç–æ–≤'")
        print("   5. ‚úÖ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 809/647/65/10.05%")
    else:
        if not backend_ready:
            print("   1. ‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ backend/server.py")
        if not frontend_ready:
            print("   2. ‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        print("   3. ‚ùå –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –°–ò–°–¢–ï–ú–´ –ë–û–¢–û–í")
    print("üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ ‚Üí —Ä–∞—Å—á—ë—Ç ‚Üí –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    print("=" * 60)
    
    generate_test_report()
    
    print(f"\n" + "=" * 60)
    print("‚ú® –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)

if __name__ == "__main__":
    main()