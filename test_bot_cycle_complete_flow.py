#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤ –∏ —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
–û—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–∞ –¥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ "–î–æ—Ö–æ–¥ –æ—Ç –±–æ—Ç–æ–≤"
"""

import asyncio
import sys
import os
import json
import math
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append('/workspace/backend')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
try:
    from server import (
        db, create_full_bot_cycle, complete_bot_cycle,
        generate_cycle_bets_natural_distribution
    )
    print("‚úÖ –ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–¢–µ—Å—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    db = None

class BotCycleFlowTester:
    def __init__(self):
        self.test_results = {
            "cycle_creation": None,
            "bet_distribution": None,
            "cycle_execution": None,
            "cycle_completion": None,
            "profit_calculation": None,
            "api_integration": None,
            "final_verification": None
        }
        
    async def run_complete_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∞"""
        print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢: –ü–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤")
        print("=" * 80)
        
        try:
            # 1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–∞
            await self.test_cycle_creation()
            
            # 2. –¢–µ—Å—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫
            await self.test_bet_distribution()
            
            # 3. –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞ (—Å–∏–º—É–ª—è—Ü–∏—è –∏–≥—Ä)
            await self.test_cycle_execution()
            
            # 4. –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞
            await self.test_cycle_completion()
            
            # 5. –¢–µ—Å—Ç —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
            await self.test_profit_calculation()
            
            # 6. –¢–µ—Å—Ç API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            await self.test_api_integration()
            
            # 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
            await self.test_final_verification()
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
            self.generate_final_report()
            
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            import traceback
            traceback.print_exc()
    
    async def test_cycle_creation(self):
        """–¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞"""
        print("\nüìã –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞")
        print("-" * 50)
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
        test_bot = {
            "id": "test_bot_001",
            "name": "TestBot ROI",
            "cycle_games": 16,
            "min_bet_amount": 1.0,
            "max_bet_amount": 100.0,
            "wins_percentage": 44.0,
            "losses_percentage": 36.0,
            "draws_percentage": 20.0,
            "wins_count": 7,
            "losses_count": 6,
            "draws_count": 3
        }
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–∞
            result = await create_full_bot_cycle(test_bot)
            
            if result:
                print("‚úÖ –¶–∏–∫–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –ë–î
                games = await db.games.find({"creator_id": test_bot["id"]}).to_list(None)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏–≥—Ä: {len(games)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
                intended_results = {}
                for game in games:
                    result = game.get("metadata", {}).get("intended_result", "unknown")
                    intended_results[result] = intended_results.get(result, 0) + 1
                
                print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {intended_results}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—ã —Å—Ç–∞–≤–æ–∫
                total_bets = sum(game.get("bet_amount", 0) for game in games)
                print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–æ–∫: {total_bets}")
                
                self.test_results["cycle_creation"] = {
                    "status": "SUCCESS",
                    "games_created": len(games),
                    "total_amount": total_bets,
                    "distribution": intended_results
                }
                
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–∞")
                self.test_results["cycle_creation"] = {"status": "FAILED", "error": "Creation failed"}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["cycle_creation"] = {"status": "ERROR", "error": str(e)}
    
    async def test_bet_distribution(self):
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫"""
        print("\nüéØ –¢–ï–°–¢ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        print("-" * 50)
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫
            bets = await generate_cycle_bets_natural_distribution(
                bot_id="test_bot_001",
                min_bet=1.0,
                max_bet=100.0,
                cycle_games=16,
                wins_count=7,
                losses_count=6,
                draws_count=3,
                wins_percentage=44.0,
                losses_percentage=36.0,
                draws_percentage=20.0
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            wins_bets = [bet for bet in bets if bet["result"] == "win"]
            losses_bets = [bet for bet in bets if bet["result"] == "loss"]
            draws_bets = [bet for bet in bets if bet["result"] == "draw"]
            
            wins_sum = sum(bet["amount"] for bet in wins_bets)
            losses_sum = sum(bet["amount"] for bet in losses_bets)
            draws_sum = sum(bet["amount"] for bet in draws_bets)
            
            total_sum = wins_sum + losses_sum + draws_sum
            active_pool = wins_sum + losses_sum
            profit = wins_sum - losses_sum
            roi = (profit / active_pool * 100) if active_pool > 0 else 0
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:")
            print(f"   –ü–æ–±–µ–¥—ã: {len(wins_bets)} —Å—Ç–∞–≤–æ–∫, —Å—É–º–º–∞: {wins_sum}")
            print(f"   –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {len(losses_bets)} —Å—Ç–∞–≤–æ–∫, —Å—É–º–º–∞: {losses_sum}")
            print(f"   –ù–∏—á—å–∏: {len(draws_bets)} —Å—Ç–∞–≤–æ–∫, —Å—É–º–º–∞: {draws_sum}")
            print(f"   –û–±—â–∞—è —Å—É–º–º–∞: {total_sum}")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª: {active_pool}")
            print(f"   –ü—Ä–∏–±—ã–ª—å: {profit}")
            print(f"   ROI: {roi:.2f}%")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            expected = {
                "total": 809,
                "wins": 356,
                "losses": 291,
                "draws": 162,
                "active_pool": 647,
                "profit": 65,
                "roi": 10.05
            }
            
            success = (
                total_sum == expected["total"] and
                wins_sum == expected["wins"] and
                losses_sum == expected["losses"] and
                draws_sum == expected["draws"]
            )
            
            if success:
                print("‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º!")
            else:
                print("‚ùå –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º!")
                print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: W={expected['wins']}, L={expected['losses']}, D={expected['draws']}")
                print(f"   –ü–æ–ª—É—á–µ–Ω–æ: W={wins_sum}, L={losses_sum}, D={draws_sum}")
            
            self.test_results["bet_distribution"] = {
                "status": "SUCCESS" if success else "FAILED",
                "actual": {
                    "wins": wins_sum,
                    "losses": losses_sum,
                    "draws": draws_sum,
                    "total": total_sum,
                    "roi": roi
                },
                "expected": expected,
                "matches_expected": success
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["bet_distribution"] = {"status": "ERROR", "error": str(e)}
    
    async def test_cycle_execution(self):
        """–¢–µ—Å—Ç 3: –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞"""
        print("\nüéÆ –¢–ï–°–¢ 3: –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞")
        print("-" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–≥—Ä—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
            games = await db.games.find({"creator_id": "test_bot_001"}).to_list(None)
            
            if not games:
                print("‚ùå –ù–µ—Ç –∏–≥—Ä –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏")
                self.test_results["cycle_execution"] = {"status": "FAILED", "error": "No games found"}
                return
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä —Å–æ–≥–ª–∞—Å–Ω–æ intended_result
            completed_games = 0
            wins = 0
            losses = 0
            draws = 0
            
            for game in games:
                intended_result = game.get("metadata", {}).get("intended_result")
                game_id = game["id"]
                
                if intended_result == "win":
                    # –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª
                    await db.games.update_one(
                        {"id": game_id},
                        {"$set": {
                            "status": "COMPLETED",
                            "winner_id": "test_bot_001",
                            "completed_at": datetime.utcnow()
                        }}
                    )
                    wins += 1
                elif intended_result == "loss":
                    # –ë–æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–ª
                    await db.games.update_one(
                        {"id": game_id},
                        {"$set": {
                            "status": "COMPLETED",
                            "winner_id": "opponent_123",  # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π ID
                            "completed_at": datetime.utcnow()
                        }}
                    )
                    losses += 1
                elif intended_result == "draw":
                    # –ù–∏—á—å—è
                    await db.games.update_one(
                        {"id": game_id},
                        {"$set": {
                            "status": "COMPLETED",
                            "winner_id": None,
                            "completed_at": datetime.utcnow()
                        }}
                    )
                    draws += 1
                
                completed_games += 1
            
            print(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∏–≥—Ä: {completed_games}")
            print(f"   –ü–æ–±–µ–¥—ã: {wins}")
            print(f"   –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {losses}")
            print(f"   –ù–∏—á—å–∏: {draws}")
            
            self.test_results["cycle_execution"] = {
                "status": "SUCCESS",
                "completed_games": completed_games,
                "wins": wins,
                "losses": losses,
                "draws": draws
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["cycle_execution"] = {"status": "ERROR", "error": str(e)}
    
    async def test_cycle_completion(self):
        """–¢–µ—Å—Ç 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ completed_cycles"""
        print("\nüèÅ –¢–ï–°–¢ 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞")
        print("-" * 50)
        
        try:
            # –°–æ–∑–¥–∞—ë–º/–Ω–∞—Ö–æ–¥–∏–º –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä –¥–ª—è –±–æ—Ç–∞
            accumulator = await db.bot_profit_accumulators.find_one({
                "bot_id": "test_bot_001",
                "is_cycle_completed": False
            })
            
            if not accumulator:
                # –°–æ–∑–¥–∞—ë–º –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                accumulator = {
                    "id": "test_accumulator_001",
                    "bot_id": "test_bot_001",
                    "cycle_number": 1,
                    "total_spent": 809.0,
                    "total_earned": 874.0,  # 809 + 65 –ø—Ä–∏–±—ã–ª–∏
                    "games_completed": 16,
                    "games_won": 7,
                    "games_lost": 6,
                    "games_drawn": 3,
                    "cycle_start_date": datetime.utcnow(),
                    "is_cycle_completed": False
                }
                await db.bot_profit_accumulators.insert_one(accumulator)
                print("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
            await complete_bot_cycle(
                accumulator_id=accumulator["id"],
                total_spent=809.0,
                total_earned=874.0,
                bot_id="test_bot_001"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–∞—Å—å –∑–∞–ø–∏—Å—å –≤ completed_cycles
            completed_cycle = await db.completed_cycles.find_one({
                "bot_id": "test_bot_001",
                "cycle_number": 1
            })
            
            if completed_cycle:
                print("‚úÖ –¶–∏–∫–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ completed_cycles")
                print(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞:")
                print(f"   –í—Å–µ–≥–æ –∏–≥—Ä: {completed_cycle.get('total_bets')}")
                print(f"   –ü–æ–±–µ–¥—ã: {completed_cycle.get('wins_count')}")
                print(f"   –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {completed_cycle.get('losses_count')}")
                print(f"   –ù–∏—á—å–∏: {completed_cycle.get('draws_count')}")
                print(f"   –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π: {completed_cycle.get('total_winnings')}")
                print(f"   –°—É–º–º–∞ –ø–æ—Ç–µ—Ä—å: {completed_cycle.get('total_losses')}")
                print(f"   –°—É–º–º–∞ –Ω–∏—á—å–∏—Ö: {completed_cycle.get('total_draws', 'N/A')}")
                print(f"   –ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª: {completed_cycle.get('active_pool')}")
                print(f"   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {completed_cycle.get('net_profit')}")
                print(f"   ROI: {completed_cycle.get('roi_active')}%")
                
                self.test_results["cycle_completion"] = {
                    "status": "SUCCESS",
                    "cycle_data": {
                        "total_bets": completed_cycle.get('total_bets'),
                        "wins": completed_cycle.get('wins_count'),
                        "losses": completed_cycle.get('losses_count'),
                        "draws": completed_cycle.get('draws_count'),
                        "total_winnings": completed_cycle.get('total_winnings'),
                        "total_losses": completed_cycle.get('total_losses'),
                        "active_pool": completed_cycle.get('active_pool'),
                        "net_profit": completed_cycle.get('net_profit'),
                        "roi_active": completed_cycle.get('roi_active')
                    }
                }
            else:
                print("‚ùå –ó–∞–ø–∏—Å—å –æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–º —Ü–∏–∫–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                self.test_results["cycle_completion"] = {"status": "FAILED", "error": "Completed cycle not found"}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            self.test_results["cycle_completion"] = {"status": "ERROR", "error": str(e)}
    
    async def test_profit_calculation(self):
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–∏–±—ã–ª–∏"""
        print("\nüí∞ –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–∏–±—ã–ª–∏")
        print("-" * 50)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
            accumulator = await db.bot_profit_accumulators.find_one({
                "bot_id": "test_bot_001",
                "is_cycle_completed": True
            })
            
            if accumulator:
                print("‚úÖ –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π")
                print(f"   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {accumulator.get('total_spent')}")
                print(f"   –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {accumulator.get('total_earned')}")
                print(f"   –ü—Ä–∏–±—ã–ª—å –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è: {accumulator.get('profit_transferred')}")
                
                self.test_results["profit_calculation"] = {
                    "status": "SUCCESS",
                    "accumulator_data": {
                        "total_spent": accumulator.get('total_spent'),
                        "total_earned": accumulator.get('total_earned'),
                        "profit_transferred": accumulator.get('profit_transferred'),
                        "is_completed": accumulator.get('is_cycle_completed')
                    }
                }
            else:
                print("‚ùå –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.test_results["profit_calculation"] = {"status": "FAILED", "error": "Completed accumulator not found"}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["profit_calculation"] = {"status": "ERROR", "error": str(e)}
    
    async def test_api_integration(self):
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("\nüîå –¢–ï–°–¢ 6: API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        print("-" * 50)
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º get_bot_completed_cycles
            print("üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º get_bot_completed_cycles...")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ API (–±–µ–∑ HTTP, –Ω–∞–ø—Ä—è–º—É—é —Ñ—É–Ω–∫—Ü–∏—é)
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ /admin/bots/{bot_id}/completed-cycles
            
            # –°–æ–∑–¥–∞—ë–º mock user –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
            class MockUser:
                def __init__(self):
                    self.role = "ADMIN"
            
            mock_user = MockUser()
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
            from server import get_bot_completed_cycles
            
            # –ó–¥–µ—Å—å –º—ã –±—ã –≤—ã–∑–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ –æ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç FastAPI –∫–æ–Ω—Ç–µ–∫—Å—Ç
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
            
            completed_cycles = await db.completed_cycles.find({"bot_id": "test_bot_001"}).to_list(None)
            
            if completed_cycles:
                cycle = completed_cycles[0]
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ completed_cycles:")
                print(f"   ID —Ü–∏–∫–ª–∞: {cycle.get('id')}")
                print(f"   –ù–æ–º–µ—Ä —Ü–∏–∫–ª–∞: {cycle.get('cycle_number')}")
                print(f"   –í—Å–µ–≥–æ –∏–≥—Ä: {cycle.get('total_bets')}")
                print(f"   W/L/D: {cycle.get('wins_count')}/{cycle.get('losses_count')}/{cycle.get('draws_count')}")
                print(f"   –í—ã–∏–≥—Ä—ã—à–∏: {cycle.get('total_winnings')}")
                print(f"   –ü–æ—Ç–µ—Ä–∏: {cycle.get('total_losses')}")
                print(f"   –ü—Ä–∏–±—ã–ª—å: {cycle.get('net_profit')}")
                print(f"   ROI: {cycle.get('roi_active')}%")
                
                self.test_results["api_integration"] = {
                    "status": "SUCCESS",
                    "completed_cycles_found": len(completed_cycles),
                    "sample_cycle": {
                        "cycle_number": cycle.get('cycle_number'),
                        "total_bets": cycle.get('total_bets'),
                        "wins": cycle.get('wins_count'),
                        "losses": cycle.get('losses_count'),
                        "draws": cycle.get('draws_count'),
                        "net_profit": cycle.get('net_profit'),
                        "roi_active": cycle.get('roi_active')
                    }
                }
            else:
                print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ completed_cycles")
                self.test_results["api_integration"] = {"status": "FAILED", "error": "No completed cycles found"}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            self.test_results["api_integration"] = {"status": "ERROR", "error": str(e)}
    
    async def test_final_verification(self):
        """–¢–µ—Å—Ç 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
        print("\nüîç –¢–ï–°–¢ 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è")
        print("-" * 50)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å –º–∞—Ä—à—Ä—É—Ç –¥–∞–Ω–Ω—ã—Ö
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
            games = await db.games.find({"creator_id": "test_bot_001", "status": "COMPLETED"}).to_list(None)
            print(f"‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–≥—Ä: {len(games)}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä
            accumulator = await db.bot_profit_accumulators.find_one({
                "bot_id": "test_bot_001",
                "is_cycle_completed": True
            })
            print(f"‚úÖ –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω: {accumulator is not None}")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º completed_cycles
            completed_cycle = await db.completed_cycles.find_one({"bot_id": "test_bot_001"})
            print(f"‚úÖ –ó–∞–ø–∏—Å—å –≤ completed_cycles: {completed_cycle is not None}")
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á—ë—Ç–æ–≤
            if completed_cycle:
                expected_values = {
                    "total_bets": 16,
                    "wins_count": 7,
                    "losses_count": 6,
                    "draws_count": 3,
                    "total_winnings": 356,
                    "total_losses": 291,
                    "net_profit": 65,
                    "active_pool": 647,
                    "roi_active": 10.05
                }
                
                all_correct = True
                for key, expected in expected_values.items():
                    actual = completed_cycle.get(key)
                    if key == "roi_active":
                        # –î–ª—è ROI –¥–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                        correct = abs(actual - expected) < 0.1
                    else:
                        correct = actual == expected
                    
                    if not correct:
                        print(f"‚ùå {key}: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected}, –ø–æ–ª—É—á–µ–Ω–æ {actual}")
                        all_correct = False
                    else:
                        print(f"‚úÖ {key}: {actual}")
                
                if all_correct:
                    print("\nüéâ –í–°–ï –†–ê–°–ß–Å–¢–´ –ö–û–†–†–ï–ö–¢–ù–´!")
                    self.test_results["final_verification"] = {
                        "status": "SUCCESS",
                        "all_calculations_correct": True,
                        "data_flow_complete": True
                    }
                else:
                    print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ä–∞—Å—á—ë—Ç–∞—Ö")
                    self.test_results["final_verification"] = {
                        "status": "FAILED",
                        "all_calculations_correct": False,
                        "errors": "Calculation mismatches found"
                    }
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                self.test_results["final_verification"] = {"status": "FAILED", "error": "No data to verify"}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["final_verification"] = {"status": "ERROR", "error": str(e)}
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç"""
        print("\n" + "="*80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*80)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() 
                          if result and result.get("status") == "SUCCESS")
        failed_tests = sum(1 for result in self.test_results.values() 
                          if result and result.get("status") == "FAILED")
        error_tests = sum(1 for result in self.test_results.values() 
                         if result and result.get("status") == "ERROR")
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {passed_tests} ‚úÖ")
        print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests} ‚ùå")
        print(f"   –û—à–∏–±–∫–∏: {error_tests} üî•")
        
        success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        print(f"\nüìã –î–ï–¢–ê–õ–ò –ü–û –¢–ï–°–¢–ê–ú:")
        for test_name, result in self.test_results.items():
            if result:
                status_icon = {"SUCCESS": "‚úÖ", "FAILED": "‚ùå", "ERROR": "üî•"}.get(result["status"], "‚ùì")
                print(f"   {test_name}: {status_icon} {result['status']}")
                if result.get("error"):
                    print(f"      –û—à–∏–±–∫–∞: {result['error']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª
        report_data = {
            "timestamp": datetime.utcnow().isoformat(),
            "summary": {
                "total_tests": total_tests,
                "passed": passed_tests,
                "failed": failed_tests,
                "errors": error_tests,
                "success_rate": success_rate
            },
            "detailed_results": self.test_results
        }
        
        with open("/workspace/bot_cycle_test_report.json", "w", encoding="utf-8") as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"\nüíæ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: /workspace/bot_cycle_test_report.json")
        
        if success_rate >= 85:
            print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print(f"\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.")
    
    async def cleanup_test_data(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–≥—Ä—ã
            await db.games.delete_many({"creator_id": "test_bot_001"})
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã
            await db.bot_profit_accumulators.delete_many({"bot_id": "test_bot_001"})
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã
            await db.completed_cycles.delete_many({"bot_id": "test_bot_001"})
            
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BotCycleFlowTester()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
        await tester.run_complete_test()
        
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await tester.cleanup_test_data()

if __name__ == "__main__":
    asyncio.run(main())