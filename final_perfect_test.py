#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–ß–ù–û–ô –°–£–ú–ú–´ –¶–ò–ö–õ–ê - Russian Review Testing
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–ù–ê–õ–¨–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø —Ç–æ—á–Ω–æ–π —Å—É–º–º—ã —Ü–∏–∫–ª–∞ —Å—Ç–∞–≤–æ–∫

–§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢:
1. POST /api/admin/bots/create-regular - —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ "Final_Perfect_Test_Bot"
2. –ü–æ–¥–æ–∂–¥–∞—Ç—å 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –í–°–ï–• 12 —Å—Ç–∞–≤–æ–∫
3. GET /api/bots/active-games - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–≥—Ä—ã –±–æ—Ç–∞
4. –í—ã—á–∏—Å–ª–∏—Ç—å –¢–û–ß–ù–£–Æ —Å—É–º–º—É –≤—Å–µ—Ö bet_amount
5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å—É–º–º–∞ –†–ê–í–ù–ê 306.0
6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ = 12
7. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞:
   - "üéØ Bot ID: GENERATING COMPLETE CYCLE"
   - "üéØ Bot ID: CYCLE BETS SAVED - 12 bets with total sum 306"
   - "üéØ Bot ID: EXACT bet amount=X, gem_total=Y" –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞–≤–∫–∏

–ö–†–ò–¢–ï–†–ò–ô –£–°–ü–ï–•–ê: –°—É–º–º–∞ = 306.0 AND –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = 12. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ò–î–ï–ê–õ–¨–ù–û –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏.
"""

import requests
import json
import time
import sys
from typing import Dict, Any, Optional, List, Tuple
import random
import string
from datetime import datetime

# Configuration
BASE_URL = "https://f5408cb5-a948-4578-b0dd-1a7c404eb24f.preview.emergentagent.com/api"
ADMIN_USER = {
    "email": "admin@gemplay.com",
    "password": "Admin123!"
}

# Colors for terminal output
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

def print_header(text: str):
    """Print colored header"""
    print(f"\n{Colors.BOLD}{Colors.CYAN}{'='*80}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{text.center(80)}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{'='*80}{Colors.END}\n")

def make_request(method: str, endpoint: str, headers: Dict = None, data: Dict = None, params: Dict = None) -> Tuple[bool, Any, str]:
    """Make HTTP request with error handling"""
    url = f"{BASE_URL}{endpoint}"
    
    try:
        start_time = time.time()
        
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, params=params, timeout=30)
        elif method.upper() == "POST":
            response = requests.post(url, headers=headers, json=data, timeout=30)
        elif method.upper() == "PUT":
            response = requests.put(url, headers=headers, json=data, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            return False, None, f"Unsupported method: {method}"
        
        response_time = time.time() - start_time
        
        try:
            response_data = response.json()
        except:
            response_data = response.text
        
        success = response.status_code in [200, 201]
        details = f"Status: {response.status_code}, Time: {response_time:.3f}s"
        
        if not success:
            details += f", Error: {response_data}"
        
        return success, response_data, details
        
    except requests.exceptions.Timeout:
        return False, None, "Request timeout (30s)"
    except requests.exceptions.ConnectionError:
        return False, None, "Connection error"
    except Exception as e:
        return False, None, f"Request error: {str(e)}"

def authenticate_admin() -> Optional[str]:
    """Authenticate as admin and return access token"""
    print(f"{Colors.BLUE}üîê Authenticating as admin user...{Colors.END}")
    
    success, response_data, details = make_request(
        "POST", 
        "/auth/login",
        data=ADMIN_USER
    )
    
    if success and response_data and "access_token" in response_data:
        token = response_data["access_token"]
        print(f"{Colors.GREEN}‚úÖ Admin authentication successful{Colors.END}")
        return token
    else:
        print(f"{Colors.RED}‚ùå Admin authentication failed: {details}{Colors.END}")
        return None

def main():
    """Main test execution for FINAL PERFECT TEST"""
    print_header("–§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–ß–ù–û–ô –°–£–ú–ú–´ –¶–ò–ö–õ–ê - FINAL PERFECT TEST")
    print(f"{Colors.BLUE}üéØ Testing –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï —Ç–æ—á–Ω–æ–π —Å—É–º–º—ã —Ü–∏–∫–ª–∞ —Å—Ç–∞–≤–æ–∫{Colors.END}")
    print(f"{Colors.BLUE}üåê Backend URL: {BASE_URL}{Colors.END}")
    print(f"{Colors.BLUE}üìã Focus: Regular bot 'Final_Perfect_Test_Bot', cycle sum = 306.0{Colors.END}")
    print(f"{Colors.BLUE}üé≤ Expected: (1+50)/2*12 = 25.5*12 = 306.0{Colors.END}")
    print(f"{Colors.BLUE}üö® –ö–†–ò–¢–ï–†–ò–ô –£–°–ü–ï–•–ê: –°—É–º–º–∞ = 306.0 AND –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = 12{Colors.END}")
    
    # First authenticate as admin
    admin_token = authenticate_admin()
    if not admin_token:
        print(f"{Colors.RED}‚ùå Cannot proceed without admin authentication{Colors.END}")
        return
    
    headers = {"Authorization": f"Bearer {admin_token}"}
    
    # Create Regular bot with EXACT settings from Russian review
    bot_data = {
        "name": "Final_Perfect_Test_Bot",
        "min_bet_amount": 1.0,
        "max_bet_amount": 50.0,
        "cycle_games": 12,
        "win_percentage": 55,
        "pause_between_cycles": 5,
        "pause_on_draw": 1,
        "profit_strategy": "balanced",
        "creation_mode": "queue-based"
    }
    
    print(f"\n{Colors.MAGENTA}üß™ STEP 1: Creating Regular bot 'Final_Perfect_Test_Bot'{Colors.END}")
    print(f"   üìù Bot settings: {bot_data}")
    
    # Create the bot
    success, response_data, details = make_request(
        "POST",
        "/admin/bots/create-regular",
        headers=headers,
        data=bot_data
    )
    
    if not success or not response_data:
        print(f"{Colors.RED}‚ùå FAILED to create Regular bot: {details}{Colors.END}")
        return
    
    bot_id = response_data.get("bot_id")
    if not bot_id:
        print(f"{Colors.RED}‚ùå Bot created but no bot_id returned{Colors.END}")
        return
    
    print(f"{Colors.GREEN}‚úÖ Regular bot 'Final_Perfect_Test_Bot' created successfully with ID: {bot_id}{Colors.END}")
    
    print(f"\n{Colors.MAGENTA}üß™ STEP 2: Waiting 30 seconds for COMPLETE cycle creation{Colors.END}")
    print(f"   ‚è≥ Waiting for ALL 12 bets to be created...")
    time.sleep(30)
    
    print(f"\n{Colors.MAGENTA}üß™ STEP 3: Getting all active games for the bot{Colors.END}")
    # Get ALL active games for this specific bot
    success, games_data, details = make_request(
        "GET",
        "/bots/active-games",
        headers=headers
    )
    
    if not success or not games_data:
        print(f"{Colors.RED}‚ùå FAILED to get active games: {details}{Colors.END}")
        return
    
    # Filter games for our specific bot
    bot_games = []
    if isinstance(games_data, list):
        bot_games = [game for game in games_data if game.get("bot_id") == bot_id]
    elif isinstance(games_data, dict) and "games" in games_data:
        bot_games = [game for game in games_data["games"] if game.get("bot_id") == bot_id]
    
    if not bot_games:
        print(f"{Colors.RED}‚ùå No active games found for bot {bot_id}{Colors.END}")
        print(f"   Total games in response: {len(games_data) if isinstance(games_data, list) else 'unknown'}")
        return
    
    print(f"{Colors.GREEN}‚úÖ Found {len(bot_games)} active games for Final_Perfect_Test_Bot{Colors.END}")
    
    print(f"\n{Colors.MAGENTA}üß™ STEP 4: Calculating EXACT sum of all bet_amount values{Colors.END}")
    # Calculate EXACT sum of ALL bet_amount values
    bet_amounts = [float(game.get("bet_amount", 0)) for game in bot_games]
    total_sum = sum(bet_amounts)
    bet_count = len(bet_amounts)
    min_bet = min(bet_amounts) if bet_amounts else 0
    max_bet = max(bet_amounts) if bet_amounts else 0
    avg_bet = total_sum / bet_count if bet_count > 0 else 0
    
    print(f"   üìä –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
    print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫: {bet_count}")
    print(f"      –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${min_bet:.1f}")
    print(f"      –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${max_bet:.1f}")
    print(f"      –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: ${avg_bet:.1f}")
    print(f"      –¢–û–ß–ù–ê–Ø –°–£–ú–ú–ê: ${total_sum:.1f}")
    print(f"      –û–ñ–ò–î–ê–ï–ú–ê–Ø –°–£–ú–ú–ê: $306.0")
    print(f"   üîç Individual bet amounts: {sorted(bet_amounts)}")
    
    print(f"\n{Colors.MAGENTA}üß™ STEP 5: Checking if sum EQUALS 306.0{Colors.END}")
    expected_sum = 306.0
    is_exact_match = abs(total_sum - expected_sum) < 0.01  # Allow for floating point precision
    
    print(f"\n{Colors.MAGENTA}üß™ STEP 6: Checking if bet count = 12{Colors.END}")
    correct_bet_count = bet_count == 12
    
    print(f"\n{Colors.MAGENTA}üß™ STEP 7: Checking backend logs for specific messages{Colors.END}")
    try:
        import subprocess
        
        # Get recent backend logs
        result = subprocess.run(
            ["tail", "-n", "300", "/var/log/supervisor/backend.out.log"],
            capture_output=True,
            text=True,
            timeout=10
        )
        
        if result.returncode == 0:
            log_content = result.stdout
            
            # Look for specific messages
            generating_cycle_msgs = log_content.count("üéØ Bot ID: GENERATING COMPLETE CYCLE")
            cycle_bets_saved_msgs = log_content.count("üéØ Bot ID: CYCLE BETS SAVED - 12 bets with total sum 306")
            exact_bet_msgs = log_content.count("üéØ Bot ID: EXACT bet amount=")
            
            print(f"   üìã Backend Log Analysis:")
            print(f"      üéØ 'GENERATING COMPLETE CYCLE' messages: {generating_cycle_msgs}")
            print(f"      üéØ 'CYCLE BETS SAVED - 12 bets with total sum 306' messages: {cycle_bets_saved_msgs}")
            print(f"      üéØ 'EXACT bet amount=' messages: {exact_bet_msgs}")
            
            # Show relevant log lines
            relevant_lines = []
            for line in log_content.split('\n'):
                if any(keyword in line for keyword in [
                    "üéØ Bot ID: GENERATING COMPLETE CYCLE",
                    "üéØ Bot ID: CYCLE BETS SAVED",
                    "üéØ Bot ID: EXACT bet amount=",
                    "Final_Perfect_Test_Bot"
                ]):
                    relevant_lines.append(line.strip())
            
            if relevant_lines:
                print(f"   üìù Relevant log lines:")
                for line in relevant_lines[-10:]:  # Show last 10 relevant lines
                    print(f"      {line}")
            else:
                print(f"   ‚ö†Ô∏è No relevant log lines found")
                
        else:
            print(f"   ‚ùå Failed to read backend logs: {result.stderr}")
            
    except Exception as e:
        print(f"   ‚ùå Error reading logs: {str(e)}")
    
    # FINAL RESULT
    print_header("–§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    
    if is_exact_match and correct_bet_count:
        print(f"{Colors.GREEN}{Colors.BOLD}üéâ –£–°–ü–ï–•! –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!{Colors.END}")
        print(f"{Colors.GREEN}‚úÖ –°—É–º–º–∞ = {total_sum:.1f} (—Ç–æ—á–Ω–æ —Ä–∞–≤–Ω–∞ 306.0){Colors.END}")
        print(f"{Colors.GREEN}‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ = {bet_count} (—Ç–æ—á–Ω–æ —Ä–∞–≤–Ω–æ 12){Colors.END}")
        print(f"{Colors.GREEN}‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–≤–æ–∫: ${min_bet:.1f} - ${max_bet:.1f}{Colors.END}")
        print(f"{Colors.GREEN}‚úÖ –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: ${avg_bet:.1f}{Colors.END}")
        print(f"{Colors.GREEN}üéØ –ö–†–ò–¢–ï–†–ò–ô –£–°–ü–ï–•–ê –î–û–°–¢–ò–ì–ù–£–¢: –°—É–º–º–∞ = 306.0 AND –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = 12{Colors.END}")
        print(f"{Colors.GREEN}üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!{Colors.END}")
    else:
        difference = total_sum - expected_sum
        issues = []
        if not is_exact_match:
            issues.append(f"–°—É–º–º–∞ –Ω–µ—Ç–æ—á–Ω–∞—è: {total_sum:.1f} ‚â† 306.0 (—Ä–∞–∑–Ω–∏—Ü–∞: {difference:+.1f})")
        if not correct_bet_count:
            issues.append(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫: {bet_count} ‚â† 12")
        
        print(f"{Colors.RED}{Colors.BOLD}üö® –ü–†–û–í–ê–õ! –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢!{Colors.END}")
        print(f"{Colors.RED}‚ùå {'; '.join(issues)}{Colors.END}")
        print(f"{Colors.RED}‚ùå –ö–†–ò–¢–ï–†–ò–ô –£–°–ü–ï–•–ê –ù–ï –î–û–°–¢–ò–ì–ù–£–¢{Colors.END}")
        print(f"{Colors.RED}üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫{Colors.END}")
        
        # Show what we got vs what was expected
        print(f"\n{Colors.YELLOW}üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:{Colors.END}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {bet_count} —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å—É–º–º—É ${total_sum:.1f}")
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: 12 —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å—É–º–º—É $306.0")
        print(f"   –°—Ç–∞–≤–∫–∏: {sorted(bet_amounts)}")

if __name__ == "__main__":
    main()