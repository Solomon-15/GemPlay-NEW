#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
"""

import os
import subprocess
import json

def check_files_exist():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í")
    print("-" * 30)
    
    critical_files = [
        "/workspace/backend/server.py",
        "/workspace/frontend/src/components/RegularBotsManagement.js", 
        "/workspace/frontend/src/components/ProfitAdmin.js",
        "/workspace/frontend/package.json"
    ]
    
    all_exist = True
    for file_path in critical_files:
        exists = os.path.exists(file_path)
        status = "‚úÖ" if exists else "‚ùå"
        filename = os.path.basename(file_path)
        print(f"{status} {filename}")
        if not exists:
            all_exist = False
    
    return all_exist

def check_backend_functions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ backend"""
    print("\nüîß –ü–†–û–í–ï–†–ö–ê BACKEND –§–£–ù–ö–¶–ò–ô")
    print("-" * 30)
    
    server_file = "/workspace/backend/server.py"
    
    if not os.path.exists(server_file):
        print("‚ùå server.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(server_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    functions = [
        "create_full_bot_cycle",
        "generate_cycle_bets_natural_distribution", 
        "complete_bot_cycle",
        "get_bot_completed_cycles",
        "get_bot_revenue_summary"
    ]
    
    all_found = True
    for func in functions:
        found = func in content
        status = "‚úÖ" if found else "‚ùå"
        print(f"{status} {func}")
        if not found:
            all_found = False
    
    return all_found

def check_calculation_logic():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á—ë—Ç–æ–≤"""
    print("\nüßÆ –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –†–ê–°–ß–Å–¢–û–í")
    print("-" * 30)
    
    # –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    total = 809
    w_pct, l_pct, d_pct = 44.0, 36.0, 20.0
    
    # –†–∞—Å—á—ë—Ç
    raw_w = total * (w_pct / 100.0)
    raw_l = total * (l_pct / 100.0) 
    raw_d = total * (d_pct / 100.0)
    
    # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ half-up
    def half_up(x):
        return int(x + 0.5)
    
    w = half_up(raw_w)
    l = half_up(raw_l)
    d = half_up(raw_d)
    
    calc_total = w + l + d
    active_pool = w + l
    profit = w - l
    roi = (profit / active_pool * 100) if active_pool > 0 else 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    expected = {"total": 809, "w": 356, "l": 291, "d": 162, "profit": 65, "roi": 10.05}
    actual = {"total": calc_total, "w": w, "l": l, "d": d, "profit": profit, "roi": round(roi, 2)}
    
    all_correct = True
    for key in expected:
        correct = actual[key] == expected[key] or (key == "roi" and abs(actual[key] - expected[key]) < 0.1)
        status = "‚úÖ" if correct else "‚ùå"
        print(f"{status} {key}: {actual[key]} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected[key]})")
        if not correct:
            all_correct = False
    
    return all_correct

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    print("\nüì¶ –ü–†–û–í–ï–†–ö–ê GIT –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø")
    print("-" * 30)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
        result = subprocess.run(['git', 'branch', '--show-current'], 
                              capture_output=True, text=True, cwd='/workspace')
        if result.returncode == 0:
            branch = result.stdout.strip()
            print(f"‚úÖ –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {branch}")
            
            if branch == "cursor/roi-1998":
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞")
                branch_ok = True
            else:
                print("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–µ—Ç–∫–∞ cursor/roi-1998")
                branch_ok = False
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ç–∫—É")
            branch_ok = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True, cwd='/workspace')
        if result.returncode == 0:
            if result.stdout.strip():
                print("‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            else:
                print("‚úÖ –†–∞–±–æ—á–µ–µ –¥–µ—Ä–µ–≤–æ —á–∏—Å—Ç–æ–µ")
        
        return branch_ok
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ git: {e}")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüìö –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("-" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –º–æ–¥—É–ª–∏
    python_modules = ['asyncio', 'datetime', 'json']
    python_ok = True
    
    for module in python_modules:
        try:
            __import__(module)
            print(f"‚úÖ Python: {module}")
        except ImportError:
            print(f"‚ùå Python: {module}")
            python_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    package_json = "/workspace/frontend/package.json"
    node_ok = True
    
    if os.path.exists(package_json):
        print("‚úÖ package.json –Ω–∞–π–¥–µ–Ω")
        
        node_modules = "/workspace/frontend/node_modules"
        if os.path.exists(node_modules):
            print("‚úÖ node_modules —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            print("‚ö†Ô∏è  node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–∑–∞–ø—É—Å—Ç–∏—Ç–µ npm install)")
            node_ok = False
    else:
        print("‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        node_ok = False
    
    return python_ok and node_ok

def generate_startup_commands():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
    print("\nüöÄ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ó–ê–ü–£–°–ö–ê")
    print("-" * 30)
    
    print("Backend —Å–µ—Ä–≤–µ—Ä:")
    print("  cd /workspace/backend && python3 server.py")
    
    print("\nFrontend (–≤ –Ω–æ–≤–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ):")
    print("  cd /workspace/frontend && npm start")
    
    print("\n–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("  1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000")
    print("  2. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä") 
    print("  3. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ 1-100, 16 –∏–≥—Ä")
    print("  4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ '–î–æ—Ö–æ–¥ –æ—Ç –±–æ—Ç–æ–≤'")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("‚ö° –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –ë–û–¢–û–í")
    print("=" * 50)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    files_ok = check_files_exist()
    functions_ok = check_backend_functions()
    logic_ok = check_calculation_logic()
    git_ok = check_git_status()
    deps_ok = check_dependencies()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    checks = [files_ok, functions_ok, logic_ok, git_ok, deps_ok]
    passed = sum(checks)
    total = len(checks)
    
    print(f"\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print("=" * 50)
    
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed}/{total}")
    
    if passed == total:
        print("üéâ –í–°–Å –ì–û–¢–û–í–û –ö –ó–ê–ü–£–°–ö–£!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞")
        generate_startup_commands()
    elif passed >= total * 0.8:
        print("‚ö†Ô∏è  –ü–û–ß–¢–ò –ì–û–¢–û–í–û")
        print("üîß –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
        generate_startup_commands()
    else:
        print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
    
    print(f"\nüìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: manual_test_instructions.md")
    print(f"üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç: TESTING_SUMMARY_REPORT.md")

if __name__ == "__main__":
    main()