#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∫–æ–ª–æ–Ω–æ–∫ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –∏ "–°—Ç–∞–≤–∫–∏" –¥–ª—è Human-–±–æ—Ç–æ–≤
"""
import requests
import json

BASE_URL = "http://localhost:8001"

def test_admin_login():
    """–ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    credentials = [
        {"email": "admin@example.com", "password": "admin123"},
        {"email": "testadmin@example.com", "password": "admin123"},
        {"email": "smukhammedali@gmail.com", "password": "admin123"},
        {"email": "admin@gemplay.com", "password": "admin123"},
        {"email": "admin", "password": "admin123"}
    ]
    
    for cred in credentials:
        try:
            response = requests.post(
                f"{BASE_URL}/api/auth/login",
                json=cred,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                token = data.get("access_token")
                if token:
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {cred['email']}")
                    return token
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {cred['email']}: {e}")
            continue
    
    return None

def test_human_bots_statistics(token):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Human-–±–æ—Ç–æ–≤"""
    
    print("\n=== –¢–ï–°–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò HUMAN-–ë–û–¢–û–í ===")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ Human-–±–æ—Ç–æ–≤
        response = requests.get(
            f"{BASE_URL}/api/admin/human-bots",
            headers={"Authorization": f"Bearer {token}"}
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Human-–±–æ—Ç–æ–≤: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
        
        data = response.json()
        bots = data.get("human_bots", [])
        
        if not bots:
            print("‚ö†Ô∏è  –ù–µ—Ç Human-–±–æ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return False
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(bots)} Human-–±–æ—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
        for i, bot in enumerate(bots[:3]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã—Ö 3 –±–æ—Ç–æ–≤
            print(f"\n--- –ë–æ—Ç {i+1}: {bot.get('name', 'Unknown')} ---")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_fields = [
                "total_games_played",
                "total_games_won", 
                "win_percentage",
                "total_amount_won",
                "total_amount_wagered",
                "active_bets_count"
            ]
            
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            for field in stats_fields:
                value = bot.get(field, "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                print(f"  {field}: {value}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            total_games = bot.get("total_games_played", 0)
            total_wins = bot.get("total_games_won", 0)
            win_percentage = bot.get("win_percentage", 0)
            
            if total_games > 0:
                expected_win_rate = (total_wins / total_games) * 100
                print(f"  –û–∂–∏–¥–∞–µ–º—ã–π win_rate: {expected_win_rate:.2f}%")
                if abs(win_percentage - expected_win_rate) < 0.1:
                    print("  ‚úÖ Win rate –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
                else:
                    print("  ‚ùå Win rate –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±—ã–ª—å
            total_won = bot.get("total_amount_won", 0)
            total_wagered = bot.get("total_amount_wagered", 0)
            net_profit = total_won - total_wagered
            print(f"  –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit:.2f}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

def test_active_bets(token, bot_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫"""
    
    print(f"\n=== –¢–ï–°–¢ –ê–ö–¢–ò–í–ù–´–• –°–¢–ê–í–û–ö –î–õ–Ø –ë–û–¢–ê {bot_id} ===")
    
    try:
        response = requests.get(
            f"{BASE_URL}/api/admin/human-bots/{bot_id}/active-bets",
            headers={"Authorization": f"Bearer {token}"}
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
        
        data = response.json()
        active_bets = data.get("active_bets", [])
        
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {len(active_bets)}")
        
        if active_bets:
            print("üìã –ü–µ—Ä–≤—ã–µ 3 –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:")
            for i, bet in enumerate(active_bets[:3]):
                print(f"  –°—Ç–∞–≤–∫–∞ {i+1}:")
                print(f"    ID: {bet.get('id', 'N/A')}")
                print(f"    –†–∞–∑–º–µ—Ä: {bet.get('bet_amount', 'N/A')}")
                print(f"    –°—Ç–∞—Ç—É—Å: {bet.get('status', 'N/A')}")
                print(f"    –î–∞—Ç–∞: {bet.get('created_at', 'N/A')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {e}")
        return False

def test_all_bets(token, bot_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    
    print(f"\n=== –¢–ï–°–¢ –í–°–ï–• –°–¢–ê–í–û–ö –î–õ–Ø –ë–û–¢–ê {bot_id} ===")
    
    try:
        # –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        response = requests.get(
            f"{BASE_URL}/api/admin/human-bots/{bot_id}/all-bets?page=1&limit=5",
            headers={"Authorization": f"Bearer {token}"}
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
        
        data = response.json()
        bets = data.get("bets", [])
        total = data.get("total", 0)
        page = data.get("page", 1)
        
        print(f"‚úÖ –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {total}")
        print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}")
        print(f"‚úÖ –°—Ç–∞–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(bets)}")
        
        if bets:
            print("üìã –ü–µ—Ä–≤—ã–µ 3 —Å—Ç–∞–≤–∫–∏:")
            for i, bet in enumerate(bets[:3]):
                print(f"  –°—Ç–∞–≤–∫–∞ {i+1}:")
                print(f"    ID: {bet.get('id', 'N/A')}")
                print(f"    –†–∞–∑–º–µ—Ä: {bet.get('bet_amount', 'N/A')}")
                print(f"    –°—Ç–∞—Ç—É—Å: {bet.get('status', 'N/A')}")
                print(f"    –î–∞—Ç–∞: {bet.get('created_at', 'N/A')}")
        
        # –¢–µ—Å—Ç –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if total > 5:
            print("\n--- –¢–µ—Å—Ç –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---")
            response2 = requests.get(
                f"{BASE_URL}/api/admin/human-bots/{bot_id}/all-bets?page=2&limit=5",
                headers={"Authorization": f"Bearer {token}"}
            )
            
            if response2.status_code == 200:
                data2 = response2.json()
                bets2 = data2.get("bets", [])
                print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: {len(bets2)} —Å—Ç–∞–≤–æ–∫")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response2.status_code}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –ö–û–õ–û–ù–û–ö '–°–¢–ê–¢–ò–°–¢–ò–ö–ê' –ò '–°–¢–ê–í–ö–ò'")
    print("=" * 70)
    
    # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    print("\n1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
    token = test_admin_login()
    
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
        return
    
    # –®–∞–≥ 2: –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Human-–±–æ—Ç–æ–≤
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Human-–±–æ—Ç–æ–≤...")
    stats_success = test_human_bots_statistics(token)
    
    if not stats_success:
        print("‚ùå –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –ø—Ä–æ—à–µ–ª")
        return
    
    # –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫
    print("\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ ID –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫...")
    
    try:
        response = requests.get(
            f"{BASE_URL}/api/admin/human-bots",
            headers={"Authorization": f"Bearer {token}"}
        )
        
        if response.status_code == 200:
            data = response.json()
            bots = data.get("human_bots", [])
            
            if bots:
                bot_id = bots[0].get("id")
                bot_name = bots[0].get("name")
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω –±–æ—Ç: {bot_name} (ID: {bot_id})")
                
                # –®–∞–≥ 4: –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
                print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫...")
                test_active_bets(token, bot_id)
                
                # –®–∞–≥ 5: –¢–µ—Å—Ç –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫
                print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫...")
                test_all_bets(token, bot_id)
                
            else:
                print("‚ùå –ù–µ—Ç –±–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –±–æ—Ç–∞: {e}")
    
    print("\n" + "=" * 70)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    main()