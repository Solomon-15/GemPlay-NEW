<analysis>
The AI engineer has performed several iterative feature enhancements and critical bug fixes on the application's frontend, with some backend adjustments. The primary focus was on refining the ROI column in the Regular Bots Management table, which progressed from basic formatting and coloring to a complex two-line display (actual and planned ROI) with specific sorting and fallback logic. This required multiple refinements to the planned ROI calculation.

Beyond features, two significant bugs were resolved: a console error and duplicate API calls in the Admin Panel (due to unthrottled  calls), and a persistent user logout issue. The logout problem stemmed from an API contract mismatch in the token refresh flow and race conditions, both of which were systematically addressed. The most recent task involved fixing an error when the Join Battle modal was rapidly closed, by introducing a timed UI lock. There was a brief interlude where an unrelated ROI display bug was fixed, indicating a slight deviation from the active bug. Overall, the engineer demonstrated strong problem-solving and iterative refinement capabilities.
</analysis>

<product_requirements>
The user requires enhancements and fixes for an existing full-stack application.
**A. ROI Column Enhancements (Regular Bots Management Table):**
*   Rename the % column header to ROI.
*   Remove ROI text from cell values, displaying only the number and percentage (e.g., 9.82%).
*   Implement color-coding for actual ROI values: orange for values ≥ 0 and red for values < 0.
*   Introduce a two-line display within the ROI column:
    *   Top line: Actual ROI (sourced from ), colored based on its sign (orange/red).
    *   Bottom line: Planned ROI, displayed in a fixed gray color (), without sign-based coloring.
*   The planned ROI's source should prioritize  from the backend; if unavailable, a frontend calculation based on bot configuration (wins/losses/draws percentages, min/max bets, cycle games) should be used as a fallback.
*   The ROI column must be sortable based on the actual ROI ().
*   Add tooltips (Фактический ROI, Плановый ROI) on hover.

**B. Admin Panel Dashboard Bug Fix:**
*   Resolve  errors and duplicate Fetching dashboard stats logs in . This includes addressing concurrent API calls and potential issues with  not being an array.

**C. Spontaneous Logout Bug Fix:**
*   Address the issue causing users to be spontaneously logged out after 2-7 minutes. This involves ensuring consistent token refresh mechanisms between frontend and backend, handling  responses gracefully, and preventing race conditions during token refresh.

**D. Join Battle Modal Closure Error Fix:**
*   Resolve an error that occurs when the Join Battle modal is abruptly closed during a game turn. Specifically, after a move is completed and the result is displayed, a 2-second countdown should be added before the close button (X) and Continue Playing (OK) button become active, preventing premature  calls.
</product_requirements>

<key_technical_concepts>
- **React.js:** Frontend framework for building UI components.
- **FastAPI:** Backend framework for API development.
- **MongoDB:** NoSQL database used for data storage.
- **Axios:** HTTP client for making API requests from the frontend.
- **Tailwind CSS:** Utility-first CSS framework for styling.
- ** &  Hooks:** React hooks for managing side effects and mutable references.
- **Authentication Interceptors:** Axios interceptors for handling token refresh and authentication headers.
- **JSON Web Tokens (JWT):** Used for authentication and authorization.
</key_technical_concepts>

<code_architecture>
The application has a standard full-stack structure:


- ****:
    - **Summary:** This file manages the display and interaction of the regular bots table in the admin panel. It's crucial for presenting bot statistics and allowing sorting.
    - **Changes:**
        - Modified the column header for ROI from %.
        - Implemented a two-line display for ROI values, separating actual and planned ROI.
        - Applied specific Tailwind CSS classes (, , , ) for color-coding and gray tinting.
        - Updated sorting logic to sort by  for the ROI column.
        - Adjusted the logic for calculating planned ROI on the frontend: initially attempted to source from  sums, then pivoted to , and finally implemented a fallback calculation based on individual bot's / when  is absent.

- ****:
    - **Summary:** This component handles the display and fetching of dashboard statistics for the admin panel.
    - **Changes:**
        - Eliminated duplicate  calls within .
        - Introduced a  () to prevent concurrent API requests, acting as a debouncer/guard for dashboard data fetching.
        - Removed verbose  statements used for debugging.
        - Added a safe guard for  to correctly handle non-array responses when setting bot counts.

- ****:
    - **Summary:** This file contains an Axios interceptor responsible for attaching authentication headers to requests and handling token refresh when access tokens expire.
    - **Changes:**
        - Standardized the  request to consistently send a JSON payload  with .
        - Implemented a queuing mechanism ( flag) to ensure only one token refresh request is active at a time, preventing race conditions and multiple logouts.

- ****:
    - **Summary:** The main application component, responsible for overall layout and initial authentication status checks.
    - **Changes:**
        - Updated the  function to adhere to the new standardized JSON payload contract for the  endpoint, aligning with the  changes.

- ****:
    - **Summary:** The core FastAPI application, defining all API routes and backend business logic, including authentication.
    - **Changes:**
        - Modified the  endpoint to correctly parse the JSON payload from the frontend for .
        - Ensured that after a successful token refresh, the used  is explicitly deactivated (marked inactive in the database) to prevent reuse.

- ****:
    - **Summary:** This modal handles the flow of joining a battle, choosing a move, and displaying the result.
    - **Changes:**
        - Implemented a state () and a 2-second timer.
        - The close button (X) in the modal header is now conditionally  for 2 seconds when the battle result step (step 3) is active.
        - Coordinates with  to ensure both the X and OK buttons are disabled for the specified duration, preventing rapid closure and associated errors.

- ****:
    - **Summary:** A sub-component within  responsible for displaying the battle outcome.
    - **Changes:**
        - Introduced  state and  with a 2-second timer.
        - The Continue Playing (OK) button is disabled and displays a countdown (Please wait Ns...) during this 2-second period.
        - After the countdown, the button activates with its original text.
</code_architecture>

<pending_tasks>
- **Backend Enhancement for Planned ROI:** The AI engineer recommended adding  field to the  endpoint in the backend () for full consistency of planned ROI data.
- **Optional UI Labels:** The user was asked if they want compact факт/план (fact/plan) labels for the two-line ROI display.
- **Other ROI Views:** The user was asked if the two-line ROI display logic should be applied to other detailed lists/modals.
- **Additional Monitoring:** The AI engineer asked if the user wants additional monitoring (metrics for refreshes, 401s, logout events).
- **Load Testing:** The AI engineer asked if the user wants a load test scenario (20 concurrent requests) for the refresh cycle.
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer was working on resolving a bug in the Join Battle modal ( and ). The bug manifested as an error when the modal was abruptly closed during a game turn, resulting in  and backend errors like  or .

The current state of the fix is that a 2-second delay has been implemented after the battle result is displayed. During this delay, both the modal's close X button and the Continue Playing (OK) button are disabled. The OK button also shows a countdown (e.g., Please wait 2s...). After 2 seconds, both controls become active, allowing the user to safely close the modal or proceed. This change aims to prevent premature closing, allowing the game state to synchronize and avoid subsequent erroneous API calls (like  on an already completed game). The AI engineer confirmed the fix and asked for testing. The user then simply said Продолжай (Continue), which implies the fix is accepted for now, and the engineer is ready to proceed.
</current_work>

<optional_next_step>
Run E2E tests for the Join Battle modal fix to confirm the 2-second delay on the close X button.
</optional_next_step>
