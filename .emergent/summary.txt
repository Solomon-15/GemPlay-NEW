<analysis>
The trajectory outlines the evolution of the GemPlay application's bot system, transitioning from initial refactoring and minor UI adjustments to addressing critical bugs and ultimately undertaking a major re-architecture. The AI engineer began by cleaning up and modularizing frontend bot management components and addressing a parsing error. A significant part of the journey involved debugging persistent global bot limit failures, which exposed deep architectural issues in how bets were created and limits were enforced across various backend functions. This led to a crucial decision, prompted by the user, to completely rewrite the core bot automation and bet creation logic. The re-architecture is currently in progress, focusing on a centralized, robust system for bot creation, limit enforcement, and behavior definition, with initial successful implementation and testing of individual limits and backend automation.
</analysis>

<product_requirements>
The GemPlay application aims to enhance its Admin Panel, specifically improving bot management, UI consistency, and financial logic within its asynchronous PvP gem betting game. Initially, key requirements included displaying games in cycle as Active Bets and removing specific UI elements. UI consistency extended to sidebar styling and dynamic pagination in Admin Panel settings. A core financial requirement was to prevent commission freezing for regular bot-created games. Subsequent user requests emphasized code cleanup, populating Registration Date, repositioning action buttons, and implementing a tabbed Settings section for Priority System, Individual Limits, and Cycles System within Regular Bots. A critical bug involved bots ignoring global active bet limits (e.g., 50 for Regular, 30 for Human). Due to persistent issues, the user later requested a complete re-architecture of the Regular Bots system, detailing new models for bots and global settings, defining various behavioral modes (creation, profit, priority), and emphasizing a single point of entry for bet creation with comprehensive limit validation. Parameters for bot creation, bet ranges, win rates, cycle games, and global/individual limits were also specified.
</product_requirements>

<key_technical_concepts>
- **React**: Frontend UI development (components, state, hooks).
- **FastAPI**: Backend RESTful API for game logic, database interactions.
- **MongoDB**: NoSQL database for persistence.
- **Asynchronous Programming**: Python's  for background tasks.
- **Code Refactoring**: Modularization, component splitting, re-architecture.
- **API Integration**: Standardized client-server communication ( hook).
- **Commit-Reveal Scheme**: Security protocol for game fairness.
</key_technical_concepts>

<code_architecture>
The application uses a standard MERN-stack architecture (React frontend, FastAPI backend, MongoDB database).



-   : The central FastAPI backend.
    -   **Summary**: Handles API endpoints, game logic, and database interactions. It was the primary target for bot limit fixes and is now being re-architected.
    -   **Changes**:
        -   Old bot-related functions (, , , ) were deleted.
        -   New  model was introduced to include , , , , , , , , , , , , .
        -   A  model was defined for system-wide bot configurations.
        -   A  class was created to encapsulate bot management logic.
        -   A new unified  function was added for all bot bet creation, implementing global, individual, and timing limit checks.
        -   New  (inside ) for background bet creation, replacing the old one.
        -   The  endpoint was updated to use the new  model and logic.
        -    endpoint updated to use new display limits from .
        -   The database name used in connection changed from  to  in  to match .
        -   Modified  endpoints for  and  persistence.

-   : Main component for managing regular bots.
    -   **Summary**: Originally contained extensive bot management logic, which was then refactored. Now, it's being updated to support the new bot parameters.
    -   **Changes**:
        -   Initial cleanup removed unused states.
        -   Logic for stats cards and table was split into  and .
        -   Updated to display Registration Date and move action buttons to an Actions column.
        -   Modified to include a tabbed interface (Настройки - Settings) for Priority System, Individual Limits, and Cycles System.
        -   The Create Regular Bot modal's form state () was updated to include all new parameters (e.g., , , , , , , , , , ).
        -   The  function and  were updated to handle new parameters.

-    (NEW): Displays summarized bot-related information. (Created in Stage 2.4).
-    (NEW): Displays the detailed table of bots. (Refactored from  in Stage 2.4).
-    (NEW): Centralizes API base URL (/api).
-    (NEW): Standardizes API request handling.
-    (NEW): Centralizes state and logic for managing bots.
-    (NEW): Encapsulates common bot-related operations.
-   : Documentation for the bot system. Used for understanding bot algorithms.
-   : Component for Admin Panel interface settings.
    -   **Summary**: Manages frontend settings for display limits (pagination, etc.).
    -   **Changes**: Added new input fields for Max Available Live Players and Max Available Bots display limits.
    -   Updated state and API calls to persist these new display settings.
-   : Displays the main game lobby and bot player lists.
    -   **Summary**: Displays  whose count determines the Bot Players section heading.
    -   **Changes**: Identified that the 100 limit seen was  in the backend API response, a display limit, not a functional bet limit.

</code_architecture>

<pending_tasks>
- Add an application-style icon on the left side of Активные ставки — Bot modal title.
- Perform comprehensive frontend testing of the Активные ставки — Bot modal to verify all implemented UI and data display features.
- Fully integrate the Commit-Reveal system with the new bot logic, specifically the part where the bot analyzes the player's move and adjusts its own move to meet the target win rate based on total gem value.
- Complete the frontend implementation for displaying the new bot parameters and features in the Admin Panel beyond the Create Bot modal.
</pending_tasks>

<current_work>
Immediately prior to this summary, the AI engineer was in the process of re-architecting the Regular Bots system due to persistent issues with global and individual bet limits not being enforced. This re-architecture was explicitly requested by the user.

The work involves:
1.  **Backend Re-architecture**:
    *   Deletion of old, problematic bot-related functions from .
    *   Definition of a new, comprehensive  model to store all bot configurations (e.g., , , , , ).
    *   Implementation of a  class that encapsulates core bot logic, including a centralized  function. This function is designed as the single entry point for all bot bet creation, ensuring all global, individual, and timing limits are checked *before* a bet is created.
    *   Integration of  (within ) as the primary background process for automated bet creation, replacing the fragmented old system. This task now runs every 5 seconds.
    *   Updates to the  API endpoint to utilize the new  model and its parameters during bot creation.
    *   Fixes to ensure old bots (without the new fields) gracefully handle  values for new limit-related fields.
    *   Correction of the MongoDB database name used in  from  to  to align with  settings.
    *   Added display limit settings to  and updated  to respect these new display limits.

2.  **Frontend Updates**:
    *   The Create Regular Bot modal within  has been updated. Its  state and associated validation () now include all the new parameters defined in the  model, allowing administrators to configure detailed bot behavior from the UI.
    *   The  function now correctly sends these new parameters to the backend.

The system is now confirmed to successfully create new bots with the specified parameters, and the **individual limits are working correctly**, blocking bots from creating bets beyond their assigned limits, as seen in the backend logs (e.g., ). The new bot automation task is also successfully running and enforcing these limits. However, there's a need for further integration with Commit-Reveal logic and completion of the Admin Panel UI updates.
</current_work>

<optional_next_step>
Continue with Этап 3: Интеграция Commit-Reveal с игровой логикой to complete the adaptive logic for Обычные боты.
</optional_next_step>
