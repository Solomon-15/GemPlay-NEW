// –ü–∞—Ç—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤ –≤ RegularBotsManagement.js

// 1. –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 121 (–ø–æ—Å–ª–µ currentPreset):

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤
  const [isQuickLaunchModalOpen, setIsQuickLaunchModalOpen] = useState(false);
  const [quickLaunchPresets, setQuickLaunchPresets] = useState([]);
  const [isCreatingPreset, setIsCreatingPreset] = useState(false);
  const [currentPreset, setCurrentPreset] = useState({
    name: '',
    buttonName: '',
    buttonColor: 'blue',
    min_bet_amount: 1.0,
    max_bet_amount: 50.0,
    wins_percentage: 44.0,
    losses_percentage: 36.0,
    draws_percentage: 20.0,
    cycle_games: 16,
    pause_between_cycles: 5,
    pause_on_draw: 5
  });

// 2. –î–æ–±–∞–≤–∏—Ç—å useEffect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤:

  useEffect(() => {
    try {
      const saved = localStorage.getItem('quickLaunchPresets');
      if (saved) {
        const presets = JSON.parse(saved);
        setQuickLaunchPresets(presets);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤:', error);
    }
  }, []);

// 3. –ó–∞–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç—Ä–æ–∫–∞ 2017):
// –°:
<h3 className="text-lg font-rajdhani font-bold text-white">–°–ø–∏—Å–æ–∫ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤</h3>

// –ù–∞:
<div className="flex justify-between items-center">
  <h3 className="text-lg font-rajdhani font-bold text-white">–°–ø–∏—Å–æ–∫ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤</h3>
  <button
    onClick={() => setIsQuickLaunchModalOpen(true)}
    className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-rajdhani font-bold text-sm transition-colors flex items-center space-x-2"
    title="–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤ –ø–æ –ø—Ä–µ—Å–µ—Ç–∞–º"
  >
    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
    </svg>
    <span>‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫</span>
  </button>
</div>

// 4. –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–ø–µ—Ä–µ–¥ {inputModal}):

{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤ */}
{isQuickLaunchModalOpen && (
  <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div className="bg-surface-card border border-accent-primary border-opacity-50 rounded-lg w-full max-w-5xl mx-4 max-h-[85vh] overflow-hidden">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex justify-between items-center p-4 border-b border-border-primary bg-surface-sidebar">
        <div className="flex items-center space-x-3">
          <div className="p-2 bg-blue-600 rounded-lg">
            <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
          </div>
          <div>
            <h3 className="font-rajdhani text-xl font-bold text-white">‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤</h3>
            <p className="text-text-secondary text-sm">–ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤ –ø–æ –≥–æ—Ç–æ–≤—ã–º –ø—Ä–µ—Å–µ—Ç–∞–º</p>
          </div>
        </div>
        <button
          onClick={() => setIsQuickLaunchModalOpen(false)}
          className="text-text-secondary hover:text-white transition-colors"
        >
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <div className="p-6 overflow-y-auto max-h-[calc(85vh-120px)]">
        {/* –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤ */}
        <div className="mb-6">
          <div className="flex items-center justify-between mb-4">
            <h4 className="font-rajdhani text-lg font-bold text-white">–ì–æ—Ç–æ–≤—ã–µ –ø—Ä–µ—Å–µ—Ç—ã</h4>
            <button
              onClick={() => setIsCreatingPreset(!isCreatingPreset)}
              className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-rajdhani font-bold text-sm transition-colors flex items-center space-x-2"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              <span>–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç</span>
            </button>
          </div>

          {/* –°–µ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤ */}
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-3">
            {quickLaunchPresets.map((preset) => (
              <div key={preset.id} className="relative group">
                <button
                  onClick={async () => {
                    try {
                      const token = localStorage.getItem('token');
                      
                      const botData = {
                        name: `${preset.name}-${Date.now()}`,
                        min_bet_amount: preset.min_bet_amount,
                        max_bet_amount: preset.max_bet_amount,
                        wins_percentage: preset.wins_percentage,
                        losses_percentage: preset.losses_percentage,
                        draws_percentage: preset.draws_percentage,
                        cycle_games: preset.cycle_games,
                        pause_between_cycles: preset.pause_between_cycles,
                        pause_on_draw: preset.pause_on_draw,
                        wins_count: Math.round(preset.cycle_games * preset.wins_percentage / 100),
                        losses_count: Math.round(preset.cycle_games * preset.losses_percentage / 100),
                        draws_count: Math.round(preset.cycle_games * preset.draws_percentage / 100)
                      };
                      
                      const response = await axios.post(`${API}/admin/bots/create-regular`, botData, {
                        headers: { Authorization: `Bearer ${token}` }
                      });
                      
                      showSuccessRU(`–ë–æ—Ç "${botData.name}" —Å–æ–∑–¥–∞–Ω –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞ "${preset.name}"`);
                      await fetchBotsList();
                      
                    } catch (error) {
                      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞:', error);
                      showErrorRU(error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞ –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞');
                    }
                  }}
                  className={`w-full px-3 py-2 text-white rounded-lg font-rajdhani font-bold text-sm transition-colors border ${
                    preset.buttonColor === 'green' ? 'bg-green-600 hover:bg-green-700 border-green-500' :
                    preset.buttonColor === 'red' ? 'bg-red-600 hover:bg-red-700 border-red-500' :
                    preset.buttonColor === 'yellow' ? 'bg-yellow-600 hover:bg-yellow-700 border-yellow-500' :
                    preset.buttonColor === 'purple' ? 'bg-purple-600 hover:bg-purple-700 border-purple-500' :
                    preset.buttonColor === 'orange' ? 'bg-orange-600 hover:bg-orange-700 border-orange-500' :
                    'bg-blue-600 hover:bg-blue-700 border-blue-500'
                  }`}
                  title={`–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: ${preset.name}`}
                >
                  {preset.buttonName}
                </button>
                <button
                  onClick={() => {
                    const updatedPresets = quickLaunchPresets.filter(p => p.id !== preset.id);
                    localStorage.setItem('quickLaunchPresets', JSON.stringify(updatedPresets));
                    setQuickLaunchPresets(updatedPresets);
                    showSuccessRU('–ü—Ä–µ—Å–µ—Ç —É–¥–∞–ª–µ–Ω');
                  }}
                  className="absolute -top-1 -right-1 w-5 h-5 bg-red-600 hover:bg-red-700 text-white rounded-full text-xs opacity-0 group-hover:opacity-100 transition-opacity"
                  title="–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç"
                >
                  √ó
                </button>
              </div>
            ))}
            
            {quickLaunchPresets.length === 0 && (
              <div className="col-span-full text-center text-text-secondary py-8">
                <div className="text-4xl mb-2">üéØ</div>
                <p>–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤</p>
                <p className="text-sm">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤</p>
              </div>
            )}
          </div>
        </div>

        {/* –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–µ—Å–µ—Ç–æ–≤ */}
        {isCreatingPreset && (
          <div className="bg-surface-sidebar rounded-lg p-6">
            <h4 className="font-rajdhani text-lg font-bold text-white mb-4">üõ†Ô∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–µ—Å–µ—Ç–æ–≤</h4>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div>
                <label className="block text-text-secondary text-sm mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞</label>
                <input
                  type="text"
                  value={currentPreset.name}
                  onChange={(e) => setCurrentPreset(prev => ({ ...prev, name: e.target.value }))}
                  className="w-full px-3 py-2 bg-surface-card border border-border-primary rounded-lg text-white font-roboto text-sm focus:outline-none focus:border-accent-primary"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π"
                />
              </div>

              <div>
                <label className="block text-text-secondary text-sm mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</label>
                <input
                  type="text"
                  value={currentPreset.buttonName}
                  onChange={(e) => setCurrentPreset(prev => ({ ...prev, buttonName: e.target.value }))}
                  className="w-full px-3 py-2 bg-surface-card border border-border-primary rounded-lg text-white font-roboto text-sm focus:outline-none focus:border-accent-primary"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: üî• –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π"
                />
              </div>

              <div>
                <label className="block text-text-secondary text-sm mb-2">–¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏</label>
                <select
                  value={currentPreset.buttonColor}
                  onChange={(e) => setCurrentPreset(prev => ({ ...prev, buttonColor: e.target.value }))}
                  className="w-full px-3 py-2 bg-surface-card border border-border-primary rounded-lg text-white font-roboto text-sm focus:outline-none focus:border-accent-primary"
                >
                  <option value="blue">üîµ –°–∏–Ω–∏–π</option>
                  <option value="green">üü¢ –ó–µ–ª–µ–Ω—ã–π</option>
                  <option value="red">üî¥ –ö—Ä–∞—Å–Ω—ã–π</option>
                  <option value="yellow">üü° –ñ–µ–ª—Ç—ã–π</option>
                  <option value="purple">üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π</option>
                  <option value="orange">üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π</option>
                </select>
              </div>

              {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è... */}
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={() => setIsCreatingPreset(false)}
                className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg font-rajdhani font-bold text-sm transition-colors"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={() => {
                  // –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
                }}
                className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-rajdhani font-bold text-sm transition-colors"
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç
              </button>
            </div>
          </div>
        )}
      </div>

      {/* –ü–æ–¥–≤–∞–ª */}
      <div className="flex justify-between items-center p-4 border-t border-border-primary bg-surface-sidebar">
        <div className="text-text-secondary text-sm">
          üí° <strong>–°–æ–≤–µ—Ç:</strong> –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –∫–ª–∏–∫–∞—è –ø–æ –∫–Ω–æ–ø–∫–µ –ø—Ä–µ—Å–µ—Ç–∞ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ
        </div>
        <button
          onClick={() => setIsQuickLaunchModalOpen(false)}
          className="px-6 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg font-rajdhani font-bold transition-colors"
        >
          –ó–∞–∫—Ä—ã—Ç—å
        </button>
      </div>
    </div>
  </div>
)}