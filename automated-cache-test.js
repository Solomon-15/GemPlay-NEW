// ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–°–¢ –ö–ù–û–ü–ö–ò "–û–ß–ò–°–¢–ò–¢–¨ –ö–≠–®"
// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

console.log('ü§ñ === –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–°–¢ –û–ß–ò–°–¢–ö–ò –ö–≠–®–ê ===');

class CacheTestAutomation {
    constructor() {
        this.testResults = {};
        this.testStartTime = Date.now();
    }

    // üìä –ê–Ω–∞–ª–∏–∑ –∫—ç—à–∞
    analyzeCacheState() {
        const state = {
            localStorage: {
                size: this.getStorageSize(localStorage),
                items: Object.keys(localStorage).length,
                keys: Object.keys(localStorage)
            },
            sessionStorage: {
                size: this.getStorageSize(sessionStorage),
                items: Object.keys(sessionStorage).length,
                keys: Object.keys(sessionStorage)
            },
            cacheAPI: {
                supported: 'caches' in window
            },
            timestamp: new Date().toISOString()
        };

        return state;
    }

    getStorageSize(storage) {
        let size = 0;
        for (let key in storage) {
            if (storage.hasOwnProperty(key)) {
                size += storage[key].length + key.length;
            }
        }
        return size;
    }

    // üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async createTestData() {
        console.log('üéØ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        
        // localStorage —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const testData = {
            'test_cache_user': JSON.stringify({ id: 123, name: 'Test User', gems: 1000 }),
            'test_cache_dashboard': JSON.stringify({ stats: { users: 100, games: 50, bots: 25 } }),
            'test_cache_games': JSON.stringify({ active: [1, 2, 3], completed: [4, 5, 6] }),
            'test_cache_bots': JSON.stringify({ human_bots: 5, regular_bots: 10 }),
            'test_large_data_1': 'A'.repeat(5000), // 5KB
            'test_large_data_2': 'B'.repeat(3000), // 3KB
            'test_large_data_3': 'C'.repeat(2000)  // 2KB
        };

        for (const [key, value] of Object.entries(testData)) {
            localStorage.setItem(key, value);
        }

        // sessionStorage —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        sessionStorage.setItem('test_session_cache', JSON.stringify({ 
            session: 'test_session', 
            timestamp: Date.now(),
            data: 'X'.repeat(1000)
        }));
        sessionStorage.setItem('test_temp_session', 'Temporary session data');

        // Cache API —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if ('caches' in window) {
            try {
                const cache = await caches.open('test-gemplay-cache');
                await cache.put('/test-api/dashboard', new Response(JSON.stringify({ test: 'data' })));
                await cache.put('/test-api/users', new Response(JSON.stringify({ users: [] })));
                console.log('‚úÖ Cache API —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã');
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Cache API –¥–∞–Ω–Ω—ã—Ö:', error.message);
            }
        }

        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã');
        return testData;
    }

    // üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    findClearCacheButton() {
        console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞...');
        
        // –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏
        const selectors = [
            'button[title*="–û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à"]',
            'button[title*="–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"]',
            'button:contains("–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à")',
            'button[onclick*="clearCache"]',
            '[data-testid="clear-cache-button"]'
        ];

        for (const selector of selectors) {
            try {
                const button = document.querySelector(selector);
                if (button) {
                    console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
                    return button;
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
            }
        }

        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        const buttons = document.querySelectorAll('button');
        for (const button of buttons) {
            if (button.textContent.includes('–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à') || 
                button.textContent.includes('Clear Cache')) {
                console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É');
                return button;
            }
        }

        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return null;
    }

    // üß™ –¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏
    testButtonFunctionality() {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏...');
        
        const button = this.findClearCacheButton();
        if (!button) {
            return {
                found: false,
                error: '–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            };
        }

        const buttonState = {
            found: true,
            text: button.textContent.trim(),
            disabled: button.disabled,
            className: button.className,
            hasClickHandler: !!(button.onclick || button.getAttribute('onclick')),
            hasEventListeners: !!button.getEventListeners, // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ dev tools
            visible: button.offsetParent !== null,
            inViewport: this.isInViewport(button)
        };

        console.log('üìã –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:', buttonState);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
        const issues = [];
        if (buttonState.disabled) issues.push('–ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
        if (!buttonState.visible) issues.push('–ö–Ω–æ–ø–∫–∞ –Ω–µ –≤–∏–¥–Ω–∞');
        if (!buttonState.hasClickHandler) issues.push('–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–∞');

        if (issues.length > 0) {
            console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:', issues);
        } else {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
        }

        return {
            ...buttonState,
            issues,
            ready: issues.length === 0
        };
    }

    isInViewport(element) {
        const rect = element.getBoundingClientRect();
        return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth)
        );
    }

    // üé≠ –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    async simulateAdminPanelCacheClear() {
        console.log('üé≠ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∏–∑ AdminPanel.js...');
        
        try {
            // 1. –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ)
            console.log('1Ô∏è‚É£ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            const confirmed = true; // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            
            if (!confirmed) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é');
                return { cancelled: true };
            }

            // 2. –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            console.log('2Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...');
            const loadingState = { clearCacheLoading: true };

            // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            console.log('3Ô∏è‚É£ –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å...');
            const serverResponse = await this.simulateServerRequest();

            if (serverResponse.success) {
                // 4. –û—á–∏—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫—ç—à (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
                console.log('4Ô∏è‚É£ –û—á–∏—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫—ç—à...');
                await this.clearClientCache();

                // 5. –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                console.log('5Ô∏è‚É£ –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
                // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è fetchDashboardStats()

                console.log('‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
                return {
                    success: true,
                    serverResponse,
                    clientCacheCleared: true,
                    dataRefreshed: true
                };
            } else {
                throw new Error(serverResponse.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }

        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: ${error.message}`);
            return {
                success: false,
                error: error.message
            };
        }
    }

    async simulateServerRequest() {
        console.log('üì° –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ /api/admin/cache/clear...');
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ä–≤–µ—Ä–∞
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
        return {
            success: true,
            message: "–°–µ—Ä–≤–µ—Ä–Ω—ã–π –∫—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω. –û—á–∏—â–µ–Ω–æ 5 —Ç–∏–ø–æ–≤ –∫—ç—à–∞.",
            cache_types_cleared: [
                "Dashboard Statistics Cache",
                "User Data Cache", 
                "Game Statistics Cache",
                "Bot Performance Cache",
                "System Metrics Cache"
            ],
            cleared_count: 5,
            timestamp: new Date().toISOString()
        };
    }

    async clearClientCache() {
        console.log('üßπ –û—á–∏—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫—ç—à...');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
        const token = localStorage.getItem('token') || 'test-admin-token';
        const user = localStorage.getItem('user') || JSON.stringify({ 
            id: 1, 
            role: 'ADMIN', 
            email: 'admin@test.com' 
        });

        console.log('   üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

        // –û—á–∏—â–∞–µ–º localStorage
        console.log('   üóëÔ∏è –û—á–∏—â–∞–µ–º localStorage...');
        localStorage.clear();
        localStorage.setItem('token', token);
        localStorage.setItem('user', user);

        // –û—á–∏—â–∞–µ–º sessionStorage
        console.log('   üóëÔ∏è –û—á–∏—â–∞–µ–º sessionStorage...');
        sessionStorage.clear();

        // –û—á–∏—â–∞–µ–º Cache API
        if ('caches' in window) {
            console.log('   üóëÔ∏è –û—á–∏—â–∞–µ–º Cache API...');
            const cacheNames = await caches.keys();
            await Promise.all(
                cacheNames.map(cacheName => caches.delete(cacheName))
            );
            console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫—ç—à–µ–π: ${cacheNames.length}`);
        }

        console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫—ç—à –æ—á–∏—â–µ–Ω');
    }

    // üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞
    async runFullTest() {
        console.log('üöÄ === –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ê ===');
        console.log(`üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date().toLocaleString()}`);
        console.log('');

        try {
            // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            console.log('üéØ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
            await this.createTestData();
            this.testResults.testDataCreated = true;

            // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û
            console.log('\nüîç –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –î–û –æ—á–∏—Å—Ç–∫–∏');
            this.testResults.before = this.analyzeCacheState();
            console.log(`üìä –ö—ç—à –î–û: ${Math.round(this.testResults.before.localStorage.size / 1024 * 100) / 100} KB`);

            // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            console.log('\nüß™ –®–∞–≥ 3: –¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏');
            this.testResults.buttonTest = this.testButtonFunctionality();

            // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—á–∏—Å—Ç–∫–∏
            console.log('\nüé≠ –®–∞–≥ 4: –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏');
            this.testResults.clearSimulation = await this.simulateAdminPanelCacheClear();

            // 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï
            console.log('\nüìà –®–∞–≥ 5: –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏');
            this.testResults.after = this.analyzeCacheState();
            console.log(`üìä –ö—ç—à –ü–û–°–õ–ï: ${Math.round(this.testResults.after.localStorage.size / 1024 * 100) / 100} KB`);

            // 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            console.log('\nüìã –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞');
            const report = this.generateTestReport();

            console.log('\nüéâ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===');
            return report;

        } catch (error) {
            console.log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error.message}`);
            this.testResults.criticalError = error.message;
            return this.generateTestReport();
        }
    }

    // üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    generateTestReport() {
        const testEndTime = Date.now();
        const testDuration = Math.round((testEndTime - this.testStartTime) / 1000 * 100) / 100;

        const report = {
            metadata: {
                testTimestamp: new Date().toISOString(),
                testDuration: `${testDuration} —Å–µ–∫—É–Ω–¥`,
                userAgent: navigator.userAgent,
                url: window.location.href
            },
            
            results: {
                testDataCreated: this.testResults.testDataCreated || false,
                buttonFound: this.testResults.buttonTest?.found || false,
                buttonReady: this.testResults.buttonTest?.ready || false,
                simulationSuccess: this.testResults.clearSimulation?.success || false,
                cacheActuallyCleared: this.calculateCacheCleared()
            },

            cacheAnalysis: {
                before: this.testResults.before,
                after: this.testResults.after,
                difference: this.calculateCacheDifference()
            },

            buttonAnalysis: this.testResults.buttonTest,
            simulationResults: this.testResults.clearSimulation,
            
            issues: this.identifyIssues(),
            recommendations: this.generateRecommendations()
        };

        // –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
        this.printFormattedReport(report);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
        window.lastCacheTestReport = report;
        
        return report;
    }

    calculateCacheCleared() {
        if (!this.testResults.before || !this.testResults.after) {
            return { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' };
        }

        const before = this.testResults.before;
        const after = this.testResults.after;

        return {
            localStorage: {
                sizeBefore: before.localStorage.size,
                sizeAfter: after.localStorage.size,
                cleared: before.localStorage.size - after.localStorage.size,
                percentCleared: before.localStorage.size > 0 
                    ? Math.round((1 - after.localStorage.size / before.localStorage.size) * 100)
                    : 0
            },
            sessionStorage: {
                sizeBefore: before.sessionStorage.size,
                sizeAfter: after.sessionStorage.size,
                cleared: before.sessionStorage.size - after.sessionStorage.size,
                percentCleared: before.sessionStorage.size > 0 
                    ? Math.round((1 - after.sessionStorage.size / before.sessionStorage.size) * 100)
                    : 0
            }
        };
    }

    calculateCacheDifference() {
        const cleared = this.calculateCacheCleared();
        if (cleared.error) return cleared;

        return {
            totalSizeCleared: cleared.localStorage.cleared + cleared.sessionStorage.cleared,
            totalSizeClearedKB: Math.round((cleared.localStorage.cleared + cleared.sessionStorage.cleared) / 1024 * 100) / 100,
            effectiveClearing: (cleared.localStorage.percentCleared + cleared.sessionStorage.percentCleared) / 2
        };
    }

    identifyIssues() {
        const issues = [];

        if (!this.testResults.buttonTest?.found) {
            issues.push('üö® –ö–†–ò–¢–ò–ß–ù–û: –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM');
        }

        if (this.testResults.buttonTest?.found && !this.testResults.buttonTest?.ready) {
            issues.push('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
            if (this.testResults.buttonTest.issues) {
                issues.push(...this.testResults.buttonTest.issues.map(issue => `   ‚Ä¢ ${issue}`));
            }
        }

        if (!this.testResults.clearSimulation?.success) {
            issues.push('‚ùå –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–Ω–æ');
        }

        const cleared = this.calculateCacheCleared();
        if (!cleared.error) {
            if (cleared.localStorage.percentCleared < 50) {
                issues.push('‚ö†Ô∏è localStorage –æ—á–∏—â–µ–Ω –º–µ–Ω–µ–µ —á–µ–º –Ω–∞ 50%');
            }
            if (cleared.sessionStorage.percentCleared < 90) {
                issues.push('‚ö†Ô∏è sessionStorage –æ—á–∏—â–µ–Ω –º–µ–Ω–µ–µ —á–µ–º –Ω–∞ 90%');
            }
        }

        return issues;
    }

    generateRecommendations() {
        const recommendations = [];

        if (!this.testResults.buttonTest?.found) {
            recommendations.push('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
            recommendations.push('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ADMIN)');
            recommendations.push('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç AdminPanel –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }

        if (this.testResults.buttonTest?.found && this.testResults.buttonTest?.disabled) {
            recommendations.push('1. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
            recommendations.push('2. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
        }

        // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–µ
        recommendations.push('‚ö†Ô∏è –í–ê–ñ–ù–û: –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ù–ï –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞');
        recommendations.push('   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ cache_clear_patch.txt');
        recommendations.push('   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ Redis/Memcached');

        return recommendations;
    }

    printFormattedReport(report) {
        console.log('\nüìã === –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
        console.log(`üïê –í—Ä–µ–º—è: ${new Date(report.metadata.testTimestamp).toLocaleString()}`);
        console.log(`‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${report.metadata.testDuration}`);
        console.log('');

        console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:');
        Object.entries(report.results).forEach(([key, value]) => {
            const status = value ? '‚úÖ' : '‚ùå';
            const label = key.replace(/([A-Z])/g, ' $1').toLowerCase();
            console.log(`   ${status} ${label}: ${value}`);
        });

        if (report.cacheAnalysis.difference && !report.cacheAnalysis.difference.error) {
            console.log('\nüìä –ê–ù–ê–õ–ò–ó –û–ß–ò–°–¢–ö–ò –ö–≠–®–ê:');
            console.log(`   üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –æ—á–∏—â–µ–Ω: ${report.cacheAnalysis.difference.totalSizeClearedKB} KB`);
            console.log(`   üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏: ${Math.round(report.cacheAnalysis.difference.effectiveClearing)}%`);
        }

        if (report.issues.length > 0) {
            console.log('\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
            report.issues.forEach(issue => console.log(`   ${issue}`));
        }

        if (report.recommendations.length > 0) {
            console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
            report.recommendations.forEach(rec => console.log(`   ${rec}`));
        }

        console.log('\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: window.lastCacheTestReport');
    }
}

// üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞
async function runAutomatedCacheTest() {
    const tester = new CacheTestAutomation();
    return await tester.runFullTest();
}

// üéØ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏
function quickButtonTest() {
    console.log('‚ö° === –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ö–ù–û–ü–ö–ò ===');
    const tester = new CacheTestAutomation();
    const buttonTest = tester.testButtonFunctionality();
    
    if (buttonTest.found && buttonTest.ready) {
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
        console.log('üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: runAutomatedCacheTest()');
    } else {
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
        if (buttonTest.issues) {
            buttonTest.issues.forEach(issue => console.log(`   ‚Ä¢ ${issue}`));
        }
    }
    
    return buttonTest;
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.runAutomatedCacheTest = runAutomatedCacheTest;
window.quickButtonTest = quickButtonTest;
window.CacheTestAutomation = CacheTestAutomation;

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
console.log('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –∫—ç—à–∞ –∑–∞–≥—Ä—É–∂–µ–Ω!');
console.log('üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
console.log('   ‚Ä¢ runAutomatedCacheTest() - –ø–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç');
console.log('   ‚Ä¢ quickButtonTest() - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–Ω–æ–ø–∫–∏');
console.log('');
console.log('üéØ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: runAutomatedCacheTest()');