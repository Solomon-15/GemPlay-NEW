#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–æ–≤
"""

import asyncio
import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append('/workspace/backend')

async def diagnose_cycle_startup_issue():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–æ–≤"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ—á–µ–º—É –Ω–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è —Ü–∏–∫–ª—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–æ–≤?")
    print("=" * 70)
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏
        from server import (
            db, maintain_all_bots_active_bets, create_full_bot_cycle,
            Bot, BotType
        )
        print("‚úÖ –ú–æ–¥—É–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await db.list_collection_names()
            print("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω")
            db_available = True
        except Exception as e:
            print(f"‚ùå MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            db_available = False
            return await simulate_diagnosis()
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
        test_bot_id = "diagnosis_bot_001"
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        await cleanup_test_bot(test_bot_id)
        
        # –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        test_bot = Bot(
            id=test_bot_id,
            name="DiagnosisBot",
            bot_type=BotType.REGULAR,
            min_bet_amount=1.0,
            max_bet_amount=100.0,
            wins_percentage=44.0,
            losses_percentage=36.0,
            draws_percentage=20.0,
            wins_count=7,
            losses_count=6,
            draws_count=3,
            cycle_games=16,
            pause_between_cycles=5,
            is_active=True,
            has_completed_cycles=False  # –í–∞–∂–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        )
        
        print(f"\n1Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ë–û–¢–ê:")
        print(f"   ID: {test_bot.id}")
        print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {test_bot.is_active}")
        print(f"   –¢–∏–ø: {test_bot.bot_type}")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {test_bot.min_bet_amount}-{test_bot.max_bet_amount}, {test_bot.cycle_games} –∏–≥—Ä")
        print(f"   has_completed_cycles: {test_bot.has_completed_cycles}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await db.bots.insert_one(test_bot.dict())
        print("‚úÖ –ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
        saved_bot = await db.bots.find_one({"id": test_bot_id})
        if saved_bot:
            print("‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
        else:
            print("‚ùå –ë–æ—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ë–î!")
            return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        print(f"\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ù–ê–ß–ê–õ–¨–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø:")
        
        # –°—á–∏—Ç–∞–µ–º –∏–≥—Ä—ã –±–æ—Ç–∞
        total_games = await db.games.count_documents({
            "creator_id": test_bot_id,
            "status": {"$in": ["WAITING", "ACTIVE", "COMPLETED"]}
        })
        
        active_games = await db.games.count_documents({
            "creator_id": test_bot_id,
            "status": {"$in": ["WAITING", "ACTIVE"]}
        })
        
        completed_games = await db.games.count_documents({
            "creator_id": test_bot_id,
            "status": "COMPLETED"
        })
        
        print(f"   –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {active_games}")
        print(f"   –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–≥—Ä: {completed_games}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–∞
        needs_initial_cycle = total_games == 0
        cycle_fully_completed = (total_games >= 16 and active_games == 0 and completed_games > 0)
        
        print(f"   needs_initial_cycle: {needs_initial_cycle}")
        print(f"   cycle_fully_completed: {cycle_fully_completed}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É maintain_all_bots_active_bets
        print(f"\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò:")
        print("   –ó–∞–ø—É—Å–∫–∞–µ–º maintain_all_bots_active_bets()...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        await maintain_all_bots_active_bets()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        games_after = await db.games.count_documents({
            "creator_id": test_bot_id,
            "status": {"$in": ["WAITING", "ACTIVE", "COMPLETED"]}
        })
        
        print(f"   –ò–≥—Ä –ø–æ—Å–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {games_after}")
        
        if games_after > 0:
            print("‚úÖ –¶–ò–ö–õ –°–û–ó–î–ê–õ–°–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò!")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
            games = await db.games.find({"creator_id": test_bot_id}).to_list(None)
            
            print(f"   –°–æ–∑–¥–∞–Ω–æ –∏–≥—Ä: {len(games)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º intended_result
            results_count = {}
            total_amount = 0
            for game in games:
                result = game.get("metadata", {}).get("intended_result", "unknown")
                results_count[result] = results_count.get(result, 0) + 1
                total_amount += game.get("bet_amount", 0)
            
            print(f"   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {results_count}")
            print(f"   –û–±—â–∞—è —Å—É–º–º–∞: ${total_amount}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
            expected_distribution = {"win": 7, "loss": 6, "draw": 3}
            distribution_correct = all(
                results_count.get(key, 0) == expected_distribution[key] 
                for key in expected_distribution
            )
            
            amount_correct = total_amount == 809
            
            if distribution_correct and amount_correct:
                print("‚úÖ –¶–∏–∫–ª —Å–æ–∑–¥–∞–Ω —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏!")
                print(f"   ‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {results_count}")
                print(f"   ‚úÖ –û–±—â–∞—è —Å—É–º–º–∞: ${total_amount}")
                return "SUCCESS"
            else:
                print("‚ùå –¶–∏–∫–ª —Å–æ–∑–¥–∞–Ω —Å –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏!")
                print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_distribution}, —Å—É–º–º–∞: 809")
                print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {results_count}, —Å—É–º–º–∞: {total_amount}")
                return "INCORRECT_PARAMETERS"
        else:
            print("‚ùå –¶–ò–ö–õ –ù–ï –°–û–ó–î–ê–õ–°–Ø!")
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø–æ—á–µ–º—É
            print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´:")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
            fresh_bot = await db.bots.find_one({"id": test_bot_id})
            if fresh_bot:
                print(f"   –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {fresh_bot.get('is_active', False)}")
                print(f"   –¢–∏–ø –±–æ—Ç–∞: {fresh_bot.get('bot_type', 'Unknown')}")
                print(f"   has_completed_cycles: {fresh_bot.get('has_completed_cycles', False)}")
            else:
                print("   ‚ùå –ë–æ—Ç –∏—Å—á–µ–∑ –∏–∑ –ë–î!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤
            if needs_initial_cycle:
                print("   ‚úÖ –£—Å–ª–æ–≤–∏–µ needs_initial_cycle –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                print("   ‚ùå –ù–æ —Ü–∏–∫–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è - –ø—Ä–æ–±–ª–µ–º–∞ –≤ create_full_bot_cycle()")
            else:
                print("   ‚ùå –£—Å–ª–æ–≤–∏–µ needs_initial_cycle –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                print("   üîß –ü—Ä–æ–±–ª–µ–º–∞ –≤ –ª–æ–≥–∏–∫–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            
            return "CYCLE_NOT_CREATED"
    
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return await simulate_diagnosis()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return "ERROR"
    
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            await cleanup_test_bot(test_bot_id)
        except:
            pass

async def simulate_diagnosis():
    """–°–∏–º—É–ª—è—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–µ–∑ –ë–î"""
    print("\nüé≠ –°–ò–ú–£–õ–Ø–¶–ò–û–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
    print("=" * 50)
    
    print("üìã –ü–†–û–í–ï–†–Ø–ï–ú–´–ï –£–°–õ–û–í–ò–Ø –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –¶–ò–ö–õ–ê:")
    
    conditions = [
        {
            "name": "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω (is_active = True)",
            "check": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ maintain_all_bots_active_bets()",
            "status": "‚úÖ –î–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
        },
        {
            "name": "–¢–∏–ø –±–æ—Ç–∞ REGULAR",
            "check": "bot_type = 'REGULAR'",
            "status": "‚úÖ –î–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å"
        },
        {
            "name": "–ù–µ—Ç –∏–≥—Ä (total_games = 0)",
            "check": "needs_initial_cycle = True",
            "status": "‚úÖ –î–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True"
        },
        {
            "name": "–õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞",
            "check": "–£–±—Ä–∞–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ has_completed_cycles",
            "status": "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–¥–µ"
        },
        {
            "name": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞",
            "check": "bot_automation_loop() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫",
            "status": "‚ö†Ô∏è –ó–∞–≤–∏—Å–∏—Ç –æ—Ç MongoDB –∏ startup"
        }
    ]
    
    for condition in conditions:
        print(f"\n   üìã {condition['name']}:")
        print(f"      –ü—Ä–æ–≤–µ—Ä–∫–∞: {condition['check']}")
        print(f"      –°—Ç–∞—Ç—É—Å: {condition['status']}")
    
    print(f"\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
    
    issues = [
        {
            "issue": "MongoDB –Ω–µ –∑–∞–ø—É—â–µ–Ω",
            "solution": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å MongoDB",
            "priority": "–ö–†–ò–¢–ò–ß–ù–û"
        },
        {
            "issue": "bot_automation_loop() –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è",
            "solution": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ '‚úÖ Bot automation loop started'",
            "priority": "–ö–†–ò–¢–ò–ß–ù–û"
        },
        {
            "issue": "–û—à–∏–±–∫–∏ –≤ startup —Å–æ–±—ã—Ç–∏—è—Ö",
            "solution": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ @app.on_event('startup')",
            "priority": "–í–´–°–û–ö–ò–ô"
        },
        {
            "issue": "–û—à–∏–±–∫–∏ –≤ create_full_bot_cycle()",
            "solution": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫",
            "priority": "–í–´–°–û–ö–ò–ô"
        },
        {
            "issue": "–ë–æ—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å is_active = False",
            "solution": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–æ–≤",
            "priority": "–°–†–ï–î–ù–ò–ô"
        }
    ]
    
    for issue in issues:
        print(f"\n   ‚ùå {issue['issue']}:")
        print(f"      –†–µ—à–µ–Ω–∏–µ: {issue['solution']}")
        print(f"      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {issue['priority']}")
    
    return "SIMULATION_COMPLETED"

async def cleanup_test_bot(bot_id):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    try:
        from server import db
        await db.bots.delete_many({"id": bot_id})
        await db.games.delete_many({"creator_id": bot_id})
        await db.bot_profit_accumulators.delete_many({"bot_id": bot_id})
        await db.completed_cycles.delete_many({"bot_id": bot_id})
    except:
        pass

def check_server_logs_instructions():
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""
    print(f"\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï:")
    print("=" * 50)
    
    print("üîç –ß–¢–û –ü–†–û–í–ï–†–ò–¢–¨ –í –õ–û–ì–ê–• –°–ï–†–í–ï–†–ê:")
    
    log_checks = [
        {
            "message": "‚úÖ Bot automation loop started",
            "meaning": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å",
            "action": "–ï—Å–ª–∏ –ù–ï–¢ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ startup —Å–æ–±—ã—Ç–∏—è—Ö"
        },
        {
            "message": "‚úÖ Initial bot cycles check started", 
            "meaning": "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–æ–≤ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å",
            "action": "–ï—Å–ª–∏ –ù–ï–¢ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ startup_event_secondary()"
        },
        {
            "message": "ü§ñ Checking X active bots for cycle management",
            "meaning": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤",
            "action": "–ï—Å–ª–∏ X=0 - –±–æ—Ç—ã –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã"
        },
        {
            "message": "üîç Bot TestBot: cycle status - total_games=0",
            "meaning": "–ë–æ—Ç –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
            "action": "–ï—Å–ª–∏ –ù–ï–¢ - –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        },
        {
            "message": "üéØ Bot TestBot: no games found, starting new cycle",
            "meaning": "–ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å —Ü–∏–∫–ª",
            "action": "–ï—Å–ª–∏ –ù–ï–¢ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ª–æ–≥–∏–∫–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π"
        },
        {
            "message": "‚úÖ Bot TestBot created cycle of 16 bets",
            "meaning": "–¶–∏–∫–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
            "action": "–ï—Å–ª–∏ –ù–ï–¢ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ create_full_bot_cycle()"
        }
    ]
    
    for check in log_checks:
        print(f"\n   üìù '{check['message']}'")
        print(f"      –û–∑–Ω–∞—á–∞–µ—Ç: {check['meaning']}")
        print(f"      –ï—Å–ª–∏ –ù–ï–¢: {check['action']}")
    
    print(f"\nüöÄ –ü–û–®–ê–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
    steps = [
        "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: cd /workspace/backend && python3 server.py",
        "2. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ",
        "3. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
        "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ –≤ –ª–æ–≥–∞—Ö",
        "5. –ï—Å–ª–∏ –Ω–µ—Ç - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"
    ]
    
    for step in steps:
        print(f"   {step}")

async def test_cycle_creation_conditions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ª–æ–≤–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤"""
    print(f"\nüß™ –¢–ï–°–¢ –£–°–õ–û–í–ò–ô –°–û–ó–î–ê–ù–ò–Ø –¶–ò–ö–õ–û–í")
    print("=" * 50)
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞
    test_scenarios = [
        {
            "name": "–ù–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç",
            "bot_state": {
                "is_active": True,
                "bot_type": "REGULAR",
                "has_completed_cycles": False
            },
            "games_state": {
                "total_games": 0,
                "active_games": 0,
                "completed_games": 0
            },
            "expected_action": "–°–û–ó–î–ê–¢–¨ –¶–ò–ö–õ"
        },
        {
            "name": "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç",
            "bot_state": {
                "is_active": False,
                "bot_type": "REGULAR",
                "has_completed_cycles": False
            },
            "games_state": {
                "total_games": 0,
                "active_games": 0,
                "completed_games": 0
            },
            "expected_action": "–ü–†–û–ü–£–°–¢–ò–¢–¨"
        },
        {
            "name": "Human –±–æ—Ç",
            "bot_state": {
                "is_active": True,
                "bot_type": "HUMAN",
                "has_completed_cycles": False
            },
            "games_state": {
                "total_games": 0,
                "active_games": 0,
                "completed_games": 0
            },
            "expected_action": "–ü–†–û–ü–£–°–¢–ò–¢–¨"
        },
        {
            "name": "–ë–æ—Ç —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏",
            "bot_state": {
                "is_active": True,
                "bot_type": "REGULAR",
                "has_completed_cycles": True
            },
            "games_state": {
                "total_games": 10,
                "active_games": 5,
                "completed_games": 5
            },
            "expected_action": "–ñ–î–ê–¢–¨"
        }
    ]
    
    for scenario in test_scenarios:
        print(f"\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
        
        bot_state = scenario["bot_state"]
        games_state = scenario["games_state"]
        
        # –õ–æ–≥–∏–∫–∞ –∏–∑ maintain_all_bots_active_bets
        if not bot_state["is_active"] or bot_state["bot_type"] != "REGULAR":
            action = "–ü–†–û–ü–£–°–¢–ò–¢–¨"
        else:
            total_games = games_state["total_games"]
            active_games = games_state["active_games"]
            completed_games = games_state["completed_games"]
            
            needs_initial_cycle = total_games == 0
            cycle_fully_completed = (total_games >= 16 and active_games == 0 and completed_games > 0)
            
            if needs_initial_cycle:
                action = "–°–û–ó–î–ê–¢–¨ –¶–ò–ö–õ"
            elif cycle_fully_completed:
                action = "–ó–ê–í–ï–†–®–ò–¢–¨ –¶–ò–ö–õ"
            elif active_games > 0:
                action = "–ñ–î–ê–¢–¨"
            else:
                action = "–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–ï"
        
        expected = scenario["expected_action"]
        correct = action == expected
        
        print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {bot_state}")
        print(f"   –ò–≥—Ä—ã: {games_state}")
        print(f"   –†–µ—à–µ–Ω–∏–µ: {action}")
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ' if correct else '‚ùå'}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –ó–ê–ü–£–°–ö–ê –¶–ò–ö–õ–û–í –ë–û–¢–û–í")
    print("‚ùì –ü–æ—á–µ–º—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–æ–≤ –Ω–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è —Ü–∏–∫–ª—ã?")
    print("=" * 70)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    try:
        result = asyncio.run(diagnose_cycle_startup_issue())
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        asyncio.run(test_cycle_creation_conditions())
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        check_server_logs_instructions()
        
        print(f"\n" + "=" * 70)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("=" * 70)
        
        if result == "SUCCESS":
            print("‚úÖ –¶–ò–ö–õ–´ –°–û–ó–î–ê–Æ–¢–°–Ø –ü–†–ê–í–ò–õ–¨–ù–û!")
            print("–ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ä–µ–¥–µ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        elif result == "CYCLE_NOT_CREATED":
            print("‚ùå –¶–ò–ö–õ–´ –ù–ï –°–û–ó–î–ê–Æ–¢–°–Ø!")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
        elif result == "INCORRECT_PARAMETERS":
            print("‚ö†Ô∏è –¶–ò–ö–õ–´ –°–û–ó–î–ê–Æ–¢–°–Ø, –ù–û –° –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò!")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫")
        else:
            print("‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í –°–ò–ú–£–õ–Ø–¶–ò–û–ù–ù–û–ú –†–ï–ñ–ò–ú–ï")
            print("–î–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π MongoDB")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

if __name__ == "__main__":
    main()