#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤.
–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ completed_cycles —Å id –≤–∏–¥–∞ "temp_cycle_*".
"""

import asyncio
import os
import sys
from motor.motor_asyncio import AsyncIOMotorClient
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def cleanup_fake_cycles():
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ –∏ –≤ server.py)
    MONGODB_URL = os.getenv("MONGODB_URL", "mongodb://localhost:27017")
    DATABASE_NAME = os.getenv("DATABASE_NAME", "write_russian_2")
    
    client = AsyncIOMotorClient(MONGODB_URL)
    db = client[DATABASE_NAME]
    
    try:
        print("üîç –ü–æ–∏—Å–∫ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ò—â–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å id –≤–∏–¥–∞ "temp_cycle_*"
        fake_cycles = await db.completed_cycles.find({
            "id": {"$regex": "^temp_cycle_"}
        }).to_list(1000)
        
        if not fake_cycles:
            print("‚úÖ –§–∏–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        print(f"üö® –ù–∞–π–¥–µ–Ω–æ {len(fake_cycles)} —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤:")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ bot_id –¥–ª—è –æ—Ç—á—ë—Ç–∞
        cycles_by_bot = {}
        total_fake_profit = 0
        
        for cycle in fake_cycles:
            bot_id = cycle.get("bot_id", "unknown")
            if bot_id not in cycles_by_bot:
                cycles_by_bot[bot_id] = []
            cycles_by_bot[bot_id].append(cycle)
            total_fake_profit += cycle.get("net_profit", 0)
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á—ë—Ç
        for bot_id, bot_cycles in cycles_by_bot.items():
            bot_fake_profit = sum(c.get("net_profit", 0) for c in bot_cycles)
            print(f"  Bot {bot_id}: {len(bot_cycles)} —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤, ${bot_fake_profit:.2f} —Ñ–∏–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏")
        
        print(f"üí∞ –û–±—â–∞—è —Ñ–∏–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_fake_profit:.2f}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        response = input("\n‚ùì –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã? (yes/no): ")
        if response.lower() not in ['yes', 'y', '–¥–∞', '–¥']:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã
        print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤...")
        
        delete_result = await db.completed_cycles.delete_many({
            "id": {"$regex": "^temp_cycle_"}
        })
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {delete_result.deleted_count} —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        
        # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ cycle_games –µ—Å–ª–∏ –µ—Å—Ç—å
        games_delete_result = await db.cycle_games.delete_many({
            "cycle_id": {"$regex": "^temp_cycle_"}
        })
        
        if games_delete_result.deleted_count > 0:
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {games_delete_result.deleted_count} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–≥—Ä.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        remaining_fake = await db.completed_cycles.count_documents({
            "id": {"$regex": "^temp_cycle_"}
        })
        
        if remaining_fake == 0:
            print("üéâ –í—Å–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        else:
            print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å {remaining_fake} —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é.")
            
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∞—Ö –∞–¥–º–∏–Ω–∞ –æ –æ—á–∏—Å—Ç–∫–µ
        admin_log = {
            "id": f"cleanup_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}",
            "user_id": "system",
            "action": "CLEANUP_FAKE_CYCLES",
            "target_type": "database",
            "target_id": "completed_cycles",
            "details": {
                "deleted_cycles": delete_result.deleted_count,
                "deleted_games": games_delete_result.deleted_count,
                "total_fake_profit_removed": total_fake_profit,
                "affected_bots": list(cycles_by_bot.keys())
            },
            "timestamp": datetime.utcnow(),
            "ip_address": "127.0.0.1",
            "user_agent": "cleanup_script"
        }
        
        await db.admin_logs.insert_one(admin_log)
        print("üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        
    finally:
        client.close()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    print("üßπ –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤")
    print("=" * 50)
    
    asyncio.run(cleanup_fake_cycles())