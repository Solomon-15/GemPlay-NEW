#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ —Ü–∏–∫–ª–æ–≤ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.
–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""

import asyncio
from datetime import datetime, timedelta
from unittest.mock import AsyncMock, MagicMock
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MockDB:
    """–ú–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self):
        self.completed_cycles = []
        self.bots = []
        self.games = []
        self.bot_profit_accumulators = []
        self.cycle_games = []
        
    async def find_one(self, collection, query, projection=None):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        
        if collection == "completed_cycles":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞
            for cycle in self.completed_cycles:
                if (query.get("bot_id") == cycle.get("bot_id") and 
                    query.get("cycle_number") == cycle.get("cycle_number")):
                    return cycle if not projection else {"_id": "mock_id"}
            return None
            
        elif collection == "bots":
            for bot in self.bots:
                if query.get("id") == bot.get("id"):
                    return bot
            return None
            
        return None
    
    async def insert_one(self, collection, document):
        """–ò–º–∏—Ç–∞—Ü–∏—è –≤—Å—Ç–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        
        if collection == "completed_cycles":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            for cycle in self.completed_cycles:
                if (document.get("bot_id") == cycle.get("bot_id") and 
                    document.get("cycle_number") == cycle.get("cycle_number")):
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                    raise Exception("E11000 duplicate key error")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            self.completed_cycles.append(document)
            return MagicMock(inserted_id="mock_inserted_id")
            
        return MagicMock(inserted_id="mock_inserted_id")
    
    async def update_one(self, collection, query, update):
        """–ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        return MagicMock(modified_count=1)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–æ–∫–∞ –ë–î
db = None

async def save_completed_cycle(bot_doc: dict, completion_time: datetime):
    """–ò–º–∏—Ç–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ save_completed_cycle —Å –ª–æ–≥–∏–∫–æ–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞."""
    try:
        bot_id = bot_doc.get("id")
        if not bot_id:
            logger.error("Bot ID is missing")
            return
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä
        completed_games = [
            {"bet_amount": 50.0, "winner_id": bot_id, "created_at": completion_time - timedelta(hours=1)},
            {"bet_amount": 50.0, "winner_id": None, "created_at": completion_time - timedelta(minutes=30)},
            {"bet_amount": 50.0, "winner_id": "opponent", "created_at": completion_time - timedelta(minutes=15)}
        ]
        
        if not completed_games:
            logger.warning(f"No completed games found for bot {bot_id} cycle")
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        wins_count = sum(1 for game in completed_games if game.get("winner_id") == bot_id)
        losses_count = sum(1 for game in completed_games if game.get("winner_id") not in [bot_id, None])
        draws_count = sum(1 for game in completed_games if game.get("winner_id") is None)
        total_bet_amount = sum(float(game.get("bet_amount", 0)) for game in completed_games)
        total_winnings = wins_count * 50.0  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
        total_losses = losses_count * 50.0
        net_profit = total_winnings - total_losses
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ü–∏–∫–ª–∞
        cycle_number = bot_doc.get("completed_cycles_count", 0) + 1
        
        logger.info(f"üîç Checking cycle #{cycle_number} for bot {bot_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞
        existing_cycle = await db.find_one("completed_cycles", {
            "bot_id": bot_id,
            "cycle_number": cycle_number
        }, {"_id": 1})
        
        if existing_cycle:
            logger.warning(f"‚úÖ Cycle #{cycle_number} for bot {bot_id} already exists in completed_cycles, skipping duplicate save (idempotent)")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ü–∏–∫–ª–µ
        completed_cycle = {
            "id": f"cycle_{bot_id}_{cycle_number}",
            "bot_id": bot_id,
            "cycle_number": cycle_number,
            "start_time": completion_time - timedelta(hours=2),
            "end_time": completion_time,
            "duration_seconds": 7200,
            "total_bets": len(completed_games),
            "wins_count": wins_count,
            "losses_count": losses_count,
            "draws_count": draws_count,
            "total_bet_amount": total_bet_amount,
            "total_winnings": total_winnings,
            "total_losses": total_losses,
            "net_profit": net_profit,
            "bot_name": bot_doc.get("name", f"Bot_{bot_id[:8]}"),
            "created_at": datetime.utcnow()
        }
        
        logger.info(f"üíæ Attempting to save cycle #{cycle_number} for bot {bot_id}: profit=${net_profit:.2f}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        try:
            result = await db.insert_one("completed_cycles", completed_cycle)
            logger.info(f"‚úÖ Inserted new cycle #{cycle_number} for bot {bot_id} with ID: {result.inserted_id}")
        except Exception as insert_error:
            error_str = str(insert_error).lower()
            if "duplicate key" in error_str or "e11000" in error_str or "unique" in error_str:
                logger.warning(f"‚úÖ Cycle #{cycle_number} for bot {bot_id} already exists in database (race condition), operation is idempotent")
                return
            else:
                logger.error(f"‚ùå Failed to insert cycle #{cycle_number} for bot {bot_id}: {insert_error}")
                raise insert_error
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        await db.update_one("bots", {"id": bot_id}, {"$inc": {"completed_cycles_count": 1}})
        
        logger.info(f"‚úÖ Saved completed cycle #{cycle_number} for bot {bot_doc.get('name', 'Unknown')}: profit=${net_profit:.2f}")
        
    except Exception as e:
        logger.error(f"Error saving completed cycle for bot {bot_doc.get('id', 'unknown')}: {e}")

async def test_cycle_scenarios():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤."""
    global db
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ü–∏–∫–ª–æ–≤")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–∫ –ë–î
    db = MockDB()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
    test_bot = {
        "id": "test_bot_123",
        "name": "TestBot",
        "completed_cycles_count": 0
    }
    db.bots.append(test_bot)
    
    completion_time = datetime.utcnow()
    
    # –°–¶–ï–ù–ê–†–ò–ô 1: –ü–µ—Ä–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
    print("\nüìù –°–¶–ï–ù–ê–†–ò–ô 1: –ü–µ—Ä–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞")
    await save_completed_cycle(test_bot, completion_time)
    print(f"   –¶–∏–∫–ª–æ–≤ –≤ –ë–î: {len(db.completed_cycles)}")
    
    # –°–¶–ï–ù–ê–†–ò–ô 2: –ü–æ–ø—ã—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞)
    print("\nüìù –°–¶–ï–ù–ê–†–ò–ô 2: –ü–æ–ø—ã—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
    await save_completed_cycle(test_bot, completion_time)
    print(f"   –¶–∏–∫–ª–æ–≤ –≤ –ë–î: {len(db.completed_cycles)} (–¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 1)")
    
    # –°–¶–ï–ù–ê–†–ò–ô 3: –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª
    print("\nüìù –°–¶–ï–ù–ê–†–ò–ô 3: –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª")
    test_bot["completed_cycles_count"] = 1
    await save_completed_cycle(test_bot, completion_time + timedelta(hours=3))
    print(f"   –¶–∏–∫–ª–æ–≤ –≤ –ë–î: {len(db.completed_cycles)} (–¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å 2)")
    
    # –°–¶–ï–ù–ê–†–ò–ô 4: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã (–∏–º–∏—Ç–∞—Ü–∏—è race condition)
    print("\nüìù –°–¶–ï–ù–ê–†–ò–ô 4: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã")
    test_bot["completed_cycles_count"] = 2
    
    tasks = []
    for i in range(5):
        task = save_completed_cycle(test_bot, completion_time + timedelta(hours=6))
        tasks.append(task)
    
    await asyncio.gather(*tasks, return_exceptions=True)
    print(f"   –¶–∏–∫–ª–æ–≤ –≤ –ë–î: {len(db.completed_cycles)} (–¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å 3, –Ω–µ 7)")
    
    # –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    for i, cycle in enumerate(db.completed_cycles, 1):
        print(f"   –¶–∏–∫–ª {i}: {cycle['id']}, –ø—Ä–∏–±—ã–ª—å: ${cycle['net_profit']:.2f}")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤: {len(db.completed_cycles)}")

if __name__ == "__main__":
    asyncio.run(test_cycle_scenarios())