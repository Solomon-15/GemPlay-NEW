#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤.
–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã.
"""

import asyncio
import os
import sys
from motor.motor_asyncio import AsyncIOMotorClient
from datetime import datetime, timedelta
import uuid

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_cycle_fixes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ü–∏–∫–ª–æ–≤."""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    MONGODB_URL = os.getenv("MONGODB_URL", "mongodb://localhost:27017")
    DATABASE_NAME = os.getenv("DATABASE_NAME", "write_russian_2")
    
    client = AsyncIOMotorClient(MONGODB_URL)
    db = client[DATABASE_NAME]
    
    try:
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –°–ò–°–¢–ï–ú–´ –¶–ò–ö–õ–û–í")
        print("=" * 60)
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
        print("\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤")
        print("-" * 40)
        
        fake_cycles_count = await db.completed_cycles.count_documents({
            "id": {"$regex": "^temp_cycle_"}
        })
        
        if fake_cycles_count == 0:
            print("‚úÖ –§–∏–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        else:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {fake_cycles_count} —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤")
            
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        print("\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞")
        print("-" * 40)
        
        indexes = await db.completed_cycles.list_indexes().to_list(100)
        unique_index_found = False
        
        for index in indexes:
            if index.get("name") == "unique_bot_cycle":
                unique_index_found = True
                print("‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å 'unique_bot_cycle' –Ω–∞–π–¥–µ–Ω")
                print(f"   –ö–ª—é—á–∏: {index.get('key', {})}")
                print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã–π: {index.get('unique', False)}")
                break
        
        if not unique_index_found:
            print("‚ùå –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å (—Å–∏–º—É–ª—è—Ü–∏—è)
        print("\nüìã –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
        print("-" * 40)
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        test_bot_id = "test_bot_cycle_fixes"
        existing_bot = await db.bots.find_one({"id": test_bot_id})
        
        if not existing_bot:
            test_bot = {
                "id": test_bot_id,
                "name": "Test Bot for Cycle Fixes",
                "bot_type": "REGULAR",
                "is_active": False,  # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                "completed_cycles_count": 0,
                "created_at": datetime.utcnow()
            }
            await db.bots.insert_one(test_bot)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç: {test_bot_id}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–π —Ü–∏–∫–ª
        test_cycle_id = f"test_cycle_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}"
        test_cycle = {
            "id": test_cycle_id,
            "bot_id": test_bot_id,
            "cycle_number": 1,
            "start_time": datetime.utcnow() - timedelta(hours=1),
            "end_time": datetime.utcnow(),
            "duration_seconds": 3600,
            "total_bets": 10,
            "wins_count": 6,
            "losses_count": 3,
            "draws_count": 1,
            "total_bet_amount": 100.0,
            "total_winnings": 60.0,
            "total_losses": 30.0,
            "net_profit": 30.0,
            "bot_name": "Test Bot for Cycle Fixes",
            "created_at": datetime.utcnow()
        }
        
        try:
            # –ü–µ—Ä–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ —É—Å–ø–µ—à–Ω–æ
            await db.completed_cycles.insert_one(test_cycle.copy())
            print("‚úÖ –ü–µ—Ä–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —É—Å–ø–µ—à–Ω–∞")
            
            # –í—Ç–æ—Ä–∞—è –≤—Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                test_cycle["id"] = f"test_cycle_duplicate_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}"
                await db.completed_cycles.insert_one(test_cycle.copy())
                print("‚ùå –î—É–±–ª–∏—Ä—É—é—â–∏–π —Ü–∏–∫–ª –±—ã–ª –≤—Å—Ç–∞–≤–ª–µ–Ω (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
            except Exception as e:
                if "duplicate key" in str(e).lower() or "E11000" in str(e):
                    print("‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏–ª –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ")
                else:
                    print(f"‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
            
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        print("\nüìã –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏")
        print("-" * 40)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –ø—Ä–∏–±—ã–ª—å –±–µ–∑ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
        total_profit_pipeline = [
            {"$match": {"id": {"$not": {"$regex": "^temp_cycle_"}}}},
            {"$group": {"_id": None, "total": {"$sum": "$net_profit"}}}
        ]
        
        profit_result = await db.completed_cycles.aggregate(total_profit_pipeline).to_list(1)
        total_real_profit = profit_result[0]["total"] if profit_result else 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –ø—Ä–∏–±—ã–ª—å –≤–∫–ª—é—á–∞—è —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ
        total_all_pipeline = [
            {"$group": {"_id": None, "total": {"$sum": "$net_profit"}}}
        ]
        
        all_result = await db.completed_cycles.aggregate(total_all_pipeline).to_list(1)
        total_all_profit = all_result[0]["total"] if all_result else 0
        
        real_cycles_count = await db.completed_cycles.count_documents({
            "id": {"$not": {"$regex": "^temp_cycle_"}}
        })
        
        print(f"   –†–µ–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: {real_cycles_count}")
        print(f"   –ü—Ä–∏–±—ã–ª—å –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: ${total_real_profit:.2f}")
        print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å (–≤–∫–ª—é—á–∞—è —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ): ${total_all_profit:.2f}")
        
        if total_real_profit == total_all_profit:
            print("‚úÖ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (–Ω–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏)")
        else:
            fake_profit = total_all_profit - total_real_profit
            print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ–∏–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${fake_profit:.2f}")
            
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—á—ë—Ç—á–∏–∫–æ–≤
        print("\nüìã –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—á—ë—Ç—á–∏–∫–æ–≤")
        print("-" * 40)
        
        mismatched_bots = 0
        total_bots_checked = 0
        
        async for bot in db.bots.find({"bot_type": "REGULAR"}).limit(10):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 –±–æ—Ç–æ–≤
            bot_id = bot.get("id")
            recorded_count = bot.get("completed_cycles_count", 0)
            
            actual_count = await db.completed_cycles.count_documents({
                "bot_id": bot_id,
                "id": {"$not": {"$regex": "^temp_cycle_"}}
            })
            
            total_bots_checked += 1
            
            if recorded_count != actual_count:
                mismatched_bots += 1
                
        print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –±–æ—Ç–æ–≤: {total_bots_checked}")
        print(f"   –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Å—á—ë—Ç—á–∏–∫–æ–≤: {mismatched_bots}")
        
        if mismatched_bots == 0:
            print("‚úÖ –í—Å–µ —Å—á—ë—Ç—á–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {mismatched_bots} –±–æ—Ç–æ–≤ —Å –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—á—ë—Ç—á–∏–∫–∞–º–∏")
            
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        await db.completed_cycles.delete_many({"id": {"$regex": "^test_cycle_"}})
        await db.bots.delete_one({"id": test_bot_id})
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        tests_passed = 0
        total_tests = 5
        
        if fake_cycles_count == 0:
            tests_passed += 1
        if unique_index_found:
            tests_passed += 1
        if total_real_profit == total_all_profit:
            tests_passed += 1
        if mismatched_bots == 0:
            tests_passed += 1
        # –¢–µ—Å—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        tests_passed += 1
        
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
        
        if tests_passed == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
            
        return tests_passed == total_tests
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False
        
    finally:
        client.close()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤")
    print("=" * 50)
    
    success = asyncio.run(test_cycle_fixes())
    exit(0 if success else 1)