#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ completed_cycles
–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤.
"""

import asyncio
import os
import sys
from motor.motor_asyncio import AsyncIOMotorClient

async def create_unique_index():
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ (bot_id, cycle_number) –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ completed_cycles."""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    MONGODB_URL = os.getenv("MONGODB_URL", "mongodb://localhost:27017")
    DATABASE_NAME = os.getenv("DATABASE_NAME", "write_russian_2")
    
    client = AsyncIOMotorClient(MONGODB_URL)
    db = client[DATABASE_NAME]
    
    try:
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ completed_cycles...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
        existing_indexes = await db.completed_cycles.list_indexes().to_list(100)
        
        print("üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã:")
        for idx in existing_indexes:
            print(f"  - {idx.get('name', 'unnamed')}: {idx.get('key', {})}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω—É–∂–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        unique_index_exists = any(
            idx.get('name') == 'unique_bot_cycle' 
            for idx in existing_indexes
        )
        
        if unique_index_exists:
            print("‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å 'unique_bot_cycle' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ (bot_id, cycle_number)
            result = await db.completed_cycles.create_index(
                [("bot_id", 1), ("cycle_number", 1)],
                unique=True,
                name="unique_bot_cycle",
                background=True
            )
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {result}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        total_docs = await db.completed_cycles.count_documents({})
        fake_docs = await db.completed_cycles.count_documents({
            "id": {"$regex": "^temp_cycle_"}
        })
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ completed_cycles:")
        print(f"   –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_docs}")
        print(f"   –§–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: {fake_docs}")
        print(f"   –†–µ–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: {total_docs - fake_docs}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}")
        
    finally:
        client.close()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    print("üîß –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è completed_cycles")
    print("=" * 60)
    
    asyncio.run(create_unique_index())