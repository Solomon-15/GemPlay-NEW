#!/usr/bin/env python3
"""
–ì–ª—É–±–æ–∫–æ–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Ä–∞–±–æ—Ç–æ–∫.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ä—è–¥ –Ω–µ –ø–æ–∫–∞–∂—É—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
"""

import asyncio
import re
import os
import sys
import json
import time
from datetime import datetime
from typing import List, Dict, Any
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DeepTestingEngine:
    """–î–≤–∏–∂–æ–∫ –≥–ª—É–±–æ–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self):
        self.test_results = []
        self.perfect_streak = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä—è–¥ –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        self.test_counter = 0
        self.required_perfect_streak = 2  # –ù—É–∂–Ω–æ 2 –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞ –ø–æ–¥—Ä—è–¥
        
    def log_test_result(self, test_name: str, passed: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞."""
        result = {
            "test_number": self.test_counter,
            "test_name": test_name,
            "passed": passed,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        if passed:
            logger.info(f"‚úÖ –¢–ï–°–¢ {self.test_counter}: {test_name} - –ü–†–û–ô–î–ï–ù")
        else:
            logger.error(f"‚ùå –¢–ï–°–¢ {self.test_counter}: {test_name} - –ü–†–û–í–ê–õ–ï–ù: {details}")
    
    def test_old_mechanism_completely_removed(self) -> bool:
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞."""
        logger.info("üîç –¢–ï–°–¢ 1: –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ save_completed_cycle")
        
        server_file = "/workspace/backend/server.py"
        
        if not os.path.exists(server_file):
            self.log_test_result("Old mechanism removal", False, "server.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        with open(server_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞–π–¥–µ–º —Ñ—É–Ω–∫—Ü–∏—é maintain_all_bots_active_bets
        maintain_match = re.search(
            r'async def maintain_all_bots_active_bets\(\):(.*?)(?=\nasync def|\Z)', 
            content, 
            re.DOTALL
        )
        
        if not maintain_match:
            self.log_test_result("Old mechanism removal", False, "maintain_all_bots_active_bets –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        maintain_code = maintain_match.group(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ save_completed_cycle
        real_calls = re.findall(r'await\s+save_completed_cycle\s*\(', maintain_code)
        
        if len(real_calls) > 0:
            self.log_test_result("Old mechanism removal", False, f"–ù–∞–π–¥–µ–Ω–æ {len(real_calls)} —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        has_fix_comment = "–ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ save_completed_cycle" in maintain_code
        
        if not has_fix_comment:
            self.log_test_result("Old mechanism removal", False, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        self.log_test_result("Old mechanism removal", True, "–°—Ç–∞—Ä—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω")
        return True
    
    def test_new_mechanism_works(self) -> bool:
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–æ–≤–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞."""
        logger.info("üîç –¢–ï–°–¢ 2: –†–∞–±–æ—Ç–∞ –Ω–æ–≤–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ —á–µ—Ä–µ–∑ complete_bot_cycle")
        
        server_file = "/workspace/backend/server.py"
        
        with open(server_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞–π–¥–µ–º —Ñ—É–Ω–∫—Ü–∏—é complete_bot_cycle
        complete_match = re.search(
            r'async def complete_bot_cycle\(.*?\):(.*?)(?=\nasync def|\Z)', 
            content, 
            re.DOTALL
        )
        
        if not complete_match:
            self.log_test_result("New mechanism works", False, "complete_bot_cycle –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        complete_code = complete_match.group(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–∑–æ–≤–∞ save_completed_cycle
        save_calls = re.findall(r'await\s+save_completed_cycle\s*\(', complete_code)
        
        if len(save_calls) != 1:
            self.log_test_result("New mechanism works", False, f"–û–∂–∏–¥–∞–ª—Å—è 1 –≤—ã–∑–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {len(save_calls)}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        has_existence_check = "existing_cycle" in complete_code and "find_one" in complete_code
        
        if not has_existence_check:
            self.log_test_result("New mechanism works", False, "–ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ü–∏–∫–ª–∞")
            return False
        
        self.log_test_result("New mechanism works", True, "–ù–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é")
        return True
    
    def test_line_2275_specifically(self) -> bool:
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Å—Ç—Ä–æ–∫–∏ 2275."""
        logger.info("üîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ 2275 –≥–¥–µ –±—ã–ª —Å—Ç–∞—Ä—ã–π –º–µ—Ö–∞–Ω–∏–∑–º")
        
        server_file = "/workspace/backend/server.py"
        
        with open(server_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        if len(lines) < 2275:
            self.log_test_result("Line 2275 check", False, "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω—å—à–µ 2275 —Å—Ç—Ä–æ–∫")
            return False
        
        line_2275 = lines[2274]  # 2275-1 –¥–ª—è 0-based –∏–Ω–¥–µ–∫—Å–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤
        has_real_call = re.search(r'await\s+save_completed_cycle\s*\(', line_2275)
        
        if has_real_call:
            self.log_test_result("Line 2275 check", False, "–°—Ç—Ä–æ–∫–∞ 2275 —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        is_fix_comment = line_2275.strip().startswith('#') and "–ò–°–ü–†–ê–í–õ–ï–ù–û" in line_2275
        
        if not is_fix_comment:
            self.log_test_result("Line 2275 check", False, "–°—Ç—Ä–æ–∫–∞ 2275 –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
            return False
        
        self.log_test_result("Line 2275 check", True, "–°—Ç—Ä–æ–∫–∞ 2275 —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
        return True
    
    def test_api_filtering_comprehensive(self) -> bool:
        """–¢–µ—Å—Ç 4: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ API."""
        logger.info("üîç –¢–ï–°–¢ 4: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ temp_cycle_ –≤ API")
        
        server_file = "/workspace/backend/server.py"
        
        with open(server_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        critical_endpoints = [
            "get_bot_cycle_history",
            "get_bot_cycles_history", 
            "export_bot_cycles_csv",
            "get_bot_revenue_summary"
        ]
        
        missing_filters = []
        
        for endpoint in critical_endpoints:
            # –ò—â–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç
            endpoint_match = re.search(
                rf'async def {endpoint}\(.*?\):(.*?)(?=\nasync def|\Z)', 
                content, 
                re.DOTALL
            )
            
            if endpoint_match:
                endpoint_code = endpoint_match.group(1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ temp_cycle_
                has_filter = '"id": {"$not": {"$regex": "^temp_cycle_"}}' in endpoint_code
                
                if not has_filter:
                    missing_filters.append(endpoint)
        
        if missing_filters:
            self.log_test_result("API filtering", False, f"–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤: {missing_filters}")
            return False
        
        self.log_test_result("API filtering", True, "–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ API —Å–æ–¥–µ—Ä–∂–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
        return True
    
    def test_frontend_filtering(self) -> bool:
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ frontend."""
        logger.info("üîç –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ frontend")
        
        frontend_files = [
            "/workspace/frontend/src/components/BotCycleModal.js",
            "/workspace/frontend/src/components/RegularBotsManagement.js"
        ]
        
        filters_found = 0
        
        for file_path in frontend_files:
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                has_filter = ("!game.id.startsWith('temp_cycle_')" in content or 
                             "!cycle.id.startsWith('temp_cycle_')" in content)
                
                if has_filter:
                    filters_found += 1
        
        if filters_found < 2:
            self.log_test_result("Frontend filtering", False, f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ {filters_found}/2 —Ñ–∞–π–ª–∞—Ö")
            return False
        
        self.log_test_result("Frontend filtering", True, "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤–æ –≤—Å–µ—Ö frontend —Ñ–∞–π–ª–∞—Ö")
        return True
    
    def test_no_temp_cycle_generation(self) -> bool:
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ temp_cycle_."""
        logger.info("üîç –¢–ï–°–¢ 6: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ temp_cycle_")
        
        server_file = "/workspace/backend/server.py"
        
        with open(server_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è temp_cycle_ ID
        temp_creation_patterns = [
            r'f"temp_cycle_',
            r'"temp_cycle_" \+',
            r"'temp_cycle_' \+",
            r'temp_cycle_.*=.*str',
            r'temp_cycle_.*=.*uuid'
        ]
        
        found_creation = []
        for pattern in temp_creation_patterns:
            matches = re.findall(pattern, content)
            if matches:
                found_creation.extend(matches)
        
        if found_creation:
            self.log_test_result("No temp_cycle generation", False, f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ temp_cycle_: {found_creation}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
        demo_generation_patterns = [
            "Generating demo data for temporary cycle",
            "Generating demo games for temporary cycle"
        ]
        
        found_demo = []
        for pattern in demo_generation_patterns:
            if pattern in content:
                found_demo.append(pattern)
        
        if found_demo:
            self.log_test_result("No temp_cycle generation", False, f"–ù–∞–π–¥–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {found_demo}")
            return False
        
        self.log_test_result("No temp_cycle generation", True, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è temp_cycle_ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞")
        return True
    
    def test_idempotency_logic(self) -> bool:
        """–¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏."""
        logger.info("üîç –¢–ï–°–¢ 7: –õ–æ–≥–∏–∫–∞ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –≤ save_completed_cycle")
        
        server_file = "/workspace/backend/server.py"
        
        with open(server_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞–π–¥–µ–º —Ñ—É–Ω–∫—Ü–∏—é save_completed_cycle
        save_match = re.search(
            r'async def save_completed_cycle\(.*?\):(.*?)(?=\nasync def|\Z)', 
            content, 
            re.DOTALL
        )
        
        if not save_match:
            self.log_test_result("Idempotency logic", False, "save_completed_cycle –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        save_code = save_match.group(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        has_existence_check = "existing_cycle" in save_code and "find_one" in save_code
        
        if not has_existence_check:
            self.log_test_result("Idempotency logic", False, "–ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–Ω–Ω–µ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏
        has_early_return = "if existing_cycle:" in save_code and "return" in save_code
        
        if not has_early_return:
            self.log_test_result("Idempotency logic", False, "–ù–µ—Ç —Ä–∞–Ω–Ω–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ —Ü–∏–∫–ª–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        has_duplicate_error_handling = ("duplicate key" in save_code.lower() or 
                                       "e11000" in save_code.lower())
        
        if not has_duplicate_error_handling:
            self.log_test_result("Idempotency logic", False, "–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        self.log_test_result("Idempotency logic", True, "–õ–æ–≥–∏–∫–∞ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return True
    
    def test_cleanup_scripts_exist(self) -> bool:
        """–¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –æ—á–∏—Å—Ç–∫–∏."""
        logger.info("üîç –¢–ï–°–¢ 8: –ù–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –æ—á–∏—Å—Ç–∫–∏")
        
        required_scripts = [
            "/workspace/backend/cleanup_and_fix_cycles.py",
            "/workspace/backend/verify_cycles_integrity.py", 
            "/workspace/backend/create_unique_index.py"
        ]
        
        missing_scripts = []
        
        for script_path in required_scripts:
            if not os.path.exists(script_path):
                missing_scripts.append(script_path)
        
        if missing_scripts:
            self.log_test_result("Cleanup scripts", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä–∏–ø—Ç—ã: {missing_scripts}")
            return False
        
        self.log_test_result("Cleanup scripts", True, "–í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True
    
    def test_unique_index_creation(self) -> bool:
        """–¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞."""
        logger.info("üîç –¢–ï–°–¢ 9: –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞")
        
        index_script = "/workspace/backend/create_unique_index.py"
        
        if not os.path.exists(index_script):
            self.log_test_result("Unique index creation", False, "create_unique_index.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        with open(index_script, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ (bot_id, cycle_number)
        has_unique_index = ('create_index' in content and 
                           'bot_id' in content and 
                           'cycle_number' in content and
                           'unique=True' in content)
        
        if not has_unique_index:
            self.log_test_result("Unique index creation", False, "–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞")
            return False
        
        self.log_test_result("Unique index creation", True, "–°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return True
    
    def test_error_handling_comprehensive(self) -> bool:
        """–¢–µ—Å—Ç 10: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
        logger.info("üîç –¢–ï–°–¢ 10: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
        
        server_file = "/workspace/backend/server.py"
        
        with open(server_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ save_completed_cycle
        save_match = re.search(
            r'async def save_completed_cycle\(.*?\):(.*?)(?=\nasync def|\Z)', 
            content, 
            re.DOTALL
        )
        
        if not save_match:
            self.log_test_result("Error handling", False, "save_completed_cycle –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        save_code = save_match.group(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º try-catch –±–ª–æ–∫–∏
        has_try_catch = "try:" in save_code and "except" in save_code
        
        if not has_try_catch:
            self.log_test_result("Error handling", False, "–ù–µ—Ç try-catch –±–ª–æ–∫–æ–≤")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        has_duplicate_handling = ("duplicate key" in save_code.lower() and 
                                 "e11000" in save_code.lower())
        
        if not has_duplicate_handling:
            self.log_test_result("Error handling", False, "–ù–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        has_error_logging = "logger.error" in save_code or "logger.warning" in save_code
        
        if not has_error_logging:
            self.log_test_result("Error handling", False, "–ù–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫")
            return False
        
        self.log_test_result("Error handling", True, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ")
        return True
    
    def run_single_test_cycle(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        self.test_counter += 1
        
        logger.info(f"\n{'='*80}")
        logger.info(f"üöÄ –ó–ê–ü–£–°–ö –¶–ò–ö–õ–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø #{self.test_counter}")
        logger.info(f"{'='*80}")
        
        tests = [
            self.test_old_mechanism_completely_removed,
            self.test_new_mechanism_works,
            self.test_line_2275_specifically,
            self.test_api_filtering_comprehensive,
            self.test_frontend_filtering,
            self.test_no_temp_cycle_generation,
            self.test_idempotency_logic,
            self.test_cleanup_scripts_exist,
            self.test_unique_index_creation,
            self.test_error_handling_comprehensive
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_func in tests:
            try:
                result = test_func()
                if result:
                    passed_tests += 1
            except Exception as e:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
                self.log_test_result(test_func.__name__, False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        success_rate = (passed_tests / total_tests) * 100
        
        logger.info(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¶–ò–ö–õ–ê #{self.test_counter}:")
        logger.info(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}/{total_tests}")
        logger.info(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        is_perfect = passed_tests == total_tests
        
        if is_perfect:
            self.perfect_streak += 1
            logger.info(f"üéâ –ò–î–ï–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–µ—Ä–∏—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {self.perfect_streak}")
        else:
            self.perfect_streak = 0
            logger.warning(f"‚ö†Ô∏è –ù–ï –ò–î–ï–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢. –°–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        
        return is_perfect
    
    def run_infinite_testing(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ–º–æ–π —Å–µ—Ä–∏–∏."""
        logger.info("üîÑ –ó–ê–ü–£–°–ö –ì–õ–£–ë–û–ö–û–ì–û –ë–ï–°–ö–û–ù–ï–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info(f"–¶–µ–ª—å: {self.required_perfect_streak} –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞ –ø–æ–¥—Ä—è–¥")
        logger.info("="*80)
        
        start_time = time.time()
        
        while self.perfect_streak < self.required_perfect_streak:
            is_perfect = self.run_single_test_cycle()
            
            logger.info(f"\nüéØ –°–¢–ê–¢–£–°: {self.perfect_streak}/{self.required_perfect_streak} –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥—Ä—è–¥")
            
            if not is_perfect:
                logger.info("‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
        
        end_time = time.time()
        duration = end_time - start_time
        
        logger.info(f"\n{'='*80}")
        logger.info(f"üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê!")
        logger.info(f"{'='*80}")
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {self.required_perfect_streak} –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞ –ø–æ–¥—Ä—è–¥")
        logger.info(f"üìä –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {self.test_counter}")
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üéØ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞!")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üß™ –ì–õ–£–ë–û–ö–û–ï –ë–ï–°–ö–û–ù–ï–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–°–õ–ï–î–ù–ò–• –î–û–†–ê–ë–û–¢–û–ö")
    print("="*80)
    print("–¶–µ–ª—å: –ü–æ–ª—É—á–∏—Ç—å 2 –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ä—è–¥")
    print("="*80)
    
    engine = DeepTestingEngine()
    
    try:
        success = engine.run_infinite_testing()
        
        if success:
            print("\nüéâ –ú–ò–°–°–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê!")
            print("‚úÖ –í—Å–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            return True
        else:
            print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û")
            return False
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–°–¢–ê–ù–û–í–õ–ï–ù–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
        print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {engine.test_counter}")
        print(f"üéØ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {engine.perfect_streak}")
        return False
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)