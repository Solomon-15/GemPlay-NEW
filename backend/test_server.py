#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ü–∏–∫–ª–æ–≤.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB.
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime
import uuid

app = FastAPI(title="GemPlay Test Server", description="–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
test_bots = [
    {
        "id": "bot_001",
        "name": "Test Bot #1",
        "is_active": True,
        "completed_cycles": 5,
        "total_net_profit": 150.0,
        "cycle_games": 16
    }
]

test_completed_cycles = [
    {
        "id": "cycle_001",
        "bot_id": "bot_001",
        "cycle_number": 1,
        "start_time": datetime.now(),
        "end_time": datetime.now(),
        "total_bets": 16,
        "wins_count": 7,
        "losses_count": 6,
        "draws_count": 3,
        "total_bet_amount": 809.0,
        "total_winnings": 400.0,
        "total_losses": 300.0,
        "net_profit": 100.0,
        "is_profitable": True
    }
]

test_cycle_games = []
# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–≥—Ä—ã —Ü–∏–∫–ª–∞
for i in range(16):
    winner_id = "bot_001" if i < 7 else ("opponent_id" if i < 13 else None)
    result = "–í—ã–∏–≥—Ä—ã—à" if winner_id == "bot_001" else ("–ü–æ—Ä–∞–∂–µ–Ω–∏–µ" if winner_id else "–ù–∏—á—å—è")
    result_class = "win" if winner_id == "bot_001" else ("loss" if winner_id else "draw")
    
    test_cycle_games.append({
        "cycle_id": "cycle_001",
        "bot_id": "bot_001", 
        "game_id": f"game_{i+1}",
        "game_data": {
            "id": f"game_{i+1}",
            "creator_id": "bot_001",
            "status": "COMPLETED",
            "bet_amount": 25 + (i % 5),
            "winner_id": winner_id,
            "opponent_id": f"opponent_{i}",
            "creator_move": "ROCK",
            "opponent_move": "SCISSORS", 
            "bet_gems": {"Ruby": 1, "Sapphire": 2},
            "created_at": datetime.now(),
            "completed_at": datetime.now(),
            "result": result,
            "result_class": result_class
        }
    })

@app.get("/")
async def root():
    return {
        "message": "üéâ GemPlay Test Server - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ü–∏–∫–ª–æ–≤",
        "status": "working",
        "fix": "‚úÖ –¢–µ–ø–µ—Ä—å –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ cycle_games –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞"
    }

@app.get("/admin/bots")
async def get_bots():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return {
        "success": True,
        "bots": test_bots
    }

@app.get("/admin/bots/{bot_id}/cycle-history")
async def get_bot_cycle_history(bot_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–∞"""
    if bot_id != "bot_001":
        raise HTTPException(status_code=404, detail="Bot not found")
    
    return {
        "games": [{
            "id": "cycle_001",
            "cycle_number": 1,
            "start_time": datetime.now(),
            "end_time": datetime.now(),
            "completed_at": datetime.now(),
            "duration": "1—á 30–º",
            "total_bets": 16,
            "total_games": 16,
            "wins": 7,
            "losses": 6,
            "draws": 3,
            "total_bet": 809,
            "total_winnings": 400,
            "total_losses": 300,
            "profit": 100,
            "roi_active": 14.29,
            "actions": {"open_cycle_details": True, "cycle_id": "cycle_001"}
        }]
    }

@app.get("/admin/bots/{bot_id}/completed-cycle-bets")
async def get_completed_cycle_bets(bot_id: str, cycle_id: str):
    """
    üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢: –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∏–≥—Ä—ã —Ü–∏–∫–ª–∞ –¥–ª—è –º–æ–¥–∞–ª–∫–∏ '–î–µ—Ç–∞–ª–∏'
    
    –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - —Ç–µ–ø–µ—Ä—å –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ cycle_games
    –∏ API –º–æ–∂–µ—Ç –∏—Ö –Ω–∞–π—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    """
    if bot_id != "bot_001":
        raise HTTPException(status_code=404, detail="Bot not found")
    
    if cycle_id.startswith("temp_cycle_"):
        raise HTTPException(status_code=404, detail="Fake cycle not accessible")
    
    if cycle_id != "cycle_001":
        raise HTTPException(status_code=404, detail="Completed cycle not found")
    
    # üéâ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã —Ü–∏–∫–ª–∞
    cycle_games = [cg for cg in test_cycle_games if cg["cycle_id"] == cycle_id]
    games = [cg["game_data"] for cg in cycle_games]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è frontend
    bets_list = []
    for i, game in enumerate(games, 1):
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        opponent_id = game.get("opponent_id")
        opponent_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if opponent_id and opponent_id.startswith("opponent_"):
            opponent_names = ["Player123", "GamerPro", "NoobMaster", "CryptoKing", "LuckyGuy"]
            opponent_index = int(opponent_id.split("_")[1]) % len(opponent_names)
            opponent_name = opponent_names[opponent_index]

        bets_list.append({
            "id": game.get("id", ""),
            "game_number": i,
            "bet_amount": float(game.get("bet_amount", 0)),
            "bet_gems": game.get("bet_gems", {}),
            "creator_move": game.get("creator_move", "").upper(),
            "opponent_move": game.get("opponent_move", "").upper(),
            "opponent_name": opponent_name,
            "result": game.get("result", ""),
            "result_class": game.get("result_class", ""),
            "created_at": game.get("created_at"),
            "completed_at": game.get("completed_at", game.get("created_at"))
        })

    return {
        "cycle": test_completed_cycles[0],
        "bets": bets_list,
        "total_bets": len(bets_list)
    }

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "message": "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "fix_status": "üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ - –∏–≥—Ä—ã —Ü–∏–∫–ª–æ–≤ —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è"
    }

if __name__ == "__main__":
    import uvicorn
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    print("üéØ –ü—Ä–æ–±–ª–µ–º–∞: –í –º–æ–¥–∞–ª–∫–µ '–î–µ—Ç–∞–ª–∏' –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å —Å—Ç–∞–≤–∫–∏")
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¢–µ–ø–µ—Ä—å –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ cycle_games")
    print("üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000")
    print("üìã API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    uvicorn.run(app, host="0.0.0.0", port=8000)