#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ fallback –∑–Ω–∞—á–µ–Ω–∏–π —Å 12 –Ω–∞ 16

–¶–ï–õ–¨: –í—Å–µ bot.get("cycle_games", X) –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å X = 16
–¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–æ–¥–µ–ª–∏ Bot –≥–¥–µ cycle_games: int = 16
"""

import os
import sys
import re

def test_fallback_unification():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ fallback –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω—ã —Å 12 –Ω–∞ 16"""
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ù–ò–§–ò–ö–ê–¶–ò–ò FALLBACK –ó–ù–ê–ß–ï–ù–ò–ô")
    print("=" * 50)
    
    try:
        with open('server.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –°—á—ë—Ç—á–∏–∫–∏
        total_checks = 0
        passed_checks = 0
        
        print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê: –ù–ï–¢ –°–¢–ê–†–´–• –ó–ù–ê–ß–ï–ù–ò–ô 12")
        print("-" * 35)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç cycle_games —Å fallback 12
        old_patterns = [
            r'cycle_games["\'],?\s*12\)',
            r'cycle_games["\'],?\s*12\s*\)',
            r'\.get\(["\']cycle_games["\'],?\s*12\)'
        ]
        
        old_found = 0
        for pattern in old_patterns:
            matches = re.findall(pattern, content)
            old_found += len(matches)
            total_checks += 1
            
        if old_found == 0:
            print("   ‚úÖ –°—Ç–∞—Ä—ã–µ fallback –∑–Ω–∞—á–µ–Ω–∏—è 12 —É–¥–∞–ª–µ–Ω—ã")
            passed_checks += 1
        else:
            print(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ {old_found} —Å—Ç–∞—Ä—ã—Ö fallback –∑–Ω–∞—á–µ–Ω–∏–π 12")
        
        print("\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê: –ù–û–í–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø 16")
        print("-" * 30)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è 16
        new_patterns = [
            r'cycle_games["\'],?\s*16\)',
            r'\.get\(["\']cycle_games["\'],?\s*16\)'
        ]
        
        new_found = 0
        for pattern in new_patterns:
            matches = re.findall(pattern, content)
            new_found += len(matches)
        
        expected_count = 20  # –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω
        total_checks += 1
        
        if new_found >= expected_count:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {new_found} –Ω–æ–≤—ã—Ö fallback –∑–Ω–∞—á–µ–Ω–∏–π 16")
            passed_checks += 1
        else:
            print(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {new_found} –∏–∑ {expected_count} –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π 16")
        
        print("\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê: –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –°–õ–£–ß–ê–ò")
        print("-" * 32)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º cycle_limit fallback
        cycle_limit_pattern = r'cycle_limit\s*=\s*16.*fallback'
        cycle_limit_matches = re.findall(cycle_limit_pattern, content)
        total_checks += 1
        
        if len(cycle_limit_matches) > 0:
            print("   ‚úÖ cycle_limit fallback –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ 16")
            passed_checks += 1
        else:
            print("   ‚ùå cycle_limit fallback –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–∑–º–µ–Ω—ë–Ω")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º "or 16" –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        or_pattern = r'or\s+16\)'
        or_matches = re.findall(or_pattern, content)
        total_checks += 1
        
        if len(or_matches) >= 3:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(or_matches)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ 'or 16'")
            passed_checks += 1
        else:
            print(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(or_matches)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ 'or 16'")
        
        print("\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê: –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–¨ –° –ú–û–î–ï–õ–¨–Æ")
        print("-" * 38)
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å Bot –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 16
        model_pattern = r'cycle_games:\s*int\s*=\s*16'
        model_matches = re.findall(model_pattern, content)
        total_checks += 1
        
        if len(model_matches) > 0:
            print("   ‚úÖ –ú–æ–¥–µ–ª—å Bot –∏—Å–ø–æ–ª—å–∑—É–µ—Ç cycle_games = 16")
            passed_checks += 1
        else:
            print("   ‚ùå –ú–æ–¥–µ–ª—å Bot –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        
        return passed_checks, total_checks
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª server.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 0, 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return 0, 1

def show_examples():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    
    print("\nüìã –ü–†–ò–ú–ï–†–´ –ò–ó–ú–ï–ù–ï–ù–ò–ô:")
    print("-" * 20)
    
    examples = [
        ("–î–û", "bot.get(\"cycle_games\", 12)"),
        ("–ü–û–°–õ–ï", "bot.get(\"cycle_games\", 16)"),
        ("", ""),
        ("–î–û", "cycle_limit = 12  # fallback"),
        ("–ü–û–°–õ–ï", "cycle_limit = 16  # fallback"),
        ("", ""),
        ("–î–û", "int(bot.get(\"cycle_games\", 12) or 12)"),
        ("–ü–û–°–õ–ï", "int(bot.get(\"cycle_games\", 16) or 16)")
    ]
    
    for label, code in examples:
        if label:
            print(f"   {label}: {code}")
        else:
            print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    
    print("üöÄ –¢–ï–°–¢ –£–ù–ò–§–ò–ö–ê–¶–ò–ò FALLBACK –ó–ù–ê–ß–ï–ù–ò–ô")
    print("=" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    passed, total = test_fallback_unification()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    show_examples()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("-" * 20)
    
    print(f"üîß –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    success_rate = (passed / total * 100) if total > 0 else 0
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Fallback –∑–Ω–∞—á–µ–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã —Å 12 –Ω–∞ 16")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞ —Å –º–æ–¥–µ–ª—å—é Bot")
        
        print("\nüéØ –ß–¢–û –ò–ó–ú–ï–ù–ï–ù–û:")
        print("   ‚Ä¢ –í—Å–µ bot.get('cycle_games', X) —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç X = 16")
        print("   ‚Ä¢ cycle_limit fallback –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ 16")
        print("   ‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã 'or 12' –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ 'or 16'")
        print("   ‚Ä¢ –ü–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–¥–µ–ª–∏ Bot")
        
        print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!")
        return True
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        print(f"   ‚Ä¢ –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {total - passed} –ø—Ä–æ–≤–µ—Ä–æ–∫")
        print("   ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞")
        return False

if __name__ == "__main__":
    try:
        result = main()
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)