#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤.
1. –£–¥–∞–ª—è–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã
2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏
3. –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
4. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import os
import sys
from motor.motor_asyncio import AsyncIOMotorClient
from datetime import datetime

async def cleanup_and_fix_cycles():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤."""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    MONGODB_URL = os.getenv("MONGODB_URL", "mongodb://localhost:27017")
    DATABASE_NAME = os.getenv("DATABASE_NAME", "write_russian_2")
    
    client = AsyncIOMotorClient(MONGODB_URL)
    db = client[DATABASE_NAME]
    
    try:
        print("üßπ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤")
        print("=" * 60)
        
        # –®–ê–ì 1: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –æ—á–∏—Å—Ç–∫–∏
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û –û–ß–ò–°–¢–ö–ò:")
        total_cycles = await db.completed_cycles.count_documents({})
        fake_cycles = await db.completed_cycles.count_documents({
            "id": {"$regex": "^temp_cycle_"}
        })
        print(f"   –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤: {total_cycles}")
        print(f"   –§–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: {fake_cycles}")
        print(f"   –†–µ–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: {total_cycles - fake_cycles}")
        
        if fake_cycles == 0:
            print("‚úÖ –§–∏–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –ø–æ –±–æ—Ç–∞–º
            fake_cycles_by_bot = await db.completed_cycles.aggregate([
                {"$match": {"id": {"$regex": "^temp_cycle_"}}},
                {"$group": {
                    "_id": "$bot_id",
                    "count": {"$sum": 1},
                    "total_fake_profit": {"$sum": "$net_profit"}
                }}
            ]).to_list(1000)
            
            print(f"\nüö® –§–ò–ö–¢–ò–í–ù–´–ï –¶–ò–ö–õ–´ –ü–û –ë–û–¢–ê–ú:")
            total_fake_profit = 0
            for bot_data in fake_cycles_by_bot:
                bot_id = bot_data["_id"]
                count = bot_data["count"]
                fake_profit = bot_data["total_fake_profit"]
                total_fake_profit += fake_profit
                print(f"   Bot {bot_id}: {count} —Ü–∏–∫–ª–æ–≤, ${fake_profit:.2f} —Ñ–∏–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏")
            
            print(f"   –ò–¢–û–ì–û —Ñ–∏–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏: ${total_fake_profit:.2f}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            response = input(f"\n‚ùì –£–¥–∞–ª–∏—Ç—å {fake_cycles} —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤? (yes/no): ")
            if response.lower() not in ['yes', 'y', '–¥–∞', '–¥']:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return
        
        # –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        print("\nüîß –°–û–ó–î–ê–ù–ò–ï –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ò–ù–î–ï–ö–°–ê:")
        try:
            existing_indexes = await db.completed_cycles.list_indexes().to_list(100)
            unique_index_exists = any(
                idx.get('name') == 'unique_bot_cycle' 
                for idx in existing_indexes
            )
            
            if unique_index_exists:
                print("‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å 'unique_bot_cycle' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                result = await db.completed_cycles.create_index(
                    [("bot_id", 1), ("cycle_number", 1)],
                    unique=True,
                    name="unique_bot_cycle",
                    background=True
                )
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {result}")
        except Exception as idx_error:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {idx_error}")
        
        # –®–ê–ì 3: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
        if fake_cycles > 0:
            print(f"\nüóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï {fake_cycles} –§–ò–ö–¢–ò–í–ù–´–• –¶–ò–ö–õ–û–í:")
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã
            delete_result = await db.completed_cycles.delete_many({
                "id": {"$regex": "^temp_cycle_"}
            })
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {delete_result.deleted_count}")
            
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
            games_delete_result = await db.cycle_games.delete_many({
                "cycle_id": {"$regex": "^temp_cycle_"}
            })
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–≥—Ä: {games_delete_result.deleted_count}")
        
        # –®–ê–ì 4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–æ–≤
        print(f"\nüîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –°–ß–ï–¢–ß–ò–ö–û–í –ë–û–¢–û–í:")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤
        bots = await db.bots.find({"bot_type": "REGULAR"}).to_list(1000)
        updated_bots = 0
        
        for bot in bots:
            bot_id = bot.get("id")
            if not bot_id:
                continue
                
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–∏–∫–ª—ã
            real_cycles_count = await db.completed_cycles.count_documents({
                "bot_id": bot_id,
                "id": {"$not": {"$regex": "^temp_cycle_"}}
            })
            
            # –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –±–æ—Ç–∞
            current_count = bot.get("completed_cycles_count", 0)
            
            if current_count != real_cycles_count:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                await db.bots.update_one(
                    {"id": bot_id},
                    {"$set": {"completed_cycles_count": real_cycles_count}}
                )
                print(f"   Bot {bot_id}: {current_count} ‚Üí {real_cycles_count}")
                updated_bots += 1
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—á–µ—Ç—á–∏–∫–æ–≤: {updated_bots}")
        
        # –®–ê–ì 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò:")
        final_total = await db.completed_cycles.count_documents({})
        final_fake = await db.completed_cycles.count_documents({
            "id": {"$regex": "^temp_cycle_"}
        })
        print(f"   –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤: {final_total}")
        print(f"   –§–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: {final_fake}")
        print(f"   –†–µ–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: {final_total - final_fake}")
        
        # –®–ê–ì 6: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∞—Ö –∞–¥–º–∏–Ω–∞
        admin_log = {
            "id": f"cleanup_cycles_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}",
            "user_id": "system",
            "action": "CLEANUP_CYCLES_COMPREHENSIVE",
            "target_type": "database",
            "target_id": "completed_cycles",
            "details": {
                "deleted_fake_cycles": fake_cycles,
                "updated_bot_counters": updated_bots,
                "final_real_cycles": final_total - final_fake,
                "unique_index_created": not unique_index_exists if fake_cycles > 0 else None
            },
            "timestamp": datetime.utcnow(),
            "ip_address": "127.0.0.1",
            "user_agent": "cleanup_script_comprehensive"
        }
        
        await db.admin_logs.insert_one(admin_log)
        print("üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        
        print(f"\nüéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        
    finally:
        client.close()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("üßπ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤")
    print("=" * 60)
    
    asyncio.run(cleanup_and_fix_cycles())

if __name__ == "__main__":
    main()