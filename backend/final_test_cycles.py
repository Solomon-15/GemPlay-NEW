#!/usr/bin/env python3
"""
–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
1. –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤
2. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤ API
4. –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
from unittest.mock import AsyncMock, MagicMock, patch
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

class CycleSystemTest:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ü–∏–∫–ª–æ–≤."""
    
    def __init__(self):
        self.test_results = []
        self.passed_tests = 0
        self.failed_tests = 0
    
    def assert_test(self, condition, test_name, details=""):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏–µ —Ç–µ—Å—Ç–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        if condition:
            self.test_results.append(f"‚úÖ {test_name}")
            self.passed_tests += 1
            logger.info(f"‚úÖ PASSED: {test_name}")
        else:
            self.test_results.append(f"‚ùå {test_name} - {details}")
            self.failed_tests += 1
            logger.error(f"‚ùå FAILED: {test_name} - {details}")
    
    def test_save_completed_cycle_idempotency(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ save_completed_cycle."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ save_completed_cycle")
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        cycles_storage = []
        
        async def simulate_save_cycle(bot_id, cycle_number):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            existing = None
            for cycle in cycles_storage:
                if cycle.get("bot_id") == bot_id and cycle.get("cycle_number") == cycle_number:
                    existing = cycle
                    break
            
            if existing:
                logger.info(f"–¶–∏–∫–ª #{cycle_number} –¥–ª—è –±–æ—Ç–∞ {bot_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False  # –ù–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª
            cycle_data = {
                "bot_id": bot_id,
                "cycle_number": cycle_number,
                "net_profit": 50.0
            }
            cycles_storage.append(cycle_data)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ü–∏–∫–ª #{cycle_number} –¥–ª—è –±–æ—Ç–∞ {bot_id}")
            return True  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        
        async def test_idempotency():
            # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
            saved1 = await simulate_save_cycle("test_bot", 1)
            
            # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            saved2 = await simulate_save_cycle("test_bot", 1)
            
            # –¢—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤ —Å –¥—Ä—É–≥–∏–º –Ω–æ–º–µ—Ä–æ–º - –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
            saved3 = await simulate_save_cycle("test_bot", 2)
            
            return saved1, saved2, saved3, len(cycles_storage)
        
        saved1, saved2, saved3, total_cycles = asyncio.run(test_idempotency())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.assert_test(
            saved1 and not saved2 and saved3 and total_cycles == 2,
            "–ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å save_completed_cycle",
            f"–û–∂–∏–¥–∞–ª–æ—Å—å: True, False, True, 2 —Ü–∏–∫–ª–∞. –ü–æ–ª—É—á–µ–Ω–æ: {saved1}, {saved2}, {saved3}, {total_cycles} —Ü–∏–∫–ª–æ–≤"
        )
    
    def test_no_fake_cycle_generation(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ–¥–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è temp_cycle_
        server_file = "/workspace/backend/server.py"
        if os.path.exists(server_file):
            with open(server_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è temp_cycle_ ID
            has_temp_creation = 'f"temp_cycle_' in content or '"temp_cycle_" +' in content
            
            self.assert_test(
                not has_temp_creation,
                "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è temp_cycle_ ID",
                "–ù–∞–π–¥–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ temp_cycle_ ID –≤ –∫–æ–¥–µ" if has_temp_creation else ""
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–±—Ä–∞–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
            has_demo_generation = "Generating demo data for temporary cycle" in content
            
            self.assert_test(
                not has_demo_generation,
                "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö",
                "–ù–∞–π–¥–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–¥–µ" if has_demo_generation else ""
            )
        else:
            self.assert_test(False, "–ü—Ä–æ–≤–µ—Ä–∫–∞ server.py", "–§–∞–π–ª server.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def test_api_filtering(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –≤ API."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö")
        
        server_file = "/workspace/backend/server.py"
        if os.path.exists(server_file):
            with open(server_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –∫–ª—é—á–µ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö
            filters_to_check = [
                '"id": {"$not": {"$regex": "^temp_cycle_"}}',
                'filter_query = {"id": {"$not": {"$regex": "^temp_cycle_"}}}',
                'base_filter = {"id": {"$not": {"$regex": "^temp_cycle_"}}}'
            ]
            
            found_filters = 0
            for filter_pattern in filters_to_check:
                if filter_pattern in content:
                    found_filters += 1
            
            self.assert_test(
                found_filters >= 3,
                f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö (–Ω–∞–π–¥–µ–Ω–æ {found_filters}/3)",
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ API" if found_filters < 3 else ""
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–±—Ä–∞–Ω—ã –±–ª–æ–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
            has_temp_blocks = "if cycle_id.startswith(\"temp_cycle_\"):" in content
            
            self.assert_test(
                not has_temp_blocks,
                "–£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ temp_cycle_",
                "–ù–∞–π–¥–µ–Ω—ã –±–ª–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ temp_cycle_" if has_temp_blocks else ""
            )
        else:
            self.assert_test(False, "–ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", "–§–∞–π–ª server.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def test_frontend_filtering(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–∞ frontend."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ frontend")
        
        frontend_files = [
            "/workspace/frontend/src/components/BotCycleModal.js",
            "/workspace/frontend/src/components/RegularBotsManagement.js"
        ]
        
        filters_found = 0
        for file_path in frontend_files:
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                if "!game.id.startsWith('temp_cycle_')" in content or "!cycle.id.startsWith('temp_cycle_')" in content:
                    filters_found += 1
        
        self.assert_test(
            filters_found >= 2,
            f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ frontend ({filters_found}/2 —Ñ–∞–π–ª–æ–≤)",
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞ frontend" if filters_found < 2 else ""
        )
    
    def test_cleanup_scripts(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –æ—á–∏—Å—Ç–∫–∏."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –æ—á–∏—Å—Ç–∫–∏")
        
        scripts_to_check = [
            "/workspace/backend/cleanup_and_fix_cycles.py",
            "/workspace/backend/verify_cycles_integrity.py",
            "/workspace/backend/create_unique_index.py"
        ]
        
        existing_scripts = 0
        for script_path in scripts_to_check:
            if os.path.exists(script_path):
                existing_scripts += 1
        
        self.assert_test(
            existing_scripts == len(scripts_to_check),
            f"–ù–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –æ—á–∏—Å—Ç–∫–∏ ({existing_scripts}/{len(scripts_to_check)})",
            f"–ù–µ –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã" if existing_scripts < len(scripts_to_check) else ""
        )
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ü–∏–∫–ª–æ–≤")
        logger.info("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        self.test_save_completed_cycle_idempotency()
        self.test_no_fake_cycle_generation()
        self.test_api_filtering()
        self.test_frontend_filtering()
        self.test_cleanup_scripts()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 60)
        
        for result in self.test_results:
            print(result)
        
        total_tests = self.passed_tests + self.failed_tests
        success_rate = (self.passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed_tests}")
        print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.failed_tests}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if self.failed_tests == 0:
            print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ü–∏–∫–ª–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        else:
            print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
            print(f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å {self.failed_tests} –ø—Ä–æ–±–ª–µ–º")
        
        return self.failed_tests == 0

if __name__ == "__main__":
    print("üß™ –ò—Ç–æ–≥–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤")
    print("=" * 60)
    
    tester = CycleSystemTest()
    success = tester.run_all_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)