#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ save_completed_cycle
–∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ maintain_all_bots_active_bets.
"""

import re
import sys
import os

def test_old_mechanism_removal():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å—Ç–∞—Ä—ã–π –º–µ—Ö–∞–Ω–∏–∑–º save_completed_cycle —É–¥–∞–ª–µ–Ω –∏–∑ maintain_all_bots_active_bets."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ save_completed_cycle")
    print("=" * 70)
    
    server_file = "/workspace/backend/server.py"
    
    if not os.path.exists(server_file):
        print("‚ùå –§–∞–π–ª server.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(server_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ù–∞–π–¥–µ–º —Ñ—É–Ω–∫—Ü–∏—é maintain_all_bots_active_bets
    maintain_function_match = re.search(
        r'async def maintain_all_bots_active_bets\(\):(.*?)(?=async def|\Z)', 
        content, 
        re.DOTALL
    )
    
    if not maintain_function_match:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è maintain_all_bots_active_bets –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    maintain_function_code = maintain_function_match.group(1)
    
    print("‚úÖ –§—É–Ω–∫—Ü–∏—è maintain_all_bots_active_bets –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ù–ï–¢ –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ save_completed_cycle
    save_cycle_calls = re.findall(r'await save_completed_cycle\(', maintain_function_code)
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ save_completed_cycle: {len(save_cycle_calls)}")
    
    if len(save_cycle_calls) == 0:
        print("‚úÖ –£–°–ü–ï–•: –ü—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã save_completed_cycle —É–¥–∞–ª–µ–Ω—ã –∏–∑ maintain_all_bots_active_bets")
        mechanism_removed = True
    else:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω—ã –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã save_completed_cycle –≤ maintain_all_bots_active_bets:")
        for i, call in enumerate(save_cycle_calls, 1):
            print(f"   {i}. {call}")
        mechanism_removed = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    has_fix_comment = "–ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ save_completed_cycle" in maintain_function_code
    
    if has_fix_comment:
        print("‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
    else:
        print("‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ö–∞–Ω–∏–∑–º –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    # –ò—â–µ–º –≥–¥–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è save_completed_cycle –≤ complete_bot_cycle
    complete_bot_cycle_match = re.search(
        r'async def complete_bot_cycle\(.*?\):(.*?)(?=async def|\Z)', 
        content, 
        re.DOTALL
    )
    
    if complete_bot_cycle_match:
        complete_bot_cycle_code = complete_bot_cycle_match.group(1)
        new_mechanism_calls = re.findall(r'await save_completed_cycle\(', complete_bot_cycle_code)
        
        if len(new_mechanism_calls) > 0:
            print(f"‚úÖ –ù–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —á–µ—Ä–µ–∑ complete_bot_cycle —Ä–∞–±–æ—Ç–∞–µ—Ç ({len(new_mechanism_calls)} –≤—ã–∑–æ–≤–æ–≤)")
            new_mechanism_active = True
        else:
            print("‚ö†Ô∏è –ù–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —á–µ—Ä–µ–∑ complete_bot_cycle –Ω–µ –Ω–∞–π–¥–µ–Ω")
            new_mechanism_active = False
    else:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è complete_bot_cycle –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        new_mechanism_active = False
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n" + "=" * 70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
    print("=" * 70)
    
    if mechanism_removed and new_mechanism_active:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´:")
        print("   ‚úÖ –°—Ç–∞—Ä—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —É–¥–∞–ª–µ–Ω –∏–∑ maintain_all_bots_active_bets")
        print("   ‚úÖ –ù–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ complete_bot_cycle")
        print("   ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ")
        return True
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        if not mechanism_removed:
            print("   ‚ùå –°—Ç–∞—Ä—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ù–ï —É–¥–∞–ª–µ–Ω")
        if not new_mechanism_active:
            print("   ‚ùå –ù–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False

def test_specific_line_2275():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Å—Ç—Ä–æ–∫—É 2275 –≥–¥–µ –±—ã–ª —Å—Ç–∞—Ä—ã–π –≤—ã–∑–æ–≤."""
    
    print("\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–†–û–ö–ò 2275:")
    print("-" * 50)
    
    server_file = "/workspace/backend/server.py"
    
    with open(server_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–æ–∫—Ä—É–≥ 2275
    start_line = max(0, 2273 - 1)  # -1 –¥–ª—è 0-based –∏–Ω–¥–µ–∫—Å–∞
    end_line = min(len(lines), 2285)
    
    print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫ 2274-2284:")
    for i in range(start_line, end_line):
        line_num = i + 1
        line_content = lines[i].rstrip()
        marker = "üëâ" if line_num == 2275 else "  "
        print(f"{marker} {line_num:4d}: {line_content}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ 2275 –ù–ï–¢ –≤—ã–∑–æ–≤–∞ save_completed_cycle
    line_2275 = lines[2274] if len(lines) > 2274 else ""  # 2275-1 –¥–ª—è 0-based
    
    if "save_completed_cycle" in line_2275:
        print("\n‚ùå –û–®–ò–ë–ö–ê: –í —Å—Ç—Ä–æ–∫–µ 2275 –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –≤—ã–∑–æ–≤ save_completed_cycle!")
        return False
    else:
        print(f"\n‚úÖ –£–°–ü–ï–•: –°—Ç—Ä–æ–∫–∞ 2275 –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—ã–∑–æ–≤ save_completed_cycle")
        if "–ò–°–ü–†–ê–í–õ–ï–ù–û" in line_2275:
            print("‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
        return True

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞."""
    
    print("üî¨ –ü–†–û–í–ï–†–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –°–¢–ê–†–û–ì–û –ú–ï–•–ê–ù–ò–ó–ú–ê SAVE_COMPLETED_CYCLE")
    print("=" * 70)
    
    # –¢–µ—Å—Ç 1: –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    test1_passed = test_old_mechanism_removal()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ 2275
    test2_passed = test_specific_line_2275()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 70)
    print("üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("=" * 70)
    
    if test1_passed and test2_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –°—Ç–∞—Ä—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        print("‚úÖ –°—Ç—Ä–æ–∫–∞ 2275 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ")
        return True
    else:
        print("‚ùå –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        if not test1_passed:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –º–µ—Ö–∞–Ω–∏–∑–º–∞")
        if not test2_passed:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä–æ–∫–æ–π 2275")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)