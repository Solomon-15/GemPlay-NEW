#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞
–∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ maintain_all_bots_active_bets (—Å—Ç—Ä–æ–∫–∞ 2275).
"""

import re
import sys
import os

def extract_maintain_function():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ maintain_all_bots_active_bets."""
    
    server_file = "/workspace/backend/server.py"
    
    with open(server_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ù–∞–π–¥–µ–º —Ñ—É–Ω–∫—Ü–∏—é maintain_all_bots_active_bets
    pattern = r'async def maintain_all_bots_active_bets\(\):(.*?)(?=\nasync def|\n\ndef|\n@|\nclass|\Z)'
    match = re.search(pattern, content, re.DOTALL)
    
    if not match:
        return None, None
    
    function_code = match.group(1)
    start_pos = match.start()
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    lines_before = content[:start_pos].count('\n')
    start_line = lines_before + 1
    
    return function_code, start_line

def test_old_mechanism_removal():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∏–∑ maintain_all_bots_active_bets."""
    
    print("üî¨ –ü–†–û–í–ï–†–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –°–¢–ê–†–û–ì–û –ú–ï–•–ê–ù–ò–ó–ú–ê –ò–ó maintain_all_bots_active_bets")
    print("=" * 80)
    
    function_code, start_line = extract_maintain_function()
    
    if not function_code:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è maintain_all_bots_active_bets –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è maintain_all_bots_active_bets –Ω–∞–π–¥–µ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å—Ç—Ä–æ–∫–∏ {start_line})")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    lines = function_code.split('\n')
    
    # –ò—â–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è save_completed_cycle
    mentions = []
    real_calls = []
    
    for i, line in enumerate(lines):
        line_number = start_line + i
        stripped = line.strip()
        
        if 'save_completed_cycle' in line:
            mentions.append((line_number, line.rstrip()))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            if re.search(r'await\s+save_completed_cycle\s*\(', line):
                real_calls.append((line_number, line.rstrip()))
    
    print(f"\nüìã –ê–ù–ê–õ–ò–ó –£–ü–û–ú–ò–ù–ê–ù–ò–ô save_completed_cycle:")
    print(f"   –í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(mentions)}")
    print(f"   –†–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤: {len(real_calls)}")
    
    if mentions:
        print(f"\nüìù –í–°–ï –£–ü–û–ú–ò–ù–ê–ù–ò–Ø save_completed_cycle:")
        for line_num, line_content in mentions:
            is_comment = line_content.strip().startswith('#')
            is_real_call = re.search(r'await\s+save_completed_cycle\s*\(', line_content)
            
            if is_real_call:
                marker = "‚ùå –í–´–ó–û–í"
            elif is_comment:
                marker = "üìù –ö–û–ú–ú–ï–ù–¢"
            else:
                marker = "‚ùì –î–†–£–ì–û–ï"
                
            print(f"   {marker} –°—Ç—Ä–æ–∫–∞ {line_num}: {line_content.strip()}")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–ª–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ 2275
    print(f"\nüéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –û–ë–õ–ê–°–¢–ò –°–¢–†–û–ö–ò 2275:")
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–æ–∫—Ä—É–≥ 2275
    target_area_lines = []
    for line_num, line_content in mentions:
        if 2270 <= line_num <= 2280:
            target_area_lines.append((line_num, line_content))
    
    if target_area_lines:
        print("   –ù–∞–π–¥–µ–Ω—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏:")
        for line_num, line_content in target_area_lines:
            is_comment = line_content.strip().startswith('#')
            print(f"   –°—Ç—Ä–æ–∫–∞ {line_num}: {'üìù –ö–û–ú–ú–ï–ù–¢' if is_comment else '‚ùå –ö–û–î'} - {line_content.strip()}")
    else:
        print("   ‚ùå –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ 2275 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ —Å–¥–≤–∏–Ω—É–ª–∏—Å—å)")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    success = len(real_calls) == 0
    
    if success:
        print(f"\n‚úÖ –£–°–ü–ï–•: –°—Ç–∞—Ä—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —É–¥–∞–ª–µ–Ω!")
        print(f"   - –†–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ save_completed_cycle: {len(real_calls)}")
        print(f"   - –ù–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
    else:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã!")
        print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤: {len(real_calls)}")
        for line_num, line_content in real_calls:
            print(f"   - –°—Ç—Ä–æ–∫–∞ {line_num}: {line_content.strip()}")
    
    return success

def check_line_2275_specifically():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —á—Ç–æ –Ω–∞ —Å—Ç—Ä–æ–∫–µ 2275 –∏ –≤–æ–∫—Ä—É–≥ –Ω–µ–µ."""
    
    print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–†–û–ö–ò 2275:")
    print("-" * 50)
    
    server_file = "/workspace/backend/server.py"
    
    with open(server_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ —Å—Ç—Ä–æ–∫–∏ 2275
    start_line = max(0, 2273 - 1)  # 2272 –≤ 0-based
    end_line = min(len(lines), 2280)  # –¥–æ 2280
    
    print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫ 2273-2279:")
    for i in range(start_line, end_line):
        line_num = i + 1
        line_content = lines[i].rstrip()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ 2275
        if line_num == 2275:
            has_real_call = re.search(r'await\s+save_completed_cycle\s*\(', line_content)
            has_mention = 'save_completed_cycle' in line_content
            is_comment = line_content.strip().startswith('#')
            
            if has_real_call:
                marker = "‚ùå –í–´–ó–û–í!"
                status = "–ü–†–û–ë–õ–ï–ú–ê"
            elif has_mention and is_comment:
                marker = "‚úÖ –ö–û–ú–ú–ï–ù–¢"
                status = "–ù–û–†–ú–ê"
            elif has_mention:
                marker = "‚ùì –î–†–£–ì–û–ï"
                status = "–ü–†–û–í–ï–†–ò–¢–¨"
            else:
                marker = "  "
                status = "–ß–ò–°–¢–û"
                
            print(f"{marker} {line_num:4d}: {line_content} [{status}]")
        else:
            print(f"   {line_num:4d}: {line_content}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å—Ç—Ä–æ–∫–∏ 2275
    if len(lines) > 2274:  # 2275-1 –¥–ª—è 0-based
        line_2275 = lines[2274]
        has_real_call = re.search(r'await\s+save_completed_cycle\s*\(', line_2275)
        has_mention = 'save_completed_cycle' in line_2275
        is_comment = line_2275.strip().startswith('#')
        
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –°–¢–†–û–ö–ò 2275:")
        print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç 'save_completed_cycle': {has_mention}")
        print(f"   –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {is_comment}")
        print(f"   –≠—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤: {has_real_call}")
        
        if has_real_call:
            print("   ‚ùå –°–¢–ê–¢–£–°: –ü–†–û–ë–õ–ï–ú–ê - –Ω–∞–π–¥–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤!")
            return False
        elif has_mention and is_comment:
            print("   ‚úÖ –°–¢–ê–¢–£–°: –ù–û–†–ú–ê - —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
            return True
        elif not has_mention:
            print("   ‚úÖ –°–¢–ê–¢–£–°: –ß–ò–°–¢–û - –Ω–∏–∫–∞–∫–∏—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return True
        else:
            print("   ‚ùì –°–¢–ê–¢–£–°: –ù–ï–Ø–°–ù–û - —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return False
    else:
        print("   ‚ùå –û–®–ò–ë–ö–ê: –°—Ç—Ä–æ–∫–∞ 2275 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ")
        return False

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    
    print("üéØ –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –°–¢–ê–†–û–ì–û –ú–ï–•–ê–ù–ò–ó–ú–ê")
    print("=" * 80)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞ save_completed_cycle –∏–∑ maintain_all_bots_active_bets (—Å—Ç—Ä–æ–∫–∞ 2275)")
    
    # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ maintain_all_bots_active_bets
    test1_passed = test_old_mechanism_removal()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Å—Ç—Ä–æ–∫–∏ 2275
    test2_passed = check_line_2275_specifically()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 80)
    print("üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("=" * 80)
    
    if test1_passed and test2_passed:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –°—Ç–∞—Ä—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ maintain_all_bots_active_bets")
        print("‚úÖ –°—Ç—Ä–æ–∫–∞ 2275 –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ save_completed_cycle")
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–æ–≤ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ")
        
        print("\nüîß –ß–¢–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û:")
        print("   - maintain_all_bots_active_bets –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç save_completed_cycle")
        print("   - –°—Ç—Ä–æ–∫–∞ 2275 —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
        print("   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ complete_bot_cycle()")
        
        return True
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        if not test1_passed:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã –≤ —Ñ—É–Ω–∫—Ü–∏–∏ maintain_all_bots_active_bets")
        if not test2_passed:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä–æ–∫–æ–π 2275")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)