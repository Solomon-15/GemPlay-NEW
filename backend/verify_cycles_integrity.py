#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É:
- bot.completed_cycles_count
- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π –≤ completed_cycles
- –∑–∞–ø–∏—Å—è–º–∏ –≤ bot_profit_accumulators
"""

import asyncio
import os
import sys
from motor.motor_asyncio import AsyncIOMotorClient
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def verify_cycles_integrity():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤."""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    MONGODB_URL = os.getenv("MONGODB_URL", "mongodb://localhost:27017")
    DATABASE_NAME = os.getenv("DATABASE_NAME", "write_russian_2")
    
    client = AsyncIOMotorClient(MONGODB_URL)
    db = client[DATABASE_NAME]
    
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤...")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤
        bots = await db.bots.find({"bot_type": "REGULAR"}).to_list(1000)
        
        issues_found = []
        total_bots = len(bots)
        
        for i, bot in enumerate(bots, 1):
            bot_id = bot.get("id")
            bot_name = bot.get("name", f"Bot_{bot_id[:8]}")
            
            print(f"[{i}/{total_bots}] –ü—Ä–æ–≤–µ—Ä—è—é –±–æ—Ç–∞: {bot_name} ({bot_id})")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±–æ—Ç–∞
            completed_cycles_count = bot.get("completed_cycles_count", 0)
            old_completed_cycles = bot.get("completed_cycles", 0)  # –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–∏–∫–ª—ã –≤ completed_cycles
            real_cycles_count = await db.completed_cycles.count_documents({
                "bot_id": bot_id,
                "id": {"$not": {"$regex": "^temp_cycle_"}}  # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ
            })
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã
            fake_cycles_count = await db.completed_cycles.count_documents({
                "bot_id": bot_id,
                "id": {"$regex": "^temp_cycle_"}
            })
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã
            completed_accumulators = await db.bot_profit_accumulators.count_documents({
                "bot_id": bot_id,
                "is_cycle_completed": True
            })
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã
            active_accumulators = await db.bot_profit_accumulators.count_documents({
                "bot_id": bot_id,
                "is_cycle_completed": False
            })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            bot_issues = []
            
            if fake_cycles_count > 0:
                bot_issues.append(f"üö® {fake_cycles_count} —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤")
            
            if completed_cycles_count != real_cycles_count:
                bot_issues.append(f"‚ùå –°—á—ë—Ç—á–∏–∫: {completed_cycles_count}, —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: {real_cycles_count}")
            
            if old_completed_cycles != completed_cycles_count and old_completed_cycles > 0:
                bot_issues.append(f"‚ö†Ô∏è –°—Ç–∞—Ä—ã–π —Å—á—ë—Ç—á–∏–∫: {old_completed_cycles}, –Ω–æ–≤—ã–π: {completed_cycles_count}")
            
            if completed_accumulators > 0 and completed_accumulators != real_cycles_count:
                bot_issues.append(f"üîÑ –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤: {completed_accumulators}, —Ü–∏–∫–ª–æ–≤: {real_cycles_count}")
            
            if active_accumulators > 1:
                bot_issues.append(f"‚ö° –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã: {active_accumulators}")
            
            if bot_issues:
                issues_found.append({
                    "bot_id": bot_id,
                    "bot_name": bot_name,
                    "issues": bot_issues,
                    "stats": {
                        "completed_cycles_count": completed_cycles_count,
                        "old_completed_cycles": old_completed_cycles,
                        "real_cycles": real_cycles_count,
                        "fake_cycles": fake_cycles_count,
                        "completed_accumulators": completed_accumulators,
                        "active_accumulators": active_accumulators
                    }
                })
                
                print(f"  ‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
                for issue in bot_issues:
                    print(f"    - {issue}")
            else:
                print(f"  ‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
        print("=" * 60)
        
        if not issues_found:
            print("üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ü–∏–∫–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
        else:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —É {len(issues_found)} –±–æ—Ç–æ–≤ –∏–∑ {total_bots}")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ —Ç–∏–ø–∞–º
            fake_cycles_bots = []
            counter_mismatch_bots = []
            accumulator_issues_bots = []
            
            for issue in issues_found:
                for problem in issue["issues"]:
                    if "—Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤" in problem:
                        fake_cycles_bots.append(issue)
                    elif "–°—á—ë—Ç—á–∏–∫:" in problem:
                        counter_mismatch_bots.append(issue)
                    elif "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤:" in problem or "–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã" in problem:
                        accumulator_issues_bots.append(issue)
            
            if fake_cycles_bots:
                total_fake = sum(issue["stats"]["fake_cycles"] for issue in fake_cycles_bots)
                print(f"\nüö® –§–∏–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã: {len(fake_cycles_bots)} –±–æ—Ç–æ–≤, {total_fake} –∑–∞–ø–∏—Å–µ–π")
                print("   –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—É—Å—Ç–∏—Ç–µ cleanup_fake_cycles.py")
            
            if counter_mismatch_bots:
                print(f"\n‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤: {len(counter_mismatch_bots)} –±–æ—Ç–æ–≤")
                print("   –†–µ—à–µ–Ω–∏–µ: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ —Å—á—ë—Ç—á–∏–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            
            if accumulator_issues_bots:
                print(f"\nüîÑ –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞–º–∏: {len(accumulator_issues_bots)} –±–æ—Ç–æ–≤")
                print("   –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_real_cycles = await db.completed_cycles.count_documents({
            "id": {"$not": {"$regex": "^temp_cycle_"}}
        })
        total_fake_cycles = await db.completed_cycles.count_documents({
            "id": {"$regex": "^temp_cycle_"}
        })
        total_accumulators = await db.bot_profit_accumulators.count_documents({})
        
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: {total_bots}")
        print(f"   –†–µ–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: {total_real_cycles}")
        print(f"   –§–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: {total_fake_cycles}")
        print(f"   –í—Å–µ–≥–æ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤: {total_accumulators}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
        report = {
            "timestamp": datetime.utcnow(),
            "total_bots": total_bots,
            "issues_found": len(issues_found),
            "total_real_cycles": total_real_cycles,
            "total_fake_cycles": total_fake_cycles,
            "total_accumulators": total_accumulators,
            "details": issues_found
        }
        
        # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª –∏–ª–∏ –ë–î
        print(f"\nüíæ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å timestamp: {report['timestamp']}")
        
        return issues_found
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return []
        
    finally:
        client.close()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    print("üîç –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤")
    print("=" * 50)
    
    asyncio.run(verify_cycles_integrity())