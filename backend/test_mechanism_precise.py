#!/usr/bin/env python3
"""
–¢–æ—á–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ save_completed_cycle.
–†–∞–∑–ª–∏—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π.
"""

import re
import sys
import os

def test_old_mechanism_precise():
    """–¢–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞, –∏—Å–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏."""
    
    print("üî¨ –¢–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –°–¢–ê–†–û–ì–û –ú–ï–•–ê–ù–ò–ó–ú–ê")
    print("=" * 60)
    
    server_file = "/workspace/backend/server.py"
    
    with open(server_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ù–∞–π–¥–µ–º —Ñ—É–Ω–∫—Ü–∏—é maintain_all_bots_active_bets
    maintain_function_match = re.search(
        r'async def maintain_all_bots_active_bets\(\):(.*?)(?=async def|\Z)', 
        content, 
        re.DOTALL
    )
    
    if not maintain_function_match:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è maintain_all_bots_active_bets –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    maintain_function_code = maintain_function_match.group(1)
    
    print("‚úÖ –§—É–Ω–∫—Ü–∏—è maintain_all_bots_active_bets –Ω–∞–π–¥–µ–Ω–∞")
    
    # –†–∞–∑–¥–µ–ª–∏–º –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    lines = maintain_function_code.split('\n')
    
    # –ò—â–µ–º –†–ï–ê–õ–¨–ù–´–ï –≤—ã–∑–æ–≤—ã save_completed_cycle (–Ω–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö)
    real_calls = []
    comment_mentions = []
    
    for i, line in enumerate(lines, 1):
        stripped_line = line.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not stripped_line:
            continue
            
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å #, —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if stripped_line.startswith('#'):
            if 'save_completed_cycle' in stripped_line:
                comment_mentions.append((i, stripped_line))
            continue
        
        # –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–∏
        if re.search(r'await\s+save_completed_cycle\s*\(', line):
            real_calls.append((i, stripped_line))
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ save_completed_cycle: {len(real_calls)}")
    print(f"üìù –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö: {len(comment_mentions)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
    if real_calls:
        print("\n‚ùå –†–ï–ê–õ–¨–ù–´–ï –í–´–ó–û–í–´ (–ø—Ä–æ–±–ª–µ–º–∞!):")
        for line_num, line_content in real_calls:
            print(f"   –°—Ç—Ä–æ–∫–∞ {line_num}: {line_content}")
    
    if comment_mentions:
        print("\nüìù –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ):")
        for line_num, line_content in comment_mentions:
            print(f"   –°—Ç—Ä–æ–∫–∞ {line_num}: {line_content}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    mechanism_removed = len(real_calls) == 0
    
    if mechanism_removed:
        print("\n‚úÖ –£–°–ü–ï–•: –†–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã save_completed_cycle —É–¥–∞–ª–µ–Ω—ã!")
        print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã save_completed_cycle!")
    
    return mechanism_removed

def test_before_after_comparison():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —á—Ç–æ –±—ã–ª–æ –¥–æ –∏ —á—Ç–æ —Å—Ç–∞–ª–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –î–û –ò –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("-" * 50)
    
    server_file = "/workspace/backend/server.py"
    
    with open(server_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ —Å—Ç—Ä–æ–∫–∏ 2275
    print("–ö–æ–¥ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ 2275 (–≥–¥–µ –±—ã–ª —Å—Ç–∞—Ä—ã–π –º–µ—Ö–∞–Ω–∏–∑–º):")
    
    for i in range(2272, 2288):  # –°—Ç—Ä–æ–∫–∏ 2273-2287
        if i < len(lines):
            line_num = i + 1
            line_content = lines[i].rstrip()
            
            # –í—ã–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
            if "–ò–°–ü–†–ê–í–õ–ï–ù–û" in line_content:
                marker = "üîß"
            elif "await save_completed_cycle" in line_content and not line_content.strip().startswith('#'):
                marker = "‚ùå"  # –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ (–ø—Ä–æ–±–ª–µ–º–∞)
            elif "save_completed_cycle" in line_content and line_content.strip().startswith('#'):
                marker = "üìù"  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)
            else:
                marker = "  "
                
            print(f"{marker} {line_num:4d}: {line_content}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –ù–ï–¢ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    problem_lines = []
    for i in range(2272, 2288):
        if i < len(lines):
            line = lines[i]
            if "await save_completed_cycle" in line and not line.strip().startswith('#'):
                problem_lines.append(i + 1)
    
    if not problem_lines:
        print("\n‚úÖ –í –æ–±–ª–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ 2275 –ù–ï–¢ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ save_completed_cycle")
        return True
    else:
        print(f"\n‚ùå –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö: {problem_lines}")
        return False

def test_new_mechanism_still_works():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –Ω–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —á–µ—Ä–µ–∑ complete_bot_cycle –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."""
    
    print("\nüîÑ –ü–†–û–í–ï–†–ö–ê –ù–û–í–û–ì–û –ú–ï–•–ê–ù–ò–ó–ú–ê:")
    print("-" * 40)
    
    server_file = "/workspace/backend/server.py"
    
    with open(server_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é complete_bot_cycle
    complete_bot_cycle_match = re.search(
        r'async def complete_bot_cycle\(.*?\):(.*?)(?=async def|\Z)', 
        content, 
        re.DOTALL
    )
    
    if not complete_bot_cycle_match:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è complete_bot_cycle –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    complete_bot_cycle_code = complete_bot_cycle_match.group(1)
    
    # –ò—â–µ–º –≤—ã–∑–æ–≤—ã save_completed_cycle –≤ –Ω–æ–≤–æ–º –º–µ—Ö–∞–Ω–∏–∑–º–µ
    new_mechanism_calls = re.findall(r'await\s+save_completed_cycle\s*\(', complete_bot_cycle_code)
    
    if len(new_mechanism_calls) > 0:
        print(f"‚úÖ –ù–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(new_mechanism_calls)} –≤—ã–∑–æ–≤–æ–≤ save_completed_cycle")
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Ü–∏–∫–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ complete_bot_cycle()")
        return True
    else:
        print("‚ùå –ù–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç: –≤—ã–∑–æ–≤—ã save_completed_cycle –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã."""
    
    print("üéØ –¢–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –°–¢–ê–†–û–ì–û –ú–ï–•–ê–ù–ò–ó–ú–ê SAVE_COMPLETED_CYCLE")
    print("=" * 70)
    
    # –¢–µ—Å—Ç 1: –¢–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    test1_passed = test_old_mechanism_precise()
    
    # –¢–µ—Å—Ç 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ/–ø–æ—Å–ª–µ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ 2275
    test2_passed = test_before_after_comparison()
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç
    test3_passed = test_new_mechanism_still_works()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 70)
    print("üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("=" * 70)
    
    all_passed = test1_passed and test2_passed and test3_passed
    
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –°—Ç–∞—Ä—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ maintain_all_bots_active_bets")
        print("‚úÖ –°—Ç—Ä–æ–∫–∞ 2275 —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
        print("‚úÖ –ù–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —á–µ—Ä–µ–∑ complete_bot_cycle —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ!")
        
        print("\nüîß –ß–¢–û –ë–´–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–û:")
        print("   - –£–±—Ä–∞–Ω –≤—ã–∑–æ–≤ await save_completed_cycle() –∏–∑ maintain_all_bots_active_bets")
        print("   - –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
        print("   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤ —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ complete_bot_cycle()")
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        if not test1_passed:
            print("‚ùå –°—Ç–∞—Ä—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ù–ï –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω")
        if not test2_passed:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã –≤ –æ–±–ª–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ 2275")
        if not test3_passed:
            print("‚ùå –ù–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)