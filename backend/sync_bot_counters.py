#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—á—ë—Ç—á–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
–û–±–Ω–æ–≤–ª—è–µ—Ç bot.completed_cycles_count –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ completed_cycles.
"""

import asyncio
import os
import sys
from motor.motor_asyncio import AsyncIOMotorClient
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def sync_bot_counters():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—á—ë—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤."""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    MONGODB_URL = os.getenv("MONGODB_URL", "mongodb://localhost:27017")
    DATABASE_NAME = os.getenv("DATABASE_NAME", "write_russian_2")
    
    client = AsyncIOMotorClient(MONGODB_URL)
    db = client[DATABASE_NAME]
    
    try:
        print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤...")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤
        bots = await db.bots.find({"bot_type": "REGULAR"}).to_list(1000)
        
        updates_made = 0
        total_bots = len(bots)
        
        for i, bot in enumerate(bots, 1):
            bot_id = bot.get("id")
            bot_name = bot.get("name", f"Bot_{bot_id[:8]}")
            
            print(f"[{i}/{total_bots}] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –±–æ—Ç–∞: {bot_name}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–∏–∫–ª—ã –≤ completed_cycles (–∏—Å–∫–ª—é—á–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ)
            real_cycles_count = await db.completed_cycles.count_documents({
                "bot_id": bot_id,
                "id": {"$not": {"$regex": "^temp_cycle_"}}
            })
            
            # –¢–µ–∫—É—â–∏–π —Å—á—ë—Ç—á–∏–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –±–æ—Ç–∞
            current_count = bot.get("completed_cycles_count", 0)
            old_count = bot.get("completed_cycles", 0)  # –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            needs_update = current_count != real_cycles_count
            
            if needs_update:
                print(f"  üìä –û–±–Ω–æ–≤–ª—è—é: {current_count} ‚Üí {real_cycles_count}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
                update_data = {
                    "completed_cycles_count": real_cycles_count,
                    "updated_at": datetime.utcnow()
                }
                
                # –¢–∞–∫–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if old_count != real_cycles_count:
                    update_data["completed_cycles"] = real_cycles_count
                
                await db.bots.update_one(
                    {"id": bot_id},
                    {"$set": update_data}
                )
                
                updates_made += 1
                print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                print(f"  ‚úÖ –£–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ({real_cycles_count})")
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
        print("=" * 60)
        
        if updates_made == 0:
            print("üéâ –í—Å–µ —Å—á—ë—Ç—á–∏–∫–∏ —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
        else:
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—á—ë—Ç—á–∏–∫–æ–≤: {updates_made} –∏–∑ {total_bots}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
        
        mismatches = 0
        async for bot in db.bots.find({"bot_type": "REGULAR"}):
            bot_id = bot.get("id")
            current_count = bot.get("completed_cycles_count", 0)
            
            real_count = await db.completed_cycles.count_documents({
                "bot_id": bot_id,
                "id": {"$not": {"$regex": "^temp_cycle_"}}
            })
            
            if current_count != real_count:
                mismatches += 1
                print(f"‚ùå {bot.get('name', bot_id)}: {current_count} ‚â† {real_count}")
        
        if mismatches == 0:
            print("‚úÖ –í—Å–µ —Å—á—ë—Ç—á–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        else:
            print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å {mismatches} –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π")
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∞—Ö
        admin_log = {
            "id": f"sync_counters_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}",
            "user_id": "system",
            "action": "SYNC_BOT_COUNTERS",
            "target_type": "database",
            "target_id": "bots",
            "details": {
                "total_bots_processed": total_bots,
                "counters_updated": updates_made,
                "remaining_mismatches": mismatches
            },
            "timestamp": datetime.utcnow(),
            "ip_address": "127.0.0.1",
            "user_agent": "sync_script"
        }
        
        await db.admin_logs.insert_one(admin_log)
        print("üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        
        return updates_made
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return 0
        
    finally:
        client.close()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    print("üîÑ –°–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—á—ë—Ç—á–∏–∫–æ–≤ —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤")
    print("=" * 50)
    
    asyncio.run(sync_bot_counters())