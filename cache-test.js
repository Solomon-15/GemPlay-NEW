// üß™ –¢–ï–°–¢ –ö–ù–û–ü–ö–ò "–û–ß–ò–°–¢–ò–¢–¨ –ö–≠–®" - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞

/**
 * üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
 * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫—ç—à–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 */
function getCacheSize() {
  let totalSize = 0;
  let details = {};

  try {
    // 1. localStorage
    let localStorageSize = 0;
    for (let key in localStorage) {
      if (localStorage.hasOwnProperty(key)) {
        localStorageSize += localStorage[key].length + key.length;
      }
    }
    details.localStorage = {
      size: localStorageSize,
      items: Object.keys(localStorage).length,
      sizeKB: Math.round(localStorageSize / 1024 * 100) / 100
    };
    totalSize += localStorageSize;

    // 2. sessionStorage
    let sessionStorageSize = 0;
    for (let key in sessionStorage) {
      if (sessionStorage.hasOwnProperty(key)) {
        sessionStorageSize += sessionStorage[key].length + key.length;
      }
    }
    details.sessionStorage = {
      size: sessionStorageSize,
      items: Object.keys(sessionStorage).length,
      sizeKB: Math.round(sessionStorageSize / 1024 * 100) / 100
    };
    totalSize += sessionStorageSize;

    // 3. Cache API (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    details.cacheAPI = {
      supported: 'caches' in window,
      note: '–†–∞–∑–º–µ—Ä Cache API –Ω–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ'
    };

    return {
      totalSize,
      totalSizeKB: Math.round(totalSize / 1024 * 100) / 100,
      details
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞:', error);
    return { error: error.message };
  }
}

/**
 * üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ –∫—ç—à–∞
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –≤–æ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö –∫—ç—à–∞
 */
function getCacheKeys() {
  try {
    const keys = {
      localStorage: Object.keys(localStorage),
      sessionStorage: Object.keys(sessionStorage),
      cacheAPI: 'caches' in window ? '–î–æ—Å—Ç—É–ø–Ω–æ (—Ç—Ä–µ–±—É–µ—Ç async –ø—Ä–æ–≤–µ—Ä–∫–∏)' : '–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
    };

    return keys;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π –∫—ç—à–∞:', error);
    return { error: error.message };
  }
}

/**
 * üóëÔ∏è –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ Cache API
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Cache API
 */
async function getCacheAPIDetails() {
  if (!('caches' in window)) {
    return { supported: false, message: 'Cache API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' };
  }

  try {
    const cacheNames = await caches.keys();
    const details = [];

    for (const cacheName of cacheNames) {
      const cache = await caches.open(cacheName);
      const requests = await cache.keys();
      details.push({
        name: cacheName,
        requestCount: requests.length,
        requests: requests.map(req => ({
          url: req.url,
          method: req.method
        }))
      });
    }

    return {
      supported: true,
      cacheCount: cacheNames.length,
      cacheNames,
      details
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π Cache API:', error);
    return { error: error.message };
  }
}

/**
 * üß™ –¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞ –î–û –æ—á–∏—Å—Ç–∫–∏
 */
async function testCacheBeforeClear() {
  console.log('üîç === –¢–ï–°–¢ –ö–≠–®–ê –î–û –û–ß–ò–°–¢–ö–ò ===');
  
  const cacheSize = getCacheSize();
  const cacheKeys = getCacheKeys();
  const cacheAPIDetails = await getCacheAPIDetails();
  
  console.log('üìä –†–∞–∑–º–µ—Ä –∫—ç—à–∞:', cacheSize);
  console.log('üîë –ö–ª—é—á–∏ –∫—ç—à–∞:', cacheKeys);
  console.log('üåê Cache API –¥–µ—Ç–∞–ª–∏:', cacheAPIDetails);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  window.cacheTestState = {
    before: {
      size: cacheSize,
      keys: cacheKeys,
      cacheAPI: cacheAPIDetails,
      timestamp: new Date().toISOString()
    }
  };
  
  return window.cacheTestState.before;
}

/**
 * üß™ –¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞ –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏
 */
async function testCacheAfterClear() {
  console.log('üîç === –¢–ï–°–¢ –ö–≠–®–ê –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò ===');
  
  const cacheSize = getCacheSize();
  const cacheKeys = getCacheKeys();
  const cacheAPIDetails = await getCacheAPIDetails();
  
  console.log('üìä –†–∞–∑–º–µ—Ä –∫—ç—à–∞:', cacheSize);
  console.log('üîë –ö–ª—é—á–∏ –∫—ç—à–∞:', cacheKeys);
  console.log('üåê Cache API –¥–µ—Ç–∞–ª–∏:', cacheAPIDetails);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
  if (!window.cacheTestState) {
    window.cacheTestState = {};
  }
  
  window.cacheTestState.after = {
    size: cacheSize,
    keys: cacheKeys,
    cacheAPI: cacheAPIDetails,
    timestamp: new Date().toISOString()
  };
  
  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const comparison = compareCacheStates();
  console.log('üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:', comparison);
  
  return {
    after: window.cacheTestState.after,
    comparison
  };
}

/**
 * ‚öñÔ∏è –°—Ä–∞–≤–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞ –¥–æ –∏ –ø–æ—Å–ª–µ
 */
function compareCacheStates() {
  if (!window.cacheTestState || !window.cacheTestState.before) {
    return { error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫—ç—à–∞ –î–û –æ—á–∏—Å—Ç–∫–∏' };
  }
  
  const before = window.cacheTestState.before;
  const after = window.cacheTestState.after;
  
  if (!after) {
    return { error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫—ç—à–∞ –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏' };
  }
  
  const comparison = {
    localStorage: {
      sizeBefore: before.size.details.localStorage.size,
      sizeAfter: after.size.details.localStorage.size,
      itemsBefore: before.size.details.localStorage.items,
      itemsAfter: after.size.details.localStorage.items,
      cleared: before.size.details.localStorage.size - after.size.details.localStorage.size,
      clearedPercent: before.size.details.localStorage.size > 0 
        ? Math.round((1 - after.size.details.localStorage.size / before.size.details.localStorage.size) * 100)
        : 0
    },
    sessionStorage: {
      sizeBefore: before.size.details.sessionStorage.size,
      sizeAfter: after.size.details.sessionStorage.size,
      itemsBefore: before.size.details.sessionStorage.items,
      itemsAfter: after.size.details.sessionStorage.items,
      cleared: before.size.details.sessionStorage.size - after.size.details.sessionStorage.size,
      clearedPercent: before.size.details.sessionStorage.size > 0 
        ? Math.round((1 - after.size.details.sessionStorage.size / before.size.details.sessionStorage.size) * 100)
        : 0
    },
    cacheAPI: {
      cachesBefore: before.cacheAPI.cacheCount || 0,
      cachesAfter: after.cacheAPI.cacheCount || 0,
      cleared: (before.cacheAPI.cacheCount || 0) - (after.cacheAPI.cacheCount || 0)
    },
    total: {
      sizeBefore: before.size.totalSize,
      sizeAfter: after.size.totalSize,
      cleared: before.size.totalSize - after.size.totalSize,
      clearedPercent: before.size.totalSize > 0 
        ? Math.round((1 - after.size.totalSize / before.size.totalSize) * 100)
        : 0
    }
  };
  
  return comparison;
}

/**
 * üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
 */
async function autoTestClearCacheButton() {
  console.log('üöÄ === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –ö–ù–û–ü–ö–ò –û–ß–ò–°–¢–ö–ò –ö–≠–®–ê ===');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –æ—á–∏—Å—Ç–∫–∏
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –æ—á–∏—Å—Ç–∫–∏...');
    const beforeState = await testCacheBeforeClear();
    
    // 2. –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    console.log('2Ô∏è‚É£ –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞...');
    const clearButton = document.querySelector('button[title*="–û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à"]');
    
    if (!clearButton) {
      throw new Error('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    }
    
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', clearButton);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ—Ç–∑—ã–≤—á–∏–≤–∞
    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏...');
    const isDisabled = clearButton.disabled;
    const hasClickHandler = clearButton.onclick || clearButton.getAttribute('onclick');
    
    console.log('üìã –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:', {
      disabled: isDisabled,
      hasClickHandler: !!hasClickHandler,
      className: clearButton.className,
      text: clearButton.textContent.trim()
    });
    
    if (isDisabled) {
      console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞! –í–æ–∑–º–æ–∂–Ω–æ, –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞.');
      return { error: '–ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞' };
    }
    
    // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫ (–ù–ï —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–∫, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞)
    console.log('4Ô∏è‚É£ –ì–æ—Ç–æ–≤ –∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –∫–ª–∏–∫–∞...');
    console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É!');
    
    return {
      success: true,
      beforeState,
      buttonFound: true,
      buttonState: {
        disabled: isDisabled,
        hasClickHandler: !!hasClickHandler,
        text: clearButton.textContent.trim()
      },
      nextSteps: [
        '1. –í—Ä—É—á–Ω—É—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"',
        '2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ',
        '3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
        '4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: testCacheAfterClear()'
      ]
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞:', error);
    return { error: error.message };
  }
}

/**
 * üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
 */
function monitorClearCacheProcess() {
  console.log('üëÅÔ∏è === –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–¶–ï–°–°–ê –û–ß–ò–°–¢–ö–ò ===');
  
  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ DOM –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
        const target = mutation.target;
        if (target.textContent && target.textContent.includes('–û—á–∏—Å—Ç–∫–∞')) {
          console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏:', {
            text: target.textContent.trim(),
            className: target.className,
            disabled: target.disabled
          });
        }
      }
    });
  });
  
  // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  const adminPanel = document.querySelector('[class*="AdminPanel"]') || document.body;
  observer.observe(adminPanel, {
    attributes: true,
    subtree: true,
    attributeFilter: ['class', 'disabled']
  });
  
  console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞.');
  
  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    observer.disconnect();
    console.log('üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ç–∞–π–º–∞—É—Ç 30 —Å–µ–∫)');
  }, 30000);
  
  return observer;
}

/**
 * üìã –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
 */
function generateTestReport() {
  if (!window.cacheTestState || !window.cacheTestState.before || !window.cacheTestState.after) {
    return {
      error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç.'
    };
  }
  
  const comparison = compareCacheStates();
  const before = window.cacheTestState.before;
  const after = window.cacheTestState.after;
  
  const report = {
    testTimestamp: new Date().toISOString(),
    testDuration: new Date(after.timestamp) - new Date(before.timestamp),
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏
    clearingResults: {
      localStorage: {
        clearedSuccessfully: comparison.localStorage.cleared > 0,
        itemsRemoved: comparison.localStorage.itemsBefore - comparison.localStorage.itemsAfter,
        sizeReduced: comparison.localStorage.cleared,
        percentCleared: comparison.localStorage.clearedPercent
      },
      sessionStorage: {
        clearedSuccessfully: comparison.sessionStorage.cleared >= 0, // sessionStorage –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –ø—É—Å—Ç—ã–º
        itemsRemoved: comparison.sessionStorage.itemsBefore - comparison.sessionStorage.itemsAfter,
        sizeReduced: comparison.sessionStorage.cleared,
        percentCleared: comparison.sessionStorage.clearedPercent
      },
      cacheAPI: {
        clearedSuccessfully: comparison.cacheAPI.cleared >= 0,
        cachesRemoved: comparison.cacheAPI.cleared
      }
    },
    
    // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    overallResult: {
      success: (comparison.localStorage.cleared > 0 || comparison.sessionStorage.cleared >= 0 || comparison.cacheAPI.cleared >= 0),
      totalDataCleared: comparison.total.cleared,
      percentTotalCleared: comparison.total.clearedPercent
    },
    
    // –î–µ—Ç–∞–ª–∏
    details: {
      before,
      after,
      comparison
    }
  };
  
  // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
  console.log('üìã === –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –û–ß–ò–°–¢–ö–ò –ö–≠–®–ê ===');
  console.log('üïê –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞:', new Date(report.testTimestamp).toLocaleString());
  console.log('‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', Math.round(report.testDuration / 1000), '—Å–µ–∫—É–Ω–¥');
  console.log('');
  
  console.log('üíæ localStorage:');
  console.log(`   ‚Ä¢ –û—á–∏—â–µ–Ω–æ: ${report.clearingResults.localStorage.clearedSuccessfully ? '‚úÖ' : '‚ùå'}`);
  console.log(`   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${report.clearingResults.localStorage.itemsRemoved}`);
  console.log(`   ‚Ä¢ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: ${Math.round(report.clearingResults.localStorage.sizeReduced / 1024 * 100) / 100} KB`);
  console.log(`   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—á–∏—Å—Ç–∫–∏: ${report.clearingResults.localStorage.percentCleared}%`);
  console.log('');
  
  console.log('üóÉÔ∏è sessionStorage:');
  console.log(`   ‚Ä¢ –û—á–∏—â–µ–Ω–æ: ${report.clearingResults.sessionStorage.clearedSuccessfully ? '‚úÖ' : '‚ùå'}`);
  console.log(`   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${report.clearingResults.sessionStorage.itemsRemoved}`);
  console.log(`   ‚Ä¢ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: ${Math.round(report.clearingResults.sessionStorage.sizeReduced / 1024 * 100) / 100} KB`);
  console.log('');
  
  console.log('üåê Cache API:');
  console.log(`   ‚Ä¢ –û—á–∏—â–µ–Ω–æ: ${report.clearingResults.cacheAPI.clearedSuccessfully ? '‚úÖ' : '‚ùå'}`);
  console.log(`   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∫—ç—à–µ–π: ${report.clearingResults.cacheAPI.cachesRemoved}`);
  console.log('');
  
  console.log('üéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
  console.log(`   ‚Ä¢ –£—Å–ø–µ—Ö: ${report.overallResult.success ? '‚úÖ' : '‚ùå'}`);
  console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –æ—á–∏—â–µ–Ω–æ: ${Math.round(report.overallResult.totalDataCleared / 1024 * 100) / 100} KB`);
  console.log(`   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—á–∏—Å—Ç–∫–∏: ${report.overallResult.percentTotalCleared}%`);
  
  return report;
}

// üöÄ –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.getCacheSize = getCacheSize;
window.getCacheKeys = getCacheKeys;
window.getCacheAPIDetails = getCacheAPIDetails;
window.testCacheBeforeClear = testCacheBeforeClear;
window.testCacheAfterClear = testCacheAfterClear;
window.compareCacheStates = compareCacheStates;
window.generateTestReport = generateTestReport;
window.monitorClearCacheProcess = monitorClearCacheProcess;

console.log('üß™ –£—Ç–∏–ª–∏—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
console.log('üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
console.log('   ‚Ä¢ getCacheSize() - —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞');
console.log('   ‚Ä¢ getCacheKeys() - –∫–ª—é—á–∏ –∫—ç—à–∞');
console.log('   ‚Ä¢ getCacheAPIDetails() - –¥–µ—Ç–∞–ª–∏ Cache API');
console.log('   ‚Ä¢ testCacheBeforeClear() - —Ç–µ—Å—Ç –î–û –æ—á–∏—Å—Ç–∫–∏');
console.log('   ‚Ä¢ testCacheAfterClear() - —Ç–µ—Å—Ç –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏');
console.log('   ‚Ä¢ generateTestReport() - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞');
console.log('   ‚Ä¢ monitorClearCacheProcess() - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞');
console.log('');
console.log('üéØ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: testCacheBeforeClear()');