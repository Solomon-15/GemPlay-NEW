#!/usr/bin/env python3
"""
–¢–æ—á–Ω—ã–π —Ç–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –±–æ—Ç–æ–≤ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ
"""

import math
import random
from datetime import datetime

def test_precise_calculation():
    """–¢–µ—Å—Ç —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ"""
    print("üéØ –¢–ï–°–¢ –¢–û–ß–ù–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê –ë–û–¢–û–í")
    print("=" * 60)
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞: —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    print("1Ô∏è‚É£ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê:")
    params = {
        "–¥–∏–∞–ø–∞–∑–æ–Ω": "1‚Äì100",
        "–∏–≥—Ä": 16,
        "–±–∞–ª–∞–Ω—Å": "7W/6L/3D",
        "–ø—Ä–æ—Ü–µ–Ω—Ç—ã": "44%/36%/20%"
    }
    
    for key, value in params.items():
        print(f"   {key}: {value}")
    
    # 2. –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤ —Å—É–º–º—ã (–º–µ—Ç–æ–¥ –Ω–∞–∏–±–æ–ª—å—à–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤)
    print(f"\n2Ô∏è‚É£ –ü–ï–†–ï–í–û–î –ü–†–û–¶–ï–ù–¢–û–í –í –°–£–ú–ú–´:")
    cycle_total = 809
    wins_pct = 44.0
    losses_pct = 36.0
    draws_pct = 20.0
    
    # –°—ã—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    raw_wins = cycle_total * (wins_pct / 100.0)
    raw_losses = cycle_total * (losses_pct / 100.0)
    raw_draws = cycle_total * (draws_pct / 100.0)
    
    print(f"   –°—ã—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
    print(f"     –ü–æ–±–µ–¥—ã: 0.44√ó809 = {raw_wins:.2f}")
    print(f"     –ü–æ—Ä–∞–∂–µ–Ω–∏—è: 0.36√ó809 = {raw_losses:.2f}")
    print(f"     –ù–∏—á—å–∏: 0.20√ó809 = {raw_draws:.2f}")
    
    # –ü—Ä–∞–≤–∏–ª–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è half-up
    def half_up_round(x):
        """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ half-up: ‚â•0.5 –≤–≤–µ—Ä—Ö, <0.5 –≤–Ω–∏–∑"""
        return int(x + 0.5) if x >= 0 else int(x - 0.5)
    
    wins_sum = half_up_round(raw_wins)
    losses_sum = half_up_round(raw_losses)
    draws_sum = half_up_round(raw_draws)
    
    print(f"   –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ half-up:")
    print(f"     –ü–æ–±–µ–¥—ã: {raw_wins:.2f} ‚Üí –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å {raw_wins - math.floor(raw_wins):.2f} ‚Üí {wins_sum}")
    print(f"     –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {raw_losses:.2f} ‚Üí –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å {raw_losses - math.floor(raw_losses):.2f} ‚Üí {losses_sum}")
    print(f"     –ù–∏—á—å–∏: {raw_draws:.2f} ‚Üí –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å {raw_draws - math.floor(raw_draws):.2f} ‚Üí {draws_sum}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
    total_check = wins_sum + losses_sum + draws_sum
    print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞: {wins_sum}+{losses_sum}+{draws_sum} = {total_check} {'‚úÖ' if total_check == cycle_total else '‚ùå'}")
    
    # 3. –°—Ä–µ–¥–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (sanity-check)
    print(f"\n3Ô∏è‚É£ SANITY-CHECK –°–†–ï–î–ù–ò–• –ó–ù–ê–ß–ï–ù–ò–ô:")
    avg_wins = wins_sum / 7
    avg_losses = losses_sum / 6
    avg_draws = draws_sum / 3
    
    print(f"   –ü–æ–±–µ–¥—ã: {wins_sum}/7 ‚âà {avg_wins:.1f}")
    print(f"   –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {losses_sum}/6 = {avg_losses:.1f}")
    print(f"   –ù–∏—á—å–∏: {draws_sum}/3 = {avg_draws:.1f}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [1;100]
    all_in_range = all(1 <= avg <= 100 for avg in [avg_wins, avg_losses, avg_draws])
    print(f"   –í—Å–µ —Å—Ä–µ–¥–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [1;100]: {'‚úÖ' if all_in_range else '‚ùå'}")
    
    # 4. –ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª –∏ –ø—Ä–∏–±—ã–ª—å
    print(f"\n4Ô∏è‚É£ –§–ò–ù–ê–ù–°–û–í–´–ï –†–ê–°–ß–Å–¢–´:")
    active_pool = wins_sum + losses_sum
    profit = wins_sum - losses_sum
    roi = (profit / active_pool * 100) if active_pool > 0 else 0
    
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª (—Å—Ç–∞–≤–∫–∏ —Å —Ä–∏—Å–∫–æ–º): {active_pool} = {wins_sum}+{losses_sum}")
    print(f"   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {profit} = {wins_sum}‚àí{losses_sum}")
    print(f"   ROI: {profit}/{active_pool} ‚âà {roi:.2f}% (–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—É–ª–∞, –Ω–∏—á—å–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    expected = {
        "cycle_total": 809,
        "wins": 356,
        "losses": 291,
        "draws": 162,
        "active_pool": 647,
        "profit": 65,
        "roi": 10.05
    }
    
    actual = {
        "cycle_total": total_check,
        "wins": wins_sum,
        "losses": losses_sum,
        "draws": draws_sum,
        "active_pool": active_pool,
        "profit": profit,
        "roi": round(roi, 2)
    }
    
    print(f"\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –≠–¢–ê–õ–û–ù–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô:")
    all_correct = True
    for key in expected:
        exp_val = expected[key]
        act_val = actual[key]
        
        if key == "roi":
            correct = abs(act_val - exp_val) < 0.1
        else:
            correct = act_val == exp_val
        
        status = "‚úÖ" if correct else "‚ùå"
        print(f"   {key}: {act_val} (–æ–∂–∏–¥–∞–ª–æ—Å—å {exp_val}) {status}")
        
        if not correct:
            all_correct = False
    
    return all_correct, actual

def test_bet_generation_algorithm():
    """–¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫"""
    print(f"\nüé≤ –¢–ï–°–¢ –ê–õ–ì–û–†–ò–¢–ú–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –°–¢–ê–í–û–ö")
    print("=" * 60)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    min_bet = 1
    max_bet = 100
    wins_count = 7
    losses_count = 6
    draws_count = 3
    target_wins = 356
    target_losses = 291
    target_draws = 162
    
    print(f"üìä –ü–ê–†–ê–ú–ï–¢–†–´ –ì–ï–ù–ï–†–ê–¶–ò–ò:")
    print(f"   –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–≤–æ–∫: [{min_bet}; {max_bet}]")
    print(f"   –ë–∞–ª–∞–Ω—Å –∏–≥—Ä: {wins_count}W/{losses_count}L/{draws_count}D")
    print(f"   –¶–µ–ª–µ–≤—ã–µ —Å—É–º–º—ã: W={target_wins}, L={target_losses}, D={target_draws}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    def generate_category_bets(count, target_sum, min_val, max_val):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–æ—á–Ω–æ–π —Å—É–º–º–æ–π"""
        if count == 0:
            return []
        
        # –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ (—Å–ª—É—á–∞–π–Ω—ã–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ)
        base_bets = []
        for i in range(count):
            if i < count // 3:  # –ú–∞–ª—ã–µ —Å—Ç–∞–≤–∫–∏
                bet = random.randint(min_val, min_val + (max_val - min_val) // 4)
            elif i < 2 * count // 3:  # –°—Ä–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
                bet = random.randint(min_val + (max_val - min_val) // 4, min_val + 3 * (max_val - min_val) // 4)
            else:  # –ö—Ä—É–ø–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
                bet = random.randint(min_val + 3 * (max_val - min_val) // 4, max_val)
            base_bets.append(bet)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —Ç–æ—á–Ω–æ–π —Å—É–º–º–µ
        current_sum = sum(base_bets)
        diff = target_sum - current_sum
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞–≤–∫—É
        if len(base_bets) > 0:
            base_bets[-1] += diff
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å—Ç–∞–≤–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            base_bets[-1] = max(min_val, min(max_val, base_bets[-1]))
        
        return base_bets
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    wins_bets = generate_category_bets(wins_count, target_wins, min_bet, max_bet)
    losses_bets = generate_category_bets(losses_count, target_losses, min_bet, max_bet)
    draws_bets = generate_category_bets(draws_count, target_draws, min_bet, max_bet)
    
    print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–ï–ù–ï–†–ê–¶–ò–ò:")
    print(f"   –ü–æ–±–µ–¥—ã: {len(wins_bets)} —Å—Ç–∞–≤–æ–∫, —Å—É–º–º—ã: {wins_bets}, –∏—Ç–æ–≥–æ: {sum(wins_bets)}")
    print(f"   –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {len(losses_bets)} —Å—Ç–∞–≤–æ–∫, —Å—É–º–º—ã: {losses_bets}, –∏—Ç–æ–≥–æ: {sum(losses_bets)}")
    print(f"   –ù–∏—á—å–∏: {len(draws_bets)} —Å—Ç–∞–≤–æ–∫, —Å—É–º–º—ã: {draws_bets}, –∏—Ç–æ–≥–æ: {sum(draws_bets)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
    actual_wins = sum(wins_bets)
    actual_losses = sum(losses_bets)
    actual_draws = sum(draws_bets)
    total_generated = actual_wins + actual_losses + actual_draws
    
    print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê –¢–û–ß–ù–û–°–¢–ò:")
    print(f"   –¶–µ–ª–µ–≤—ã–µ —Å—É–º–º—ã: W={target_wins}, L={target_losses}, D={target_draws}")
    print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ: W={actual_wins}, L={actual_losses}, D={actual_draws}")
    print(f"   –û–±—â–∞—è —Å—É–º–º–∞: {total_generated} (—Ü–µ–ª—å: 809)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    all_bets = wins_bets + losses_bets + draws_bets
    min_generated = min(all_bets) if all_bets else 0
    max_generated = max(all_bets) if all_bets else 0
    
    print(f"   –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–≤–æ–∫: [{min_generated}; {max_generated}] (—Ü–µ–ª—å: [1; 100])")
    
    range_ok = min_generated >= min_bet and max_generated <= max_bet
    sums_ok = actual_wins == target_wins and actual_losses == target_losses and actual_draws == target_draws
    
    success = range_ok and sums_ok and total_generated == 809
    
    if success:
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞–≤–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—É!")
    else:
        print("‚ùå –û—à–∏–±–∫–∏ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫!")
    
    return success, {
        "wins_bets": wins_bets,
        "losses_bets": losses_bets, 
        "draws_bets": draws_bets,
        "total": total_generated
    }

def test_cycle_execution_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞"""
    print(f"\nüéÆ –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø –¶–ò–ö–õ–ê")
    print("=" * 60)
    
    print(f"üìã –õ–û–ì–ò–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
    execution_rules = [
        "16 —Å—Ç–∞–≤–æ–∫ –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ",
        "–ù–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ–∏–∫—Å–∞—Ü–∏–π PnL (–Ω–∞ 8/16 ‚Äî —Ç–æ–ª—å–∫–æ –ª–æ–≥-—Å–æ–±—ã—Ç–∏–µ)",
        "–ù–∏—á—å—è –¥–∞—ë—Ç PnL=0 –∏ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ resolved",
        "–ü—Ä–∏ –ø–æ–±–µ–¥–µ: PnL = +—Å—É–º–º–∞_—Å—Ç–∞–≤–∫–∏",
        "–ü—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏: PnL = -—Å—É–º–º–∞_—Å—Ç–∞–≤–∫–∏"
    ]
    
    for i, rule in enumerate(execution_rules, 1):
        print(f"   {i}. {rule}")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞
    wins_amount = 356
    losses_amount = 291
    draws_amount = 162
    
    print(f"\nüéØ –°–ò–ú–£–õ–Ø–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
    
    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫
    all_bets = []
    all_bets.extend([("win", 356//7)] * 7)      # 7 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
    all_bets.extend([("loss", 291//6)] * 6)     # 6 –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
    all_bets.extend([("draw", 162//3)] * 3)     # 3 –Ω–∏—á–µ–π–Ω—ã—Ö —Å—Ç–∞–≤–∫–∏
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    random.shuffle(all_bets)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª
    resolved_count = 0
    running_pnl = 0
    wins_resolved = 0
    losses_resolved = 0
    draws_resolved = 0
    
    print(f"   –ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫:")
    for i, (result, amount) in enumerate(all_bets[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        resolved_count += 1
        
        if result == "win":
            pnl_change = amount
            wins_resolved += 1
        elif result == "loss":
            pnl_change = -amount
            losses_resolved += 1
        else:  # draw
            pnl_change = 0  # –ù–∏—á—å—è –¥–∞—ë—Ç PnL=0
            draws_resolved += 1
        
        running_pnl += pnl_change
        print(f"     –°—Ç–∞–≤–∫–∞ {i}: {result} ${amount} ‚Üí PnL: {pnl_change:+} ‚Üí –û–±—â–∏–π PnL: {running_pnl:+}")
    
    print(f"     ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ 11 —Å—Ç–∞–≤–æ–∫)")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    final_pnl = wins_amount - losses_amount  # –ù–∏—á—å–∏ –Ω–µ –≤–ª–∏—è—é—Ç
    print(f"\n   –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"     Resolved: 16/16 —Å—Ç–∞–≤–æ–∫")
    print(f"     W/L/D: 7/6/3")
    print(f"     –§–∏–Ω–∞–ª—å–Ω—ã–π PnL: {wins_amount} - {losses_amount} = {final_pnl}")
    
    return final_pnl == 65

def test_cycle_completion():
    """–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞"""
    print(f"\nüèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù–ò–Ø –¶–ò–ö–õ–ê")
    print("=" * 60)
    
    print(f"üìä –£–°–õ–û–í–ò–ï –ó–ê–í–ï–†–®–ï–ù–ò–Ø:")
    print(f"   –ö–æ–≥–¥–∞ –≤—Å–µ 16 resolved ‚Üí —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    wins_amount = 356
    losses_amount = 291
    draws_amount = 162
    active_pool = wins_amount + losses_amount
    pnl_realized = wins_amount - losses_amount
    roi = (pnl_realized / active_pool) * 100
    
    print(f"\nüéØ –§–ò–ö–°–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print(f"   pnl_realized = {pnl_realized}")
    print(f"   ROI = {pnl_realized}/{active_pool} √ó 100 = {roi:.2f}% (–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—É–ª–∞)")
    print(f"   –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å: +${pnl_realized}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
    expected_pnl = 65
    expected_roi = 10.05
    
    pnl_correct = pnl_realized == expected_pnl
    roi_correct = abs(roi - expected_roi) < 0.1
    
    print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ò–Ø:")
    print(f"   PnL: {pnl_realized} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_pnl}) {'‚úÖ' if pnl_correct else '‚ùå'}")
    print(f"   ROI: {roi:.2f}% (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_roi}%) {'‚úÖ' if roi_correct else '‚ùå'}")
    
    return pnl_correct and roi_correct

def test_profit_report():
    """–¢–µ—Å—Ç –æ—Ç—á—ë—Ç–∞ '–î–æ—Ö–æ–¥ –æ—Ç –±–æ—Ç–æ–≤'"""
    print(f"\nüìä –¢–ï–°–¢ –û–¢–ß–Å–¢–ê '–î–û–•–û–î –û–¢ –ë–û–¢–û–í'")
    print("=" * 60)
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á—ë—Ç–∞
    report_data = {
        "–í—Å–µ–≥–æ –∏–≥—Ä": 16,
        "W/L/D": "7/6/3",
        "–°—É–º–º–∞ —Ü–∏–∫–ª–∞": 809,
        "–ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª": 647,
        "–ü—Ä–∏–±—ã–ª—å": 65,
        "ROI": 10.05
    }
    
    print(f"üìã –ü–ï–†–ï–î–ê–í–ê–ï–ú–´–ï –î–ê–ù–ù–´–ï:")
    for key, value in report_data.items():
        print(f"   {key}: {value}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
    expected_report = {
        "–í—Å–µ–≥–æ –∏–≥—Ä": 16,
        "W/L/D": "7/6/3", 
        "–°—É–º–º–∞ —Ü–∏–∫–ª–∞": 809,
        "–ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª": 647,
        "–ü—Ä–∏–±—ã–ª—å": 65,
        "ROI": 10.05
    }
    
    print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê –û–¢–ß–Å–¢–ê:")
    all_correct = True
    for key in expected_report:
        expected_val = expected_report[key]
        actual_val = report_data[key]
        
        if key == "ROI":
            correct = abs(actual_val - expected_val) < 0.1
        else:
            correct = actual_val == expected_val
        
        status = "‚úÖ" if correct else "‚ùå"
        print(f"   {key}: {actual_val} {'‚úÖ' if correct else '‚ùå'}")
        
        if not correct:
            all_correct = False
    
    return all_correct

def test_ui_display_requirements():
    """–¢–µ—Å—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ UI"""
    print(f"\nüé® –¢–ï–°–¢ –¢–†–ï–ë–û–í–ê–ù–ò–ô –ö –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Æ")
    print("=" * 60)
    
    ui_requirements = [
        {
            "location": "–ú–æ–¥–∞–ª–∫–∞ '–°–æ–∑–¥–∞—Ç—å –æ–±—ã—á–Ω–æ–≥–æ –±–æ—Ç–∞' ‚Üí 'üìä –ü—Ä–µ–≤—å—é ROI —Ä–∞—Å—á–µ—Ç–æ–≤'",
            "field": "–û–±—â–∞—è —Å—É–º–º–∞ —Ü–∏–∫–ª–∞:",
            "value": 809
        },
        {
            "location": "–°–ø–∏—Å–æ–∫ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤",
            "field": "—Å—É–º–º–∞ —Å—Ç–∞–≤–æ–∫",
            "value": 809
        },
        {
            "location": "–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤",
            "field": "–í—ã–∏–≥—Ä—ã—à",
            "value": "+$356 (–ù–ï $64!)"
        },
        {
            "location": "–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤", 
            "field": "–ü—Ä–æ–∏–≥—Ä—ã—à",
            "value": "$291 (–ù–ï $303!)"
        },
        {
            "location": "–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤",
            "field": "–ü—Ä–∏–±—ã–ª—å", 
            "value": "+$65 (–ù–ï $64!)"
        },
        {
            "location": "–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤",
            "field": "ROI",
            "value": "+10.05% (–ù–ï +17.44%!)"
        },
        {
            "location": "–î–æ—Ö–æ–¥ –æ—Ç –±–æ—Ç–æ–≤",
            "field": "–û–±—â–∏–π –¥–æ—Ö–æ–¥",
            "value": "+$65"
        }
    ]
    
    print(f"üì± –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö UI:")
    for req in ui_requirements:
        print(f"   üìç {req['location']}")
        print(f"     {req['field']}: {req['value']}")
    
    print(f"\n‚ùå –°–¢–ê–†–´–ï –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø (–î–û–õ–ñ–ù–´ –ò–°–ß–ï–ó–ù–£–¢–¨):")
    wrong_values = [
        "–í—ã–∏–≥—Ä—ã—à: $64",
        "–ü—Ä–æ–∏–≥—Ä—ã—à: $303", 
        "–ü—Ä–∏–±—ã–ª—å: $64",
        "ROI: 17.44%"
    ]
    
    for wrong in wrong_values:
        print(f"   ‚ùå {wrong}")
    
    return True

def run_complete_algorithm_test():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –¢–û–ß–ù–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê –ë–û–¢–û–í")
    print("üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ")
    print("=" * 80)
    
    # –¢–µ—Å—Ç 1: –¢–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç
    calc_success, calc_results = test_precise_calculation()
    
    # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞–≤–æ–∫
    gen_success, gen_results = test_bet_generation_algorithm()
    
    # –¢–µ—Å—Ç 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
    exec_success = test_cycle_execution_logic()
    
    # –¢–µ—Å—Ç 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
    comp_success = test_cycle_completion()
    
    # –¢–µ—Å—Ç 5: –û—Ç—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏
    report_success = test_profit_report()
    
    # –¢–µ—Å—Ç 6: UI —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    ui_success = test_ui_display_requirements()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_tests = [calc_success, gen_success, exec_success, comp_success, report_success, ui_success]
    passed = sum(all_tests)
    total = len(all_tests)
    
    print(f"\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–õ–ì–û–†–ò–¢–ú–ê")
    print("=" * 80)
    
    print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º –±–æ—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ—á–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        print("‚úÖ –í—Å–µ —Ä–∞—Å—á—ë—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        print("‚úÖ –õ–æ–≥–∏–∫–∞ —Ü–∏–∫–ª–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è")
        print("‚úÖ UI –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        
        print(f"\nüéØ –ü–û–î–¢–í–ï–†–ñ–î–Å–ù–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø:")
        if calc_results:
            for key, value in calc_results.items():
                print(f"   {key}: {value}")
    else:
        print(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    return passed == total

if __name__ == "__main__":
    success = run_complete_algorithm_test()
    
    print(f"\n" + "=" * 80)
    if success:
        print("‚úÖ –ê–õ–ì–û–†–ò–¢–ú –ë–û–¢–û–í –ü–û–õ–ù–û–°–¢–¨–Æ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–ò!")
    else:
        print("‚ùå –ê–õ–ì–û–†–ò–¢–ú –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò!")
    print("=" * 80)