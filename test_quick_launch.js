// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤...');

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–æ–≤ –≤ localStorage
function testPresetStorage() {
  console.log('\nüì¶ –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤');
  
  const testPreset = {
    id: '1234567890',
    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç',
    buttonName: 'üß™ –¢–µ—Å—Ç',
    buttonColor: 'green',
    min_bet_amount: 5.0,
    max_bet_amount: 100.0,
    wins_percentage: 45.0,
    losses_percentage: 35.0,
    draws_percentage: 20.0,
    cycle_games: 20,
    pause_between_cycles: 10,
    pause_on_draw: 3
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç
  const presets = [testPreset];
  localStorage.setItem('quickLaunchPresets', JSON.stringify(presets));
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
  const loaded = JSON.parse(localStorage.getItem('quickLaunchPresets'));
  
  if (loaded && loaded.length === 1 && loaded[0].name === testPreset.name) {
    console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –ü—Ä–µ—Å–µ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è');
    return true;
  } else {
    console.log('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤');
    return false;
  }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
function testPercentageValidation() {
  console.log('\nüî¢ –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏—Å—Ö–æ–¥–æ–≤');
  
  const validPreset = { wins_percentage: 45, losses_percentage: 35, draws_percentage: 20 };
  const invalidPreset = { wins_percentage: 50, losses_percentage: 40, draws_percentage: 20 };
  
  const validTotal = validPreset.wins_percentage + validPreset.losses_percentage + validPreset.draws_percentage;
  const invalidTotal = invalidPreset.wins_percentage + invalidPreset.losses_percentage + invalidPreset.draws_percentage;
  
  const validCheck = Math.abs(validTotal - 100) < 0.1;
  const invalidCheck = Math.abs(invalidTotal - 100) > 0.1;
  
  if (validCheck && invalidCheck) {
    console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log(`   –í–∞–ª–∏–¥–Ω—ã–π: ${validTotal}% - ${validCheck ? 'OK' : 'FAIL'}`);
    console.log(`   –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π: ${invalidTotal}% - ${invalidCheck ? 'FAIL (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)' : 'OK (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)'}`);
    return true;
  } else {
    console.log('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤');
    return false;
  }
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
function testBotDataGeneration() {
  console.log('\nü§ñ –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞');
  
  const preset = {
    name: '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π',
    min_bet_amount: 10,
    max_bet_amount: 200,
    wins_percentage: 40,
    losses_percentage: 35,
    draws_percentage: 25,
    cycle_games: 16,
    pause_between_cycles: 5,
    pause_on_draw: 2
  };
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ –∫–æ–¥–µ
  const timestamp = Date.now();
  const botData = {
    name: `${preset.name}-${timestamp}`,
    min_bet_amount: preset.min_bet_amount,
    max_bet_amount: preset.max_bet_amount,
    wins_percentage: preset.wins_percentage,
    losses_percentage: preset.losses_percentage,
    draws_percentage: preset.draws_percentage,
    cycle_games: preset.cycle_games,
    pause_between_cycles: preset.pause_between_cycles,
    pause_on_draw: preset.pause_on_draw,
    wins_count: Math.round(preset.cycle_games * preset.wins_percentage / 100),
    losses_count: Math.round(preset.cycle_games * preset.losses_percentage / 100),
    draws_count: Math.round(preset.cycle_games * preset.draws_percentage / 100)
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
  const expectedWins = Math.round(16 * 40 / 100); // 6
  const expectedLosses = Math.round(16 * 35 / 100); // 6
  const expectedDraws = Math.round(16 * 25 / 100); // 4
  const totalGames = botData.wins_count + botData.losses_count + botData.draws_count;
  
  console.log(`   –ò–º—è: ${botData.name}`);
  console.log(`   –°—Ç–∞–≤–∫–∏: ${botData.min_bet_amount}-${botData.max_bet_amount}`);
  console.log(`   –ò–≥—Ä—ã: W=${botData.wins_count}, L=${botData.losses_count}, D=${botData.draws_count}, Total=${totalGames}`);
  console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: W=${expectedWins}, L=${expectedLosses}, D=${expectedDraws}, Total=16`);
  
  if (botData.wins_count === expectedWins && botData.losses_count === expectedLosses && 
      botData.draws_count === expectedDraws && totalGames === 16) {
    console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return true;
  } else {
    console.log('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞');
    return false;
  }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Å—Ö–µ–º –∫–Ω–æ–ø–æ–∫
function testButtonColors() {
  console.log('\nüé® –¢–µ—Å—Ç 4: –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –∫–Ω–æ–ø–æ–∫');
  
  const colors = ['blue', 'green', 'red', 'yellow', 'purple', 'orange'];
  const expectedClasses = {
    'blue': 'bg-blue-600 hover:bg-blue-700 border-blue-500',
    'green': 'bg-green-600 hover:bg-green-700 border-green-500',
    'red': 'bg-red-600 hover:bg-red-700 border-red-500',
    'yellow': 'bg-yellow-600 hover:bg-yellow-700 border-yellow-500',
    'purple': 'bg-purple-600 hover:bg-purple-700 border-purple-500',
    'orange': 'bg-orange-600 hover:bg-orange-700 border-orange-500'
  };
  
  let allCorrect = true;
  colors.forEach(color => {
    const preset = { buttonColor: color };
    const className = preset.buttonColor === 'green' ? 'bg-green-600 hover:bg-green-700 border-green-500' :
                     preset.buttonColor === 'red' ? 'bg-red-600 hover:bg-red-700 border-red-500' :
                     preset.buttonColor === 'yellow' ? 'bg-yellow-600 hover:bg-yellow-700 border-yellow-500' :
                     preset.buttonColor === 'purple' ? 'bg-purple-600 hover:bg-purple-700 border-purple-500' :
                     preset.buttonColor === 'orange' ? 'bg-orange-600 hover:bg-orange-700 border-orange-500' :
                     'bg-blue-600 hover:bg-blue-700 border-blue-500';
    
    if (className !== expectedClasses[color]) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Ü–≤–µ—Ç–∞ ${color}: –æ–∂–∏–¥–∞–ª—Å—è "${expectedClasses[color]}", –ø–æ–ª—É—á–µ–Ω "${className}"`);
      allCorrect = false;
    }
  });
  
  if (allCorrect) {
    console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –í—Å–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log(`   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ü–≤–µ—Ç–∞: ${colors.join(', ')}`);
    return true;
  } else {
    console.log('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –û—à–∏–±–∫–∏ –≤ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Å—Ö–µ–º–∞—Ö');
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤\n');
  
  const tests = [
    testPresetStorage,
    testPercentageValidation,
    testBotDataGeneration,
    testButtonColors
  ];
  
  let passed = 0;
  let total = tests.length;
  
  tests.forEach(test => {
    if (test()) {
      passed++;
    }
  });
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
  console.log(`   –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total}`);
  console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((passed/total) * 100)}%`);
  
  if (passed === total) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
  } else {
    console.log(`\n‚ö†Ô∏è  ${total - passed} —Ç–µ—Å—Ç(–æ–≤) –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.`);
  }
  
  // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
  localStorage.removeItem('quickLaunchPresets');
  
  return passed === total;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (typeof window !== 'undefined') {
  runAllTests();
} else {
  module.exports = { runAllTests, testPresetStorage, testPercentageValidation, testBotDataGeneration, testButtonColors };
}