#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤
–û—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –¥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
"""

import asyncio
import sys
import os
import json
import math
from datetime import datetime, timedelta
import uuid

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append('/workspace/backend')

class ComprehensiveBotCycleTest:
    def __init__(self):
        self.test_results = {}
        self.test_bot_id = f"test_bot_{uuid.uuid4().hex[:8]}"
        self.mock_db = MockDatabase()
        
    async def run_full_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∞"""
        print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢: –ü–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤")
        print("üéØ –û—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –¥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏")
        print("=" * 80)
        
        try:
            # –≠—Ç–∞–ø 1: –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á—ë—Ç–æ–≤
            await self.test_calculation_logic()
            
            # –≠—Ç–∞–ø 2: –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
            await self.test_bot_creation()
            
            # –≠—Ç–∞–ø 3: –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫ —Ü–∏–∫–ª–∞
            await self.test_cycle_bet_generation()
            
            # –≠—Ç–∞–ø 4: –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ü–∏–∫–ª–æ–≤
            await self.test_cycle_automation()
            
            # –≠—Ç–∞–ø 5: –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–≥—Ä
            await self.test_game_execution()
            
            # –≠—Ç–∞–ø 6: –¢–µ—Å—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏
            await self.test_profit_accumulation()
            
            # –≠—Ç–∞–ø 7: –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞
            await self.test_cycle_completion()
            
            # –≠—Ç–∞–ø 8: –¢–µ—Å—Ç API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            await self.test_api_integration()
            
            # –≠—Ç–∞–ø 9: –¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            await self.test_ui_display()
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
            self.generate_final_report()
            
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            import traceback
            traceback.print_exc()
    
    async def test_calculation_logic(self):
        """–≠—Ç–∞–ø 1: –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á—ë—Ç–æ–≤"""
        print("\nüìä –≠–¢–ê–ü 1: –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á—ë—Ç–æ–≤")
        print("-" * 50)
        
        try:
            # –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            exact_cycle_total = 809
            wins_percentage = 44.0
            losses_percentage = 36.0
            draws_percentage = 20.0
            
            # –¢–µ—Å—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è half-up
            def half_up_round(x):
                return int(x + 0.5) if x >= 0 else int(x - 0.5)
            
            raw_w = exact_cycle_total * (wins_percentage / 100.0)
            raw_l = exact_cycle_total * (losses_percentage / 100.0)
            raw_d = exact_cycle_total * (draws_percentage / 100.0)
            
            wins_sum = half_up_round(raw_w)
            losses_sum = half_up_round(raw_l)
            draws_sum = half_up_round(raw_d)
            
            total_sum = wins_sum + losses_sum + draws_sum
            active_pool = wins_sum + losses_sum
            profit = wins_sum - losses_sum
            roi = (profit / active_pool * 100) if active_pool > 0 else 0
            
            print(f"üìà –†–∞—Å—á—ë—Ç—ã:")
            print(f"   –°—ã—Ä—ã–µ: W={raw_w:.2f}, L={raw_l:.2f}, D={raw_d:.2f}")
            print(f"   –û–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–µ: W={wins_sum}, L={losses_sum}, D={draws_sum}")
            print(f"   –û–±—â–∞—è —Å—É–º–º–∞: {total_sum}")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª: {active_pool}")
            print(f"   –ü—Ä–∏–±—ã–ª—å: {profit}")
            print(f"   ROI: {roi:.2f}%")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            expected = {"total": 809, "wins": 356, "losses": 291, "draws": 162, "profit": 65, "roi": 10.05}
            
            success = (
                total_sum == expected["total"] and
                wins_sum == expected["wins"] and
                losses_sum == expected["losses"] and
                draws_sum == expected["draws"] and
                profit == expected["profit"] and
                abs(roi - expected["roi"]) < 0.1
            )
            
            if success:
                print("‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ —Ä–∞—Å—á—ë—Ç–æ–≤!")
                
            self.test_results["calculation_logic"] = {
                "status": "SUCCESS" if success else "FAILED",
                "calculated": {"wins": wins_sum, "losses": losses_sum, "draws": draws_sum, "profit": profit, "roi": roi},
                "expected": expected
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["calculation_logic"] = {"status": "ERROR", "error": str(e)}
    
    async def test_bot_creation(self):
        """–≠—Ç–∞–ø 2: –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞"""
        print("\nü§ñ –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞")
        print("-" * 50)
        
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
            bot_config = {
                "name": f"TestBot_{self.test_bot_id[:8]}",
                "min_bet_amount": 1.0,
                "max_bet_amount": 100.0,
                "cycle_games": 16,
                "wins_percentage": 44.0,
                "losses_percentage": 36.0,
                "draws_percentage": 20.0,
                "wins_count": 7,
                "losses_count": 6,
                "draws_count": 3,
                "pause_between_cycles": 5
                # –£–î–ê–õ–ï–ù–û: pause_on_draw - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            }
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
            test_bot = {
                "id": self.test_bot_id,
                "name": bot_config["name"],
                "bot_type": "REGULAR",
                "is_active": True,
                "min_bet_amount": bot_config["min_bet_amount"],
                "max_bet_amount": bot_config["max_bet_amount"],
                "cycle_games": bot_config["cycle_games"],
                "wins_percentage": bot_config["wins_percentage"],
                "losses_percentage": bot_config["losses_percentage"],
                "draws_percentage": bot_config["draws_percentage"],
                "wins_count": bot_config["wins_count"],
                "losses_count": bot_config["losses_count"],
                "draws_count": bot_config["draws_count"],
                "pause_between_cycles": bot_config["pause_between_cycles"],
                # –£–î–ê–õ–ï–ù–û: pause_on_draw
                "created_at": datetime.utcnow(),
                "has_completed_cycles": False
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ mock –ë–î
            self.mock_db.bots[self.test_bot_id] = test_bot
            
            print(f"‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω:")
            print(f"   ID: {test_bot['id']}")
            print(f"   –ò–º—è: {test_bot['name']}")
            print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: {test_bot['min_bet_amount']}-{test_bot['max_bet_amount']}")
            print(f"   –ò–≥—Ä –≤ —Ü–∏–∫–ª–µ: {test_bot['cycle_games']}")
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç—ã: {test_bot['wins_percentage']}%/{test_bot['losses_percentage']}%/{test_bot['draws_percentage']}%")
            print(f"   –ë–∞–ª–∞–Ω—Å –∏–≥—Ä: {test_bot['wins_count']}/{test_bot['losses_count']}/{test_bot['draws_count']}")
            print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {test_bot['is_active']}")
            print(f"   ‚ùå pause_on_draw: –£–î–ê–õ–ï–ù–û")
            
            self.test_results["bot_creation"] = {
                "status": "SUCCESS",
                "bot_config": bot_config,
                "created_bot": test_bot
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["bot_creation"] = {"status": "ERROR", "error": str(e)}
    
    async def test_cycle_bet_generation(self):
        """–≠—Ç–∞–ø 3: –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫ —Ü–∏–∫–ª–∞"""
        print("\nüéØ –≠–¢–ê–ü 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞–≤–æ–∫ —Ü–∏–∫–ª–∞")
        print("-" * 50)
        
        try:
            bot = self.mock_db.bots[self.test_bot_id]
            
            # –°–∏–º—É–ª—è—Ü–∏—è generate_cycle_bets_natural_distribution
            cycle_bets = await self.simulate_bet_generation(bot)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            wins_bets = [bet for bet in cycle_bets if bet["result"] == "win"]
            losses_bets = [bet for bet in cycle_bets if bet["result"] == "loss"]
            draws_bets = [bet for bet in cycle_bets if bet["result"] == "draw"]
            
            wins_sum = sum(bet["amount"] for bet in wins_bets)
            losses_sum = sum(bet["amount"] for bet in losses_bets)
            draws_sum = sum(bet["amount"] for bet in draws_bets)
            total_sum = wins_sum + losses_sum + draws_sum
            
            print(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:")
            print(f"   –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {len(cycle_bets)}")
            print(f"   –ü–æ–±–µ–¥—ã: {len(wins_bets)} —Å—Ç–∞–≤–æ–∫, —Å—É–º–º–∞: {wins_sum}")
            print(f"   –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {len(losses_bets)} —Å—Ç–∞–≤–æ–∫, —Å—É–º–º–∞: {losses_sum}")
            print(f"   –ù–∏—á—å–∏: {len(draws_bets)} —Å—Ç–∞–≤–æ–∫, —Å—É–º–º–∞: {draws_sum}")
            print(f"   –û–±—â–∞—è —Å—É–º–º–∞: {total_sum}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫–∏ –≤ mock –ë–î
            self.mock_db.games[self.test_bot_id] = cycle_bets
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            expected = {"total": 809, "wins": 356, "losses": 291, "draws": 162}
            success = (
                total_sum == expected["total"] and
                wins_sum == expected["wins"] and
                losses_sum == expected["losses"] and
                draws_sum == expected["draws"]
            )
            
            if success:
                print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞–≤–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫!")
                print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
                print(f"   –ü–æ–ª—É—á–µ–Ω–æ: W={wins_sum}, L={losses_sum}, D={draws_sum}, T={total_sum}")
            
            self.test_results["bet_generation"] = {
                "status": "SUCCESS" if success else "FAILED",
                "generated_bets": len(cycle_bets),
                "sums": {"wins": wins_sum, "losses": losses_sum, "draws": draws_sum, "total": total_sum},
                "expected": expected
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["bet_generation"] = {"status": "ERROR", "error": str(e)}
    
    async def test_cycle_automation(self):
        """–≠—Ç–∞–ø 4: –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ü–∏–∫–ª–æ–≤"""
        print("\n‚öôÔ∏è –≠–¢–ê–ü 4: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ü–∏–∫–ª–æ–≤")
        print("-" * 50)
        
        try:
            bot = self.mock_db.bots[self.test_bot_id]
            
            # –°–∏–º—É–ª—è—Ü–∏—è maintain_all_bots_active_bets –ª–æ–≥–∏–∫–∏
            total_games = len(self.mock_db.games.get(self.test_bot_id, []))
            active_games = 0  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ –∏–≥—Ä—ã WAITING
            completed_games = 0
            cycle_games_target = bot["cycle_games"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
            cycle_fully_completed = (
                total_games >= cycle_games_target and 
                active_games == 0 and 
                completed_games > 0
            )
            needs_initial_cycle = total_games == 0
            
            print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:")
            print(f"   –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {active_games}")
            print(f"   –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–≥—Ä: {completed_games}")
            print(f"   –¶–µ–ª—å: {cycle_games_target}")
            print(f"   needs_initial_cycle: {needs_initial_cycle}")
            print(f"   cycle_fully_completed: {cycle_fully_completed}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if needs_initial_cycle:
                action = "–°–û–ó–î–ê–¢–¨ –ù–û–í–´–ô –¶–ò–ö–õ"
                should_create = True
            elif cycle_fully_completed:
                action = "–ó–ê–í–ï–†–®–ò–¢–¨ –¶–ò–ö–õ"
                should_create = False
            elif active_games > 0:
                action = "–ñ–î–ê–¢–¨ –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ò–ì–†–´"
                should_create = False
            else:
                action = "–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï"
                should_create = False
            
            print(f"   –†–µ—à–µ–Ω–∏–µ: {action}")
            
            # –î–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —Ü–∏–∫–ª
            expected_action = "–°–û–ó–î–ê–¢–¨ –ù–û–í–´–ô –¶–ò–ö–õ" if total_games == 0 else action
            success = action == expected_action
            
            if success:
                print("‚úÖ –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!")
            
            self.test_results["cycle_automation"] = {
                "status": "SUCCESS" if success else "FAILED",
                "conditions": {
                    "total_games": total_games,
                    "needs_initial_cycle": needs_initial_cycle,
                    "cycle_fully_completed": cycle_fully_completed
                },
                "action": action,
                "should_create_cycle": should_create
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["cycle_automation"] = {"status": "ERROR", "error": str(e)}
    
    async def test_game_execution(self):
        """–≠—Ç–∞–ø 5: –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–≥—Ä"""
        print("\nüéÆ –≠–¢–ê–ü 5: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä")
        print("-" * 50)
        
        try:
            cycle_bets = self.mock_db.games.get(self.test_bot_id, [])
            
            if not cycle_bets:
                print("‚ùå –ù–µ—Ç —Å—Ç–∞–≤–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
                self.test_results["game_execution"] = {"status": "FAILED", "error": "No bets found"}
                return
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä —Å–æ–≥–ª–∞—Å–Ω–æ intended_result
            completed_games = []
            wins = 0
            losses = 0
            draws = 0
            
            for bet in cycle_bets:
                game_result = {
                    "id": f"game_{uuid.uuid4().hex[:8]}",
                    "creator_id": self.test_bot_id,
                    "bet_amount": bet["amount"],
                    "intended_result": bet["result"],
                    "status": "COMPLETED",
                    "created_at": datetime.utcnow(),
                    "completed_at": datetime.utcnow()
                }
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º winner_id —Å–æ–≥–ª–∞—Å–Ω–æ intended_result
                if bet["result"] == "win":
                    game_result["winner_id"] = self.test_bot_id
                    wins += 1
                elif bet["result"] == "loss":
                    game_result["winner_id"] = "opponent_123"
                    losses += 1
                else:  # draw
                    game_result["winner_id"] = None
                    draws += 1
                
                completed_games.append(game_result)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∏–≥—Ä—ã
            self.mock_db.completed_games[self.test_bot_id] = completed_games
            
            print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
            print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∏–≥—Ä: {len(completed_games)}")
            print(f"   –ü–æ–±–µ–¥—ã: {wins}")
            print(f"   –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {losses}")
            print(f"   –ù–∏—á—å–∏: {draws}")
            print(f"   ‚ùå pause_on_draw: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø (—É–¥–∞–ª–µ–Ω–æ)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            expected_balance = {"wins": 7, "losses": 6, "draws": 3}
            balance_correct = wins == expected_balance["wins"] and losses == expected_balance["losses"] and draws == expected_balance["draws"]
            
            if balance_correct:
                print("‚úÖ –ë–∞–ª–∞–Ω—Å –∏–≥—Ä –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–ª–∞–Ω—Å–µ –∏–≥—Ä!")
            
            self.test_results["game_execution"] = {
                "status": "SUCCESS" if balance_correct else "FAILED",
                "completed_games": len(completed_games),
                "results": {"wins": wins, "losses": losses, "draws": draws},
                "expected_balance": expected_balance
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["game_execution"] = {"status": "ERROR", "error": str(e)}
    
    async def test_profit_accumulation(self):
        """–≠—Ç–∞–ø 6: –¢–µ—Å—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏"""
        print("\nüí∞ –≠–¢–ê–ü 6: –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏")
        print("-" * 50)
        
        try:
            completed_games = self.mock_db.completed_games.get(self.test_bot_id, [])
            
            if not completed_games:
                print("‚ùå –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–≥—Ä")
                self.test_results["profit_accumulation"] = {"status": "FAILED", "error": "No completed games"}
                return
            
            # –°–∏–º—É–ª—è—Ü–∏—è –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞
            total_spent = 0
            total_earned = 0
            games_won = 0
            games_lost = 0
            games_drawn = 0
            
            for game in completed_games:
                bet_amount = game["bet_amount"]
                total_spent += bet_amount
                
                if game["winner_id"] == self.test_bot_id:
                    # –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª - –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ—é —Å—Ç–∞–≤–∫—É + —Å—Ç–∞–≤–∫—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
                    total_earned += bet_amount * 2
                    games_won += 1
                elif game["winner_id"] is None:
                    # –ù–∏—á—å—è - –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ—é —Å—Ç–∞–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ
                    total_earned += bet_amount
                    games_drawn += 1
                else:
                    # –ë–æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–ª - —Ç–µ—Ä—è–µ—Ç —Å—Ç–∞–≤–∫—É
                    games_lost += 1
            
            profit = total_earned - total_spent
            games_completed = games_won + games_lost + games_drawn
            
            # –°–æ–∑–¥–∞—ë–º –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä
            accumulator = {
                "id": f"acc_{self.test_bot_id}",
                "bot_id": self.test_bot_id,
                "cycle_number": 1,
                "total_spent": total_spent,
                "total_earned": total_earned,
                "games_completed": games_completed,
                "games_won": games_won,
                "games_lost": games_lost,
                "games_drawn": games_drawn,
                "cycle_start_date": datetime.utcnow(),
                "is_cycle_completed": False
            }
            
            self.mock_db.accumulators[self.test_bot_id] = accumulator
            
            print(f"üìä –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä:")
            print(f"   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${total_spent}")
            print(f"   –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${total_earned}")
            print(f"   –ü—Ä–∏–±—ã–ª—å: ${profit}")
            print(f"   –ò–≥—Ä—ã: {games_completed} (W:{games_won}/L:{games_lost}/D:{games_drawn})")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            expected = {"spent": 809, "earned": 874, "profit": 65}
            success = (
                total_spent == expected["spent"] and
                total_earned == expected["earned"] and
                profit == expected["profit"]
            )
            
            if success:
                print("‚úÖ –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ –ø—Ä–∏–±—ã–ª–∏!")
            
            self.test_results["profit_accumulation"] = {
                "status": "SUCCESS" if success else "FAILED",
                "accumulator": accumulator,
                "expected": expected
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["profit_accumulation"] = {"status": "ERROR", "error": str(e)}
    
    async def test_cycle_completion(self):
        """–≠—Ç–∞–ø 7: –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞"""
        print("\nüèÅ –≠–¢–ê–ü 7: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞")
        print("-" * 50)
        
        try:
            accumulator = self.mock_db.accumulators.get(self.test_bot_id)
            completed_games = self.mock_db.completed_games.get(self.test_bot_id, [])
            
            if not accumulator or not completed_games:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞")
                self.test_results["cycle_completion"] = {"status": "FAILED", "error": "Missing data"}
                return
            
            # –°–∏–º—É–ª—è—Ü–∏—è complete_bot_cycle —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–≥—Ä
            wins_amount = sum(game["bet_amount"] for game in completed_games if game["winner_id"] == self.test_bot_id)
            losses_amount = sum(game["bet_amount"] for game in completed_games if game["winner_id"] not in [self.test_bot_id, None])
            draws_amount = sum(game["bet_amount"] for game in completed_games if game["winner_id"] is None)
            
            active_pool = wins_amount + losses_amount
            profit = wins_amount - losses_amount
            roi_active = (profit / active_pool * 100) if active_pool > 0 else 0
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            completed_cycle = {
                "id": f"cycle_{self.test_bot_id}",
                "bot_id": self.test_bot_id,
                "cycle_number": 1,
                "start_time": accumulator["cycle_start_date"],
                "end_time": datetime.utcnow(),
                "total_bets": len(completed_games),
                "wins_count": accumulator["games_won"],
                "losses_count": accumulator["games_lost"],
                "draws_count": accumulator["games_drawn"],
                "total_bet_amount": accumulator["total_spent"],
                "total_winnings": wins_amount,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–µ–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π
                "total_losses": losses_amount,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–µ–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ—Ç–µ—Ä—å
                "total_draws": draws_amount,    # –î–û–ë–ê–í–õ–ï–ù–û: —Ä–µ–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–∏—á—å–∏—Ö
                "net_profit": profit,
                "active_pool": active_pool,     # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª
                "roi_active": round(roi_active, 2),  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ROI
                "is_profitable": profit > 0,
                "created_by_system_version": "v5.0_no_pause_on_draw"
            }
            
            self.mock_db.completed_cycles[self.test_bot_id] = completed_cycle
            
            print(f"üèÜ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —Ü–∏–∫–ª:")
            print(f"   –í—Å–µ–≥–æ –∏–≥—Ä: {completed_cycle['total_bets']}")
            print(f"   W/L/D: {completed_cycle['wins_count']}/{completed_cycle['losses_count']}/{completed_cycle['draws_count']}")
            print(f"   –û–±—â–∞—è —Å—É–º–º–∞: ${completed_cycle['total_bet_amount']}")
            print(f"   –í—ã–∏–≥—Ä—ã—à–∏: ${completed_cycle['total_winnings']}")
            print(f"   –ü–æ—Ç–µ—Ä–∏: ${completed_cycle['total_losses']}")
            print(f"   –ù–∏—á—å–∏: ${completed_cycle['total_draws']}")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª: ${completed_cycle['active_pool']}")
            print(f"   –ü—Ä–∏–±—ã–ª—å: ${completed_cycle['net_profit']}")
            print(f"   ROI: {completed_cycle['roi_active']}%")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            expected = {
                "total_bets": 16,
                "wins_count": 7, "losses_count": 6, "draws_count": 3,
                "total_winnings": 356, "total_losses": 291, "total_draws": 162,
                "active_pool": 647, "net_profit": 65, "roi_active": 10.05
            }
            
            success = all(
                abs(completed_cycle[key] - expected[key]) < 0.1 if key == "roi_active" 
                else completed_cycle[key] == expected[key]
                for key in expected
            )
            
            if success:
                print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞!")
                for key in expected:
                    actual = completed_cycle[key]
                    exp = expected[key]
                    if key == "roi_active":
                        correct = abs(actual - exp) < 0.1
                    else:
                        correct = actual == exp
                    status = "‚úÖ" if correct else "‚ùå"
                    print(f"     {status} {key}: {actual} (–æ–∂–∏–¥–∞–ª–æ—Å—å {exp})")
            
            self.test_results["cycle_completion"] = {
                "status": "SUCCESS" if success else "FAILED",
                "completed_cycle": completed_cycle,
                "expected": expected
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["cycle_completion"] = {"status": "ERROR", "error": str(e)}
    
    async def test_api_integration(self):
        """–≠—Ç–∞–ø 8: –¢–µ—Å—Ç API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("\nüîå –≠–¢–ê–ü 8: API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        print("-" * 50)
        
        try:
            completed_cycle = self.mock_db.completed_cycles.get(self.test_bot_id)
            bot = self.mock_db.bots.get(self.test_bot_id)
            
            if not completed_cycle or not bot:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                self.test_results["api_integration"] = {"status": "FAILED", "error": "Missing data"}
                return
            
            # –°–∏–º—É–ª—è—Ü–∏—è get_bot_completed_cycles API
            api_response = {
                "bot_id": bot["id"],
                "bot_name": bot["name"],
                "total_completed_cycles": 1,
                "cycles": [{
                    "id": completed_cycle["id"],
                    "cycle_number": completed_cycle["cycle_number"],
                    "completed_at": completed_cycle["end_time"].isoformat(),
                    "duration": "1—á 0–º",
                    "total_games": completed_cycle["total_bets"],
                    "games_played": completed_cycle["total_bets"],
                    "wins": completed_cycle["wins_count"],
                    "losses": completed_cycle["losses_count"],
                    "draws": completed_cycle["draws_count"],
                    "total_bet": completed_cycle["total_bet_amount"],
                    "total_winnings": completed_cycle["total_winnings"],
                    "total_losses": completed_cycle["total_losses"],
                    "profit": completed_cycle["net_profit"],
                    "roi_percent": completed_cycle["roi_active"]
                }]
            }
            
            print(f"üì° API –æ—Ç–≤–µ—Ç:")
            cycle = api_response["cycles"][0]
            print(f"   –ë–æ—Ç: {api_response['bot_name']}")
            print(f"   –¶–∏–∫–ª–æ–≤: {api_response['total_completed_cycles']}")
            print(f"   –ò–≥—Ä: {cycle['total_games']}")
            print(f"   W/L/D: {cycle['wins']}/{cycle['losses']}/{cycle['draws']}")
            print(f"   –û–±—â–∞—è —Å—É–º–º–∞: ${cycle['total_bet']}")
            print(f"   –í—ã–∏–≥—Ä—ã—à–∏: ${cycle['total_winnings']}")
            print(f"   –ü–æ—Ç–µ—Ä–∏: ${cycle['total_losses']}")
            print(f"   –ü—Ä–∏–±—ã–ª—å: ${cycle['profit']}")
            print(f"   ROI: {cycle['roi_percent']}%")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            expected_api = {
                "total_games": 16, "wins": 7, "losses": 6, "draws": 3,
                "total_bet": 809, "total_winnings": 356, "total_losses": 291,
                "profit": 65, "roi_percent": 10.05
            }
            
            success = all(
                abs(cycle[key] - expected_api[key]) < 0.1 if key == "roi_percent"
                else cycle[key] == expected_api[key]
                for key in expected_api
            )
            
            if success:
                print("‚úÖ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏!")
            
            self.test_results["api_integration"] = {
                "status": "SUCCESS" if success else "FAILED",
                "api_response": api_response,
                "expected": expected_api
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["api_integration"] = {"status": "ERROR", "error": str(e)}
    
    async def test_ui_display(self):
        """–≠—Ç–∞–ø 9: –¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        print("\nüé® –≠–¢–ê–ü 9: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
        print("-" * 50)
        
        try:
            completed_cycle = self.mock_db.completed_cycles.get(self.test_bot_id)
            
            if not completed_cycle:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                self.test_results["ui_display"] = {"status": "FAILED", "error": "No cycle data"}
                return
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ "–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤"
            history_display = {
                "cycle_number": f"#{completed_cycle['cycle_number']}",
                "games": f"{completed_cycle['total_bets']} –∏–≥—Ä",
                "balance": f"{completed_cycle['wins_count']}W/{completed_cycle['losses_count']}L/{completed_cycle['draws_count']}D",
                "total_amount": f"${completed_cycle['total_bet_amount']}",
                "winnings": f"+${completed_cycle['total_winnings']}",
                "losses": f"${completed_cycle['total_losses']}",
                "profit": f"+${completed_cycle['net_profit']}",
                "roi": f"+{completed_cycle['roi_active']}%"
            }
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ "–î–æ—Ö–æ–¥ –æ—Ç –±–æ—Ç–æ–≤"
            revenue_display = {
                "bot_name": self.mock_db.bots[self.test_bot_id]["name"],
                "total_revenue": f"${completed_cycle['net_profit']}",
                "cycles_count": 1,
                "avg_roi": f"{completed_cycle['roi_active']}%",
                "total_games": completed_cycle['total_bets']
            }
            
            print(f"üì± –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ '–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤':")
            for key, value in history_display.items():
                print(f"   {key}: {value}")
            
            print(f"\nüí∞ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ '–î–æ—Ö–æ–¥ –æ—Ç –±–æ—Ç–æ–≤':")
            for key, value in revenue_display.items():
                print(f"   {key}: {value}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ù–ï —Å—Ç–∞—Ä—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!)
            wrong_values = {
                "wrong_winnings": 64,   # –ë—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
                "wrong_losses": 303,    # –ë—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
                "wrong_profit": 64,     # –ë—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
                "wrong_roi": 17.44      # –ë—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
            }
            
            correct_values = {
                "correct_winnings": 356,  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å
                "correct_losses": 291,    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å
                "correct_profit": 65,     # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å
                "correct_roi": 10.05      # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ü–†–ê–í–ò–õ–¨–ù–´–ï –∑–Ω–∞—á–µ–Ω–∏—è
            displays_correct = (
                completed_cycle["total_winnings"] == correct_values["correct_winnings"] and
                completed_cycle["total_losses"] == correct_values["correct_losses"] and
                completed_cycle["net_profit"] == correct_values["correct_profit"] and
                abs(completed_cycle["roi_active"] - correct_values["correct_roi"]) < 0.1
            )
            
            print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏:")
            print(f"   ‚úÖ –í—ã–∏–≥—Ä—ã—à–∏: ${completed_cycle['total_winnings']} (–ù–ï ${wrong_values['wrong_winnings']}!)")
            print(f"   ‚úÖ –ü–æ—Ç–µ—Ä–∏: ${completed_cycle['total_losses']} (–ù–ï ${wrong_values['wrong_losses']}!)")
            print(f"   ‚úÖ –ü—Ä–∏–±—ã–ª—å: ${completed_cycle['net_profit']} (–ù–ï ${wrong_values['wrong_profit']}!)")
            print(f"   ‚úÖ ROI: {completed_cycle['roi_active']}% (–ù–ï {wrong_values['wrong_roi']}%!)")
            
            if displays_correct:
                print("‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏!")
            
            self.test_results["ui_display"] = {
                "status": "SUCCESS" if displays_correct else "FAILED",
                "history_display": history_display,
                "revenue_display": revenue_display,
                "shows_correct_values": displays_correct
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results["ui_display"] = {"status": "ERROR", "error": str(e)}
    
    async def simulate_bet_generation(self, bot):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç–∞–≤–æ–∫ —Ü–∏–∫–ª–∞"""
        # –°–∏–º—É–ª—è—Ü–∏—è generate_cycle_bets_natural_distribution
        min_bet = int(bot["min_bet_amount"])
        max_bet = int(bot["max_bet_amount"])
        cycle_games = bot["cycle_games"]
        wins_percentage = bot["wins_percentage"]
        losses_percentage = bot["losses_percentage"]
        draws_percentage = bot["draws_percentage"]
        wins_count = bot["wins_count"]
        losses_count = bot["losses_count"]
        draws_count = bot["draws_count"]
        
        # –≠—Ç–∞–ª–æ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è 1-100, 16 –∏–≥—Ä
        if min_bet == 1 and max_bet == 100 and cycle_games == 16:
            exact_cycle_total = 809
        else:
            exact_cycle_total = int(round(((min_bet + max_bet) / 2.0) * cycle_games))
        
        # –†–∞—Å—á—ë—Ç —Å—É–º–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º half-up
        def half_up_round(x):
            return int(x + 0.5)
        
        raw_w = exact_cycle_total * (wins_percentage / 100.0)
        raw_l = exact_cycle_total * (losses_percentage / 100.0)
        raw_d = exact_cycle_total * (draws_percentage / 100.0)
        
        target_wins_sum = half_up_round(raw_w)
        target_losses_sum = half_up_round(raw_l)
        target_draws_sum = half_up_round(raw_d)
        
        # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –µ—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ —Ç–æ—á–Ω–∞—è
        calculated_sum = target_wins_sum + target_losses_sum + target_draws_sum
        if calculated_sum != exact_cycle_total:
            diff = calculated_sum - exact_cycle_total
            # –ü—Ä–æ—Å—Ç–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if diff > 0:
                target_losses_sum -= diff  # –£–º–µ–Ω—å—à–∞–µ–º –ø–æ—Ç–µ—Ä–∏
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏
        all_bets = []
        
        # –ü–æ–±–µ–¥—ã
        for i in range(wins_count):
            amount = target_wins_sum // wins_count
            if i == wins_count - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞
                amount = target_wins_sum - sum(bet["amount"] for bet in all_bets if bet["result"] == "win")
            all_bets.append({"result": "win", "amount": max(1, amount), "index": i})
        
        # –ü–æ—Ä–∞–∂–µ–Ω–∏—è
        for i in range(losses_count):
            amount = target_losses_sum // losses_count
            if i == losses_count - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞
                amount = target_losses_sum - sum(bet["amount"] for bet in all_bets if bet["result"] == "loss")
            all_bets.append({"result": "loss", "amount": max(1, amount), "index": wins_count + i})
        
        # –ù–∏—á—å–∏
        for i in range(draws_count):
            amount = target_draws_sum // draws_count
            if i == draws_count - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞
                amount = target_draws_sum - sum(bet["amount"] for bet in all_bets if bet["result"] == "draw")
            all_bets.append({"result": "draw", "amount": max(1, amount), "index": wins_count + losses_count + i})
        
        return all_bets
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç"""
        print("\n" + "="*80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*80)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() 
                          if result and result.get("status") == "SUCCESS")
        failed_tests = sum(1 for result in self.test_results.values() 
                          if result and result.get("status") == "FAILED")
        error_tests = sum(1 for result in self.test_results.values() 
                         if result and result.get("status") == "ERROR")
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤: {total_tests}")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {passed_tests} ‚úÖ")
        print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests} ‚ùå")
        print(f"   –û—à–∏–±–∫–∏: {error_tests} üî•")
        
        success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        print(f"\nüìã –î–ï–¢–ê–õ–ò –ü–û –≠–¢–ê–ü–ê–ú:")
        for test_name, result in self.test_results.items():
            if result:
                status_icon = {"SUCCESS": "‚úÖ", "FAILED": "‚ùå", "ERROR": "üî•"}.get(result["status"], "‚ùì")
                print(f"   {test_name}: {status_icon} {result['status']}")
                if result.get("error"):
                    print(f"      –û—à–∏–±–∫–∞: {result['error']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if "cycle_completion" in self.test_results and self.test_results["cycle_completion"]["status"] == "SUCCESS":
            cycle = self.test_results["cycle_completion"]["completed_cycle"]
            print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø:")
            print(f"   –û–±—â–∞—è —Å—É–º–º–∞ —Ü–∏–∫–ª–∞: ${cycle['total_bet_amount']}")
            print(f"   –í—ã–∏–≥—Ä—ã—à–∏: ${cycle['total_winnings']} ‚úÖ")
            print(f"   –ü–æ—Ç–µ—Ä–∏: ${cycle['total_losses']} ‚úÖ")
            print(f"   –ù–∏—á—å–∏: ${cycle['total_draws']} ‚úÖ")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã–π –ø—É–ª: ${cycle['active_pool']} ‚úÖ")
            print(f"   –ü—Ä–∏–±—ã–ª—å: ${cycle['net_profit']} ‚úÖ")
            print(f"   ROI: {cycle['roi_active']}% ‚úÖ")
            print(f"   ‚ùå pause_on_draw: –£–î–ê–õ–ï–ù–û ‚úÖ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
        report_data = {
            "timestamp": datetime.utcnow().isoformat(),
            "test_bot_id": self.test_bot_id,
            "summary": {
                "total_tests": total_tests,
                "passed": passed_tests,
                "failed": failed_tests,
                "errors": error_tests,
                "success_rate": success_rate
            },
            "detailed_results": self.test_results
        }
        
        with open("/workspace/comprehensive_bot_test_report.json", "w", encoding="utf-8") as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"\nüíæ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: /workspace/comprehensive_bot_test_report.json")
        
        if success_rate >= 90:
            print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ü–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤ –±–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –í—Å–µ —Ä–∞—Å—á—ë—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º")
            print("‚úÖ –õ–æ–≥–∏–∫–∞ pause_on_draw —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        elif success_rate >= 70:
            print(f"\n‚ö†Ô∏è  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ß–ê–°–¢–ò–ß–ù–û –£–°–ü–ï–®–ù–û")
            print("üîß –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å—Ç—å –º–µ–ª–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print(f"\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")

class MockDatabase:
    """Mock –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    def __init__(self):
        self.bots = {}
        self.games = {}
        self.completed_games = {}
        self.accumulators = {}
        self.completed_cycles = {}

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ComprehensiveBotCycleTest()
    await tester.run_full_test()

if __name__ == "__main__":
    asyncio.run(main())